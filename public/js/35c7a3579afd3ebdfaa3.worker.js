!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/js/",i(i.s=1)}([function(t,e,i){var n,r;!function(){"use strict";var o,s={version:"6.4.2.2",use_lines:!0,use_xyz:!1},l=!1;if(t.exports?(t.exports=s,l=!0):(void 0===(r="function"==typeof(n=s)?n.call(e,i,e,t):n)||(t.exports=r),"undefined"!=typeof document?window.ClipperLib=s:self.ClipperLib=s),l){p="chrome";o="Netscape"}else{var p=navigator.userAgent.toString().toLowerCase();o=navigator.appName}var u,h={};-1!=p.indexOf("chrome")&&-1==p.indexOf("chromium")?h.chrome=1:h.chrome=0,-1!=p.indexOf("chromium")?h.chromium=1:h.chromium=0,-1!=p.indexOf("safari")&&-1==p.indexOf("chrome")&&-1==p.indexOf("chromium")?h.safari=1:h.safari=0,-1!=p.indexOf("firefox")?h.firefox=1:h.firefox=0,-1!=p.indexOf("firefox/17")?h.firefox17=1:h.firefox17=0,-1!=p.indexOf("firefox/15")?h.firefox15=1:h.firefox15=0,-1!=p.indexOf("firefox/3")?h.firefox3=1:h.firefox3=0,-1!=p.indexOf("opera")?h.opera=1:h.opera=0,-1!=p.indexOf("msie 10")?h.msie10=1:h.msie10=0,-1!=p.indexOf("msie 9")?h.msie9=1:h.msie9=0,-1!=p.indexOf("msie 8")?h.msie8=1:h.msie8=0,-1!=p.indexOf("msie 7")?h.msie7=1:h.msie7=0,-1!=p.indexOf("msie ")?h.msie=1:h.msie=0,s.biginteger_used=null;function a(t,e,i){s.biginteger_used=1,null!=t&&("number"==typeof t&&void 0===e?this.fromInt(t):"number"==typeof t?this.fromNumber(t,e,i):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}function f(){return new a(null,void 0,void 0)}"Microsoft Internet Explorer"==o?(a.prototype.am=function(t,e,i,n,r,o){for(var s=32767&e,l=e>>15;--o>=0;){var p=32767&this[t],u=this[t++]>>15,h=l*p+u*s;r=((p=s*p+((32767&h)<<15)+i[n]+(1073741823&r))>>>30)+(h>>>15)+l*u+(r>>>30),i[n++]=1073741823&p}return r},u=30):"Netscape"!=o?(a.prototype.am=function(t,e,i,n,r,o){for(;--o>=0;){var s=e*this[t++]+i[n]+r;r=Math.floor(s/67108864),i[n++]=67108863&s}return r},u=26):(a.prototype.am=function(t,e,i,n,r,o){for(var s=16383&e,l=e>>14;--o>=0;){var p=16383&this[t],u=this[t++]>>14,h=l*p+u*s;r=((p=s*p+((16383&h)<<14)+i[n]+r)>>28)+(h>>14)+l*u,i[n++]=268435455&p}return r},u=28),a.prototype.DB=u,a.prototype.DM=(1<<u)-1,a.prototype.DV=1<<u;a.prototype.FV=Math.pow(2,52),a.prototype.F1=52-u,a.prototype.F2=2*u-52;var d,P,y="0123456789abcdefghijklmnopqrstuvwxyz",m=new Array;for(d="0".charCodeAt(0),P=0;P<=9;++P)m[d++]=P;for(d="a".charCodeAt(0),P=10;P<36;++P)m[d++]=P;for(d="A".charCodeAt(0),P=10;P<36;++P)m[d++]=P;function c(t){return y.charAt(t)}function x(t,e){var i=m[t.charCodeAt(e)];return null==i?-1:i}function v(t){var e=f();return e.fromInt(t),e}function C(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}function I(t){this.m=t}function _(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function L(t,e){return t|e}function E(t,e){return t^e}function T(t,e){return t&~e}function X(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function N(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function O(){}function Y(t){return t}function S(t){this.r2=f(),this.q3=f(),a.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}I.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},I.prototype.revert=function(t){return t},I.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},I.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},I.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},_.prototype.convert=function(t){var e=f();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(a.ZERO)>0&&this.m.subTo(e,e),e},_.prototype.revert=function(t){var e=f();return t.copyTo(e),this.reduce(e),e},_.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],n=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},_.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},_.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},a.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},a.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},a.prototype.fromString=function(t,e){var i;if(16==e)i=4;else if(8==e)i=3;else if(256==e)i=8;else if(2==e)i=1;else if(32==e)i=5;else{if(4!=e)return void this.fromRadix(t,e);i=2}this.t=0,this.s=0;for(var n=t.length,r=!1,o=0;--n>=0;){var s=8==i?255&t[n]:x(t,n);s<0?"-"==t.charAt(n)&&(r=!0):(r=!1,0==o?this[this.t++]=s:o+i>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=i)>=this.DB&&(o-=this.DB))}8==i&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),r&&a.ZERO.subTo(this,this)},a.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},a.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},a.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},a.prototype.lShiftTo=function(t,e){var i,n=t%this.DB,r=this.DB-n,o=(1<<r)-1,s=Math.floor(t/this.DB),l=this.s<<n&this.DM;for(i=this.t-1;i>=0;--i)e[i+s+1]=this[i]>>r|l,l=(this[i]&o)<<n;for(i=s-1;i>=0;--i)e[i]=0;e[s]=l,e.t=this.t+s+1,e.s=this.s,e.clamp()},a.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var n=t%this.DB,r=this.DB-n,o=(1<<n)-1;e[0]=this[i]>>n;for(var s=i+1;s<this.t;++s)e[s-i-1]|=(this[s]&o)<<r,e[s-i]=this[s]>>n;n>0&&(e[this.t-i-1]|=(this.s&o)<<r),e.t=this.t-i,e.clamp()}},a.prototype.subTo=function(t,e){for(var i=0,n=0,r=Math.min(t.t,this.t);i<r;)n+=this[i]-t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n-=t[i],e[i++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[i++]=this.DV+n:n>0&&(e[i++]=n),e.t=i,e.clamp()},a.prototype.multiplyTo=function(t,e){var i=this.abs(),n=t.abs(),r=i.t;for(e.t=r+n.t;--r>=0;)e[r]=0;for(r=0;r<n.t;++r)e[r+i.t]=i.am(0,n[r],e,r,0,i.t);e.s=0,e.clamp(),this.s!=t.s&&a.ZERO.subTo(e,e)},a.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var n=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,n,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},a.prototype.divRemTo=function(t,e,i){var n=t.abs();if(!(n.t<=0)){var r=this.abs();if(r.t<n.t)return null!=e&&e.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=f());var o=f(),s=this.s,l=t.s,p=this.DB-C(n[n.t-1]);p>0?(n.lShiftTo(p,o),r.lShiftTo(p,i)):(n.copyTo(o),r.copyTo(i));var u=o.t,h=o[u-1];if(0!=h){var d=h*(1<<this.F1)+(u>1?o[u-2]>>this.F2:0),P=this.FV/d,y=(1<<this.F1)/d,m=1<<this.F2,c=i.t,x=c-u,v=null==e?f():e;for(o.dlShiftTo(x,v),i.compareTo(v)>=0&&(i[i.t++]=1,i.subTo(v,i)),a.ONE.dlShiftTo(u,v),v.subTo(o,o);o.t<u;)o[o.t++]=0;for(;--x>=0;){var I=i[--c]==h?this.DM:Math.floor(i[c]*P+(i[c-1]+m)*y);if((i[c]+=o.am(0,I,i,x,0,u))<I)for(o.dlShiftTo(x,v),i.subTo(v,i);i[c]<--I;)i.subTo(v,i)}null!=e&&(i.drShiftTo(u,e),s!=l&&a.ZERO.subTo(e,e)),i.t=u,i.clamp(),p>0&&i.rShiftTo(p,i),s<0&&a.ZERO.subTo(i,i)}}},a.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},a.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},a.prototype.exp=function(t,e){if(t>4294967295||t<1)return a.ONE;var i=f(),n=f(),r=e.convert(this),o=C(t)-1;for(r.copyTo(i);--o>=0;)if(e.sqrTo(i,n),(t&1<<o)>0)e.mulTo(n,r,i);else{var s=i;i=n,n=s}return e.revert(i)},a.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,n=(1<<e)-1,r=!1,o="",s=this.t,l=this.DB-s*this.DB%e;if(s-- >0)for(l<this.DB&&(i=this[s]>>l)>0&&(r=!0,o=c(i));s>=0;)l<e?(i=(this[s]&(1<<l)-1)<<e-l,i|=this[--s]>>(l+=this.DB-e)):(i=this[s]>>(l-=e)&n,l<=0&&(l+=this.DB,--s)),i>0&&(r=!0),r&&(o+=c(i));return r?o:"0"},a.prototype.negate=function(){var t=f();return a.ZERO.subTo(this,t),t},a.prototype.abs=function(){return this.s<0?this.negate():this},a.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},a.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+C(this[this.t-1]^this.s&this.DM)},a.prototype.mod=function(t){var e=f();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(a.ZERO)>0&&t.subTo(e,e),e},a.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new I(e):new _(e),this.exp(t,i)},a.ZERO=v(0),a.ONE=v(1),O.prototype.convert=Y,O.prototype.revert=Y,O.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},O.prototype.sqrTo=function(t,e){t.squareTo(e)},S.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=f();return t.copyTo(e),this.reduce(e),e},S.prototype.revert=function(t){return t},S.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},S.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},S.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var A=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],B=(1<<26)/A[A.length-1];a.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},a.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),i=Math.pow(t,e),n=v(i),r=f(),o=f(),s="";for(this.divRemTo(n,r,o);r.signum()>0;)s=(i+o.intValue()).toString(t).substr(1)+s,r.divRemTo(n,r,o);return o.intValue().toString(t)+s},a.prototype.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var i=this.chunkSize(e),n=Math.pow(e,i),r=!1,o=0,s=0,l=0;l<t.length;++l){var p=x(t,l);p<0?"-"==t.charAt(l)&&0==this.signum()&&(r=!0):(s=e*s+p,++o>=i&&(this.dMultiply(n),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),r&&a.ZERO.subTo(this,this)},a.prototype.fromNumber=function(t,e,i){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(a.ONE.shiftLeft(t-1),L,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(a.ONE.shiftLeft(t-1),this);else{var n=new Array,r=7&t;n.length=1+(t>>3),e.nextBytes(n),r>0?n[0]&=(1<<r)-1:n[0]=0,this.fromString(n,256)}},a.prototype.bitwiseTo=function(t,e,i){var n,r,o=Math.min(t.t,this.t);for(n=0;n<o;++n)i[n]=e(this[n],t[n]);if(t.t<this.t){for(r=t.s&this.DM,n=o;n<this.t;++n)i[n]=e(this[n],r);i.t=this.t}else{for(r=this.s&this.DM,n=o;n<t.t;++n)i[n]=e(r,t[n]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},a.prototype.changeBit=function(t,e){var i=a.ONE.shiftLeft(t);return this.bitwiseTo(i,e,i),i},a.prototype.addTo=function(t,e){for(var i=0,n=0,r=Math.min(t.t,this.t);i<r;)n+=this[i]+t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n+=t[i],e[i++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[i++]=n:n<-1&&(e[i++]=this.DV+n),e.t=i,e.clamp()},a.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},a.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},a.prototype.multiplyLowerTo=function(t,e,i){var n,r=Math.min(this.t+t.t,e);for(i.s=0,i.t=r;r>0;)i[--r]=0;for(n=i.t-this.t;r<n;++r)i[r+this.t]=this.am(0,t[r],i,r,0,this.t);for(n=Math.min(t.t,e);r<n;++r)this.am(0,t[r],i,r,0,e-r);i.clamp()},a.prototype.multiplyUpperTo=function(t,e,i){--e;var n=i.t=this.t+t.t-e;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)i[this.t+n-e]=this.am(e-n,t[n],i,0,0,this.t+n-e);i.clamp(),i.drShiftTo(1,i)},a.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var n=this.t-1;n>=0;--n)i=(e*i+this[n])%t;return i},a.prototype.millerRabin=function(t){var e=this.subtract(a.ONE),i=e.getLowestSetBit();if(i<=0)return!1;var n=e.shiftRight(i);(t=t+1>>1)>A.length&&(t=A.length);for(var r=f(),o=0;o<t;++o){r.fromInt(A[Math.floor(Math.random()*A.length)]);var s=r.modPow(n,this);if(0!=s.compareTo(a.ONE)&&0!=s.compareTo(e)){for(var l=1;l++<i&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(a.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},a.prototype.clone=function(){var t=f();return this.copyTo(t),t},a.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},a.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},a.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},a.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},a.prototype.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var i,n=this.DB-t*this.DB%8,r=0;if(t-- >0)for(n<this.DB&&(i=this[t]>>n)!=(this.s&this.DM)>>n&&(e[r++]=i|this.s<<this.DB-n);t>=0;)n<8?(i=(this[t]&(1<<n)-1)<<8-n,i|=this[--t]>>(n+=this.DB-8)):(i=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==r&&(128&this.s)!=(128&i)&&++r,(r>0||i!=this.s)&&(e[r++]=i);return e},a.prototype.equals=function(t){return 0==this.compareTo(t)},a.prototype.min=function(t){return this.compareTo(t)<0?this:t},a.prototype.max=function(t){return this.compareTo(t)>0?this:t},a.prototype.and=function(t){var e=f();return this.bitwiseTo(t,g,e),e},a.prototype.or=function(t){var e=f();return this.bitwiseTo(t,L,e),e},a.prototype.xor=function(t){var e=f();return this.bitwiseTo(t,E,e),e},a.prototype.andNot=function(t){var e=f();return this.bitwiseTo(t,T,e),e},a.prototype.not=function(){for(var t=f(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},a.prototype.shiftLeft=function(t){var e=f();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},a.prototype.shiftRight=function(t){var e=f();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},a.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+X(this[t]);return this.s<0?this.t*this.DB:-1},a.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=N(this[i]^e);return t},a.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},a.prototype.setBit=function(t){return this.changeBit(t,L)},a.prototype.clearBit=function(t){return this.changeBit(t,T)},a.prototype.flipBit=function(t){return this.changeBit(t,E)},a.prototype.add=function(t){var e=f();return this.addTo(t,e),e},a.prototype.subtract=function(t){var e=f();return this.subTo(t,e),e},a.prototype.multiply=function(t){var e=f();return this.multiplyTo(t,e),e},a.prototype.divide=function(t){var e=f();return this.divRemTo(t,e,null),e},a.prototype.remainder=function(t){var e=f();return this.divRemTo(t,null,e),e},a.prototype.divideAndRemainder=function(t){var e=f(),i=f();return this.divRemTo(t,e,i),new Array(e,i)},a.prototype.modPow=function(t,e){var i,n,r=t.bitLength(),o=v(1);if(r<=0)return o;i=r<18?1:r<48?3:r<144?4:r<768?5:6,n=r<8?new I(e):e.isEven()?new S(e):new _(e);var s=new Array,l=3,p=i-1,u=(1<<i)-1;if(s[1]=n.convert(this),i>1){var h=f();for(n.sqrTo(s[1],h);l<=u;)s[l]=f(),n.mulTo(h,s[l-2],s[l]),l+=2}var a,d,P=t.t-1,y=!0,m=f();for(r=C(t[P])-1;P>=0;){for(r>=p?a=t[P]>>r-p&u:(a=(t[P]&(1<<r+1)-1)<<p-r,P>0&&(a|=t[P-1]>>this.DB+r-p)),l=i;0==(1&a);)a>>=1,--l;if((r-=l)<0&&(r+=this.DB,--P),y)s[a].copyTo(o),y=!1;else{for(;l>1;)n.sqrTo(o,m),n.sqrTo(m,o),l-=2;l>0?n.sqrTo(o,m):(d=o,o=m,m=d),n.mulTo(m,s[a],o)}for(;P>=0&&0==(t[P]&1<<r);)n.sqrTo(o,m),d=o,o=m,m=d,--r<0&&(r=this.DB-1,--P)}return n.revert(o)},a.prototype.modInverse=function(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return a.ZERO;for(var i=t.clone(),n=this.clone(),r=v(1),o=v(0),s=v(0),l=v(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),e?(r.isEven()&&o.isEven()||(r.addTo(this,r),o.subTo(t,o)),r.rShiftTo(1,r)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),e?(s.isEven()&&l.isEven()||(s.addTo(this,s),l.subTo(t,l)),s.rShiftTo(1,s)):l.isEven()||l.subTo(t,l),l.rShiftTo(1,l);i.compareTo(n)>=0?(i.subTo(n,i),e&&r.subTo(s,r),o.subTo(l,o)):(n.subTo(i,n),e&&s.subTo(r,s),l.subTo(o,l))}return 0!=n.compareTo(a.ONE)?a.ZERO:l.compareTo(t)>=0?l.subtract(t):l.signum()<0?(l.addTo(t,l),l.signum()<0?l.add(t):l):l},a.prototype.pow=function(t){return this.exp(t,new O)},a.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var n=e;e=i,i=n}var r=e.getLowestSetBit(),o=i.getLowestSetBit();if(o<0)return e;for(r<o&&(o=r),o>0&&(e.rShiftTo(o,e),i.rShiftTo(o,i));e.signum()>0;)(r=e.getLowestSetBit())>0&&e.rShiftTo(r,e),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return o>0&&i.lShiftTo(o,i),i},a.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=A[A.length-1]){for(e=0;e<A.length;++e)if(i[0]==A[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<A.length;){for(var n=A[e],r=e+1;r<A.length&&n<B;)n*=A[r++];for(n=i.modInt(n);e<r;)if(n%A[e++]==0)return!1}return i.millerRabin(t)},a.prototype.square=function(){var t=f();return this.squareTo(t),t};var D=a;D.prototype.IsNegative=function(){return-1==this.compareTo(D.ZERO)},D.op_Equality=function(t,e){return 0==t.compareTo(e)},D.op_Inequality=function(t,e){return 0!=t.compareTo(e)},D.op_GreaterThan=function(t,e){return t.compareTo(e)>0},D.op_LessThan=function(t,e){return t.compareTo(e)<0},D.op_Addition=function(t,e){return new D(t,void 0,void 0).add(new D(e,void 0,void 0))},D.op_Subtraction=function(t,e){return new D(t,void 0,void 0).subtract(new D(e,void 0,void 0))},D.Int128Mul=function(t,e){return new D(t,void 0,void 0).multiply(new D(e,void 0,void 0))},D.op_Division=function(t,e){return t.divide(e)},D.prototype.ToDouble=function(){return parseFloat(this.toString())};var b=function(t,e){var i;if(void 0===Object.getOwnPropertyNames){for(i in e.prototype)void 0!==t.prototype[i]&&t.prototype[i]!==Object.prototype[i]||(t.prototype[i]=e.prototype[i]);for(i in e)void 0===t[i]&&(t[i]=e[i]);t.$baseCtor=e}else{for(var n=Object.getOwnPropertyNames(e.prototype),r=0;r<n.length;r++)void 0===Object.getOwnPropertyDescriptor(t.prototype,n[r])&&Object.defineProperty(t.prototype,n[r],Object.getOwnPropertyDescriptor(e.prototype,n[r]));for(i in e)void 0===t[i]&&(t[i]=e[i]);t.$baseCtor=e}};s.Path=function(){return[]},s.Path.prototype.push=Array.prototype.push,s.Paths=function(){return[]},s.Paths.prototype.push=Array.prototype.push,s.DoublePoint=function(){var t=arguments;this.X=0,this.Y=0,1===t.length?(this.X=t[0].X,this.Y=t[0].Y):2===t.length&&(this.X=t[0],this.Y=t[1])},s.DoublePoint0=function(){this.X=0,this.Y=0},s.DoublePoint0.prototype=s.DoublePoint.prototype,s.DoublePoint1=function(t){this.X=t.X,this.Y=t.Y},s.DoublePoint1.prototype=s.DoublePoint.prototype,s.DoublePoint2=function(t,e){this.X=t,this.Y=e},s.DoublePoint2.prototype=s.DoublePoint.prototype,s.PolyNode=function(){this.m_Parent=null,this.m_polygon=new s.Path,this.m_Index=0,this.m_jointype=0,this.m_endtype=0,this.m_Childs=[],this.IsOpen=!1},s.PolyNode.prototype.IsHoleNode=function(){for(var t=!0,e=this.m_Parent;null!==e;)t=!t,e=e.m_Parent;return t},s.PolyNode.prototype.ChildCount=function(){return this.m_Childs.length},s.PolyNode.prototype.Contour=function(){return this.m_polygon},s.PolyNode.prototype.AddChild=function(t){var e=this.m_Childs.length;this.m_Childs.push(t),t.m_Parent=this,t.m_Index=e},s.PolyNode.prototype.GetNext=function(){return this.m_Childs.length>0?this.m_Childs[0]:this.GetNextSiblingUp()},s.PolyNode.prototype.GetNextSiblingUp=function(){return null===this.m_Parent?null:this.m_Index===this.m_Parent.m_Childs.length-1?this.m_Parent.GetNextSiblingUp():this.m_Parent.m_Childs[this.m_Index+1]},s.PolyNode.prototype.Childs=function(){return this.m_Childs},s.PolyNode.prototype.Parent=function(){return this.m_Parent},s.PolyNode.prototype.IsHole=function(){return this.IsHoleNode()},s.PolyTree=function(){this.m_AllPolys=[],s.PolyNode.call(this)},s.PolyTree.prototype.Clear=function(){for(var t=0,e=this.m_AllPolys.length;t<e;t++)this.m_AllPolys[t]=null;this.m_AllPolys.length=0,this.m_Childs.length=0},s.PolyTree.prototype.GetFirst=function(){return this.m_Childs.length>0?this.m_Childs[0]:null},s.PolyTree.prototype.Total=function(){var t=this.m_AllPolys.length;return t>0&&this.m_Childs[0]!==this.m_AllPolys[0]&&t--,t},b(s.PolyTree,s.PolyNode),s.Math_Abs_Int64=s.Math_Abs_Int32=s.Math_Abs_Double=function(t){return Math.abs(t)},s.Math_Max_Int32_Int32=function(t,e){return Math.max(t,e)},h.msie||h.opera||h.safari?s.Cast_Int32=function(t){return 0|t}:s.Cast_Int32=function(t){return~~t},void 0===Number.toInteger&&(Number.toInteger=null),h.chrome?s.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):~~t}:h.firefox&&"function"==typeof Number.toInteger?s.Cast_Int64=function(t){return Number.toInteger(t)}:h.msie7||h.msie8?s.Cast_Int64=function(t){return parseInt(t,10)}:h.msie?s.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):0|t}:s.Cast_Int64=function(t){return t<0?Math.ceil(t):Math.floor(t)},s.Clear=function(t){t.length=0},s.PI=3.141592653589793,s.PI2=6.283185307179586,s.IntPoint=function(){var t=arguments,e=t.length;if(this.X=0,this.Y=0,s.use_xyz)if(this.Z=0,3===e)this.X=t[0],this.Y=t[1],this.Z=t[2];else if(2===e)this.X=t[0],this.Y=t[1],this.Z=0;else if(1===e)if(t[0]instanceof s.DoublePoint){var i=t[0];this.X=s.Clipper.Round(i.X),this.Y=s.Clipper.Round(i.Y),this.Z=0}else{void 0===(n=t[0]).Z&&(n.Z=0),this.X=n.X,this.Y=n.Y,this.Z=n.Z}else this.X=0,this.Y=0,this.Z=0;else if(2===e)this.X=t[0],this.Y=t[1];else if(1===e)if(t[0]instanceof s.DoublePoint){i=t[0];this.X=s.Clipper.Round(i.X),this.Y=s.Clipper.Round(i.Y)}else{var n=t[0];this.X=n.X,this.Y=n.Y}else this.X=0,this.Y=0},s.IntPoint.op_Equality=function(t,e){return t.X===e.X&&t.Y===e.Y},s.IntPoint.op_Inequality=function(t,e){return t.X!==e.X||t.Y!==e.Y},s.IntPoint0=function(){this.X=0,this.Y=0,s.use_xyz&&(this.Z=0)},s.IntPoint0.prototype=s.IntPoint.prototype,s.IntPoint1=function(t){this.X=t.X,this.Y=t.Y,s.use_xyz&&(void 0===t.Z?this.Z=0:this.Z=t.Z)},s.IntPoint1.prototype=s.IntPoint.prototype,s.IntPoint1dp=function(t){this.X=s.Clipper.Round(t.X),this.Y=s.Clipper.Round(t.Y),s.use_xyz&&(this.Z=0)},s.IntPoint1dp.prototype=s.IntPoint.prototype,s.IntPoint2=function(t,e,i){this.X=t,this.Y=e,s.use_xyz&&(this.Z=void 0===i?0:i)},s.IntPoint2.prototype=s.IntPoint.prototype,s.IntRect=function(){var t=arguments,e=t.length;if(4===e)this.left=t[0],this.top=t[1],this.right=t[2],this.bottom=t[3];else if(1===e){var i=t[0];this.left=i.left,this.top=i.top,this.right=i.right,this.bottom=i.bottom}else this.left=0,this.top=0,this.right=0,this.bottom=0},s.IntRect0=function(){this.left=0,this.top=0,this.right=0,this.bottom=0},s.IntRect0.prototype=s.IntRect.prototype,s.IntRect1=function(t){this.left=t.left,this.top=t.top,this.right=t.right,this.bottom=t.bottom},s.IntRect1.prototype=s.IntRect.prototype,s.IntRect4=function(t,e,i,n){this.left=t,this.top=e,this.right=i,this.bottom=n},s.IntRect4.prototype=s.IntRect.prototype,s.ClipType={ctIntersection:0,ctUnion:1,ctDifference:2,ctXor:3},s.PolyType={ptSubject:0,ptClip:1},s.PolyFillType={pftEvenOdd:0,pftNonZero:1,pftPositive:2,pftNegative:3},s.JoinType={jtSquare:0,jtRound:1,jtMiter:2},s.EndType={etOpenSquare:0,etOpenRound:1,etOpenButt:2,etClosedLine:3,etClosedPolygon:4},s.EdgeSide={esLeft:0,esRight:1},s.Direction={dRightToLeft:0,dLeftToRight:1},s.TEdge=function(){this.Bot=new s.IntPoint0,this.Curr=new s.IntPoint0,this.Top=new s.IntPoint0,this.Delta=new s.IntPoint0,this.Dx=0,this.PolyTyp=s.PolyType.ptSubject,this.Side=s.EdgeSide.esLeft,this.WindDelta=0,this.WindCnt=0,this.WindCnt2=0,this.OutIdx=0,this.Next=null,this.Prev=null,this.NextInLML=null,this.NextInAEL=null,this.PrevInAEL=null,this.NextInSEL=null,this.PrevInSEL=null},s.IntersectNode=function(){this.Edge1=null,this.Edge2=null,this.Pt=new s.IntPoint0},s.MyIntersectNodeSort=function(){},s.MyIntersectNodeSort.Compare=function(t,e){var i=e.Pt.Y-t.Pt.Y;return i>0?1:i<0?-1:0},s.LocalMinima=function(){this.Y=0,this.LeftBound=null,this.RightBound=null,this.Next=null},s.Scanbeam=function(){this.Y=0,this.Next=null},s.Maxima=function(){this.X=0,this.Next=null,this.Prev=null},s.OutRec=function(){this.Idx=0,this.IsHole=!1,this.IsOpen=!1,this.FirstLeft=null,this.Pts=null,this.BottomPt=null,this.PolyNode=null},s.OutPt=function(){this.Idx=0,this.Pt=new s.IntPoint0,this.Next=null,this.Prev=null},s.Join=function(){this.OutPt1=null,this.OutPt2=null,this.OffPt=new s.IntPoint0},s.ClipperBase=function(){this.m_MinimaList=null,this.m_CurrentLM=null,this.m_edges=new Array,this.m_UseFullRange=!1,this.m_HasOpenPaths=!1,this.PreserveCollinear=!1,this.m_Scanbeam=null,this.m_PolyOuts=null,this.m_ActiveEdges=null},s.ClipperBase.horizontal=-9007199254740992,s.ClipperBase.Skip=-2,s.ClipperBase.Unassigned=-1,s.ClipperBase.tolerance=1e-20,s.ClipperBase.loRange=47453132,s.ClipperBase.hiRange=0xfffffffffffff,s.ClipperBase.near_zero=function(t){return t>-s.ClipperBase.tolerance&&t<s.ClipperBase.tolerance},s.ClipperBase.IsHorizontal=function(t){return 0===t.Delta.Y},s.ClipperBase.prototype.PointIsVertex=function(t,e){var i=e;do{if(s.IntPoint.op_Equality(i.Pt,t))return!0;i=i.Next}while(i!==e);return!1},s.ClipperBase.prototype.PointOnLineSegment=function(t,e,i,n){return n?t.X===e.X&&t.Y===e.Y||t.X===i.X&&t.Y===i.Y||t.X>e.X==t.X<i.X&&t.Y>e.Y==t.Y<i.Y&&D.op_Equality(D.Int128Mul(t.X-e.X,i.Y-e.Y),D.Int128Mul(i.X-e.X,t.Y-e.Y)):t.X===e.X&&t.Y===e.Y||t.X===i.X&&t.Y===i.Y||t.X>e.X==t.X<i.X&&t.Y>e.Y==t.Y<i.Y&&(t.X-e.X)*(i.Y-e.Y)==(i.X-e.X)*(t.Y-e.Y)},s.ClipperBase.prototype.PointOnPolygon=function(t,e,i){for(var n=e;;){if(this.PointOnLineSegment(t,n.Pt,n.Next.Pt,i))return!0;if((n=n.Next)===e)break}return!1},s.ClipperBase.prototype.SlopesEqual=s.ClipperBase.SlopesEqual=function(){var t,e,i,n,r,o,l=arguments,p=l.length;return 3===p?(t=l[0],e=l[1],l[2]?D.op_Equality(D.Int128Mul(t.Delta.Y,e.Delta.X),D.Int128Mul(t.Delta.X,e.Delta.Y)):s.Cast_Int64(t.Delta.Y*e.Delta.X)===s.Cast_Int64(t.Delta.X*e.Delta.Y)):4===p?(i=l[0],n=l[1],r=l[2],l[3]?D.op_Equality(D.Int128Mul(i.Y-n.Y,n.X-r.X),D.Int128Mul(i.X-n.X,n.Y-r.Y)):s.Cast_Int64((i.Y-n.Y)*(n.X-r.X))-s.Cast_Int64((i.X-n.X)*(n.Y-r.Y))==0):(i=l[0],n=l[1],r=l[2],o=l[3],l[4]?D.op_Equality(D.Int128Mul(i.Y-n.Y,r.X-o.X),D.Int128Mul(i.X-n.X,r.Y-o.Y)):s.Cast_Int64((i.Y-n.Y)*(r.X-o.X))-s.Cast_Int64((i.X-n.X)*(r.Y-o.Y))==0)},s.ClipperBase.SlopesEqual3=function(t,e,i){return i?D.op_Equality(D.Int128Mul(t.Delta.Y,e.Delta.X),D.Int128Mul(t.Delta.X,e.Delta.Y)):s.Cast_Int64(t.Delta.Y*e.Delta.X)===s.Cast_Int64(t.Delta.X*e.Delta.Y)},s.ClipperBase.SlopesEqual4=function(t,e,i,n){return n?D.op_Equality(D.Int128Mul(t.Y-e.Y,e.X-i.X),D.Int128Mul(t.X-e.X,e.Y-i.Y)):s.Cast_Int64((t.Y-e.Y)*(e.X-i.X))-s.Cast_Int64((t.X-e.X)*(e.Y-i.Y))==0},s.ClipperBase.SlopesEqual5=function(t,e,i,n,r){return r?D.op_Equality(D.Int128Mul(t.Y-e.Y,i.X-n.X),D.Int128Mul(t.X-e.X,i.Y-n.Y)):s.Cast_Int64((t.Y-e.Y)*(i.X-n.X))-s.Cast_Int64((t.X-e.X)*(i.Y-n.Y))==0},s.ClipperBase.prototype.Clear=function(){this.DisposeLocalMinimaList();for(var t=0,e=this.m_edges.length;t<e;++t){for(var i=0,n=this.m_edges[t].length;i<n;++i)this.m_edges[t][i]=null;s.Clear(this.m_edges[t])}s.Clear(this.m_edges),this.m_UseFullRange=!1,this.m_HasOpenPaths=!1},s.ClipperBase.prototype.DisposeLocalMinimaList=function(){for(;null!==this.m_MinimaList;){var t=this.m_MinimaList.Next;this.m_MinimaList=null,this.m_MinimaList=t}this.m_CurrentLM=null},s.ClipperBase.prototype.RangeTest=function(t,e){e.Value?(t.X>s.ClipperBase.hiRange||t.Y>s.ClipperBase.hiRange||-t.X>s.ClipperBase.hiRange||-t.Y>s.ClipperBase.hiRange)&&s.Error("Coordinate outside allowed range in RangeTest()."):(t.X>s.ClipperBase.loRange||t.Y>s.ClipperBase.loRange||-t.X>s.ClipperBase.loRange||-t.Y>s.ClipperBase.loRange)&&(e.Value=!0,this.RangeTest(t,e))},s.ClipperBase.prototype.InitEdge=function(t,e,i,n){t.Next=e,t.Prev=i,t.Curr.X=n.X,t.Curr.Y=n.Y,s.use_xyz&&(t.Curr.Z=n.Z),t.OutIdx=-1},s.ClipperBase.prototype.InitEdge2=function(t,e){t.Curr.Y>=t.Next.Curr.Y?(t.Bot.X=t.Curr.X,t.Bot.Y=t.Curr.Y,s.use_xyz&&(t.Bot.Z=t.Curr.Z),t.Top.X=t.Next.Curr.X,t.Top.Y=t.Next.Curr.Y,s.use_xyz&&(t.Top.Z=t.Next.Curr.Z)):(t.Top.X=t.Curr.X,t.Top.Y=t.Curr.Y,s.use_xyz&&(t.Top.Z=t.Curr.Z),t.Bot.X=t.Next.Curr.X,t.Bot.Y=t.Next.Curr.Y,s.use_xyz&&(t.Bot.Z=t.Next.Curr.Z)),this.SetDx(t),t.PolyTyp=e},s.ClipperBase.prototype.FindNextLocMin=function(t){for(var e;;){for(;s.IntPoint.op_Inequality(t.Bot,t.Prev.Bot)||s.IntPoint.op_Equality(t.Curr,t.Top);)t=t.Next;if(t.Dx!==s.ClipperBase.horizontal&&t.Prev.Dx!==s.ClipperBase.horizontal)break;for(;t.Prev.Dx===s.ClipperBase.horizontal;)t=t.Prev;for(e=t;t.Dx===s.ClipperBase.horizontal;)t=t.Next;if(t.Top.Y!==t.Prev.Bot.Y){e.Prev.Bot.X<t.Bot.X&&(t=e);break}}return t},s.ClipperBase.prototype.ProcessBound=function(t,e){var i,n,r=t;if(r.OutIdx===s.ClipperBase.Skip){if(t=r,e){for(;t.Top.Y===t.Next.Bot.Y;)t=t.Next;for(;t!==r&&t.Dx===s.ClipperBase.horizontal;)t=t.Prev}else{for(;t.Top.Y===t.Prev.Bot.Y;)t=t.Prev;for(;t!==r&&t.Dx===s.ClipperBase.horizontal;)t=t.Next}if(t===r)r=e?t.Next:t.Prev;else{t=e?r.Next:r.Prev;var o=new s.LocalMinima;o.Next=null,o.Y=t.Bot.Y,o.LeftBound=null,o.RightBound=t,t.WindDelta=0,r=this.ProcessBound(t,e),this.InsertLocalMinima(o)}return r}if(t.Dx===s.ClipperBase.horizontal&&((i=e?t.Prev:t.Next).Dx===s.ClipperBase.horizontal?i.Bot.X!==t.Bot.X&&i.Top.X!==t.Bot.X&&this.ReverseHorizontal(t):i.Bot.X!==t.Bot.X&&this.ReverseHorizontal(t)),i=t,e){for(;r.Top.Y===r.Next.Bot.Y&&r.Next.OutIdx!==s.ClipperBase.Skip;)r=r.Next;if(r.Dx===s.ClipperBase.horizontal&&r.Next.OutIdx!==s.ClipperBase.Skip){for(n=r;n.Prev.Dx===s.ClipperBase.horizontal;)n=n.Prev;n.Prev.Top.X>r.Next.Top.X&&(r=n.Prev)}for(;t!==r;)t.NextInLML=t.Next,t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),t=t.Next;t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),r=r.Next}else{for(;r.Top.Y===r.Prev.Bot.Y&&r.Prev.OutIdx!==s.ClipperBase.Skip;)r=r.Prev;if(r.Dx===s.ClipperBase.horizontal&&r.Prev.OutIdx!==s.ClipperBase.Skip){for(n=r;n.Next.Dx===s.ClipperBase.horizontal;)n=n.Next;(n.Next.Top.X===r.Prev.Top.X||n.Next.Top.X>r.Prev.Top.X)&&(r=n.Next)}for(;t!==r;)t.NextInLML=t.Prev,t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),t=t.Prev;t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),r=r.Prev}return r},s.ClipperBase.prototype.AddPath=function(t,e,i){s.use_lines?i||e!==s.PolyType.ptClip||s.Error("AddPath: Open paths must be subject."):i||s.Error("AddPath: Open paths have been disabled.");var n=t.length-1;if(i)for(;n>0&&s.IntPoint.op_Equality(t[n],t[0]);)--n;for(;n>0&&s.IntPoint.op_Equality(t[n],t[n-1]);)--n;if(i&&n<2||!i&&n<1)return!1;for(var r=new Array,o=0;o<=n;o++)r.push(new s.TEdge);var l=!0;r[1].Curr.X=t[1].X,r[1].Curr.Y=t[1].Y,s.use_xyz&&(r[1].Curr.Z=t[1].Z);var p={Value:this.m_UseFullRange};this.RangeTest(t[0],p),this.m_UseFullRange=p.Value,p.Value=this.m_UseFullRange,this.RangeTest(t[n],p),this.m_UseFullRange=p.Value,this.InitEdge(r[0],r[1],r[n],t[0]),this.InitEdge(r[n],r[0],r[n-1],t[n]);for(o=n-1;o>=1;--o)p.Value=this.m_UseFullRange,this.RangeTest(t[o],p),this.m_UseFullRange=p.Value,this.InitEdge(r[o],r[o+1],r[o-1],t[o]);for(var u,h=r[0],a=h,f=h;;)if(a.Curr!==a.Next.Curr||!i&&a.Next===h){if(a.Prev===a.Next)break;if(!i||!s.ClipperBase.SlopesEqual4(a.Prev.Curr,a.Curr,a.Next.Curr,this.m_UseFullRange)||this.PreserveCollinear&&this.Pt2IsBetweenPt1AndPt3(a.Prev.Curr,a.Curr,a.Next.Curr)){if((a=a.Next)===f||!i&&a.Next===h)break}else a===h&&(h=a.Next),f=a=(a=this.RemoveEdge(a)).Prev}else{if(a===a.Next)break;a===h&&(h=a.Next),f=a=this.RemoveEdge(a)}if(!i&&a===a.Next||i&&a.Prev===a.Next)return!1;i||(this.m_HasOpenPaths=!0,h.Prev.OutIdx=s.ClipperBase.Skip),a=h;do{this.InitEdge2(a,e),a=a.Next,l&&a.Curr.Y!==h.Curr.Y&&(l=!1)}while(a!==h);if(l){if(i)return!1;for(a.Prev.OutIdx=s.ClipperBase.Skip,(P=new s.LocalMinima).Next=null,P.Y=a.Bot.Y,P.LeftBound=null,P.RightBound=a,P.RightBound.Side=s.EdgeSide.esRight,P.RightBound.WindDelta=0;a.Bot.X!==a.Prev.Top.X&&this.ReverseHorizontal(a),a.Next.OutIdx!==s.ClipperBase.Skip;)a.NextInLML=a.Next,a=a.Next;return this.InsertLocalMinima(P),this.m_edges.push(r),!0}this.m_edges.push(r);var d=null;for(s.IntPoint.op_Equality(a.Prev.Bot,a.Prev.Top)&&(a=a.Next);(a=this.FindNextLocMin(a))!==d;){var P;null===d&&(d=a),(P=new s.LocalMinima).Next=null,P.Y=a.Bot.Y,a.Dx<a.Prev.Dx?(P.LeftBound=a.Prev,P.RightBound=a,u=!1):(P.LeftBound=a,P.RightBound=a.Prev,u=!0),P.LeftBound.Side=s.EdgeSide.esLeft,P.RightBound.Side=s.EdgeSide.esRight,i?P.LeftBound.Next===P.RightBound?P.LeftBound.WindDelta=-1:P.LeftBound.WindDelta=1:P.LeftBound.WindDelta=0,P.RightBound.WindDelta=-P.LeftBound.WindDelta,(a=this.ProcessBound(P.LeftBound,u)).OutIdx===s.ClipperBase.Skip&&(a=this.ProcessBound(a,u));var y=this.ProcessBound(P.RightBound,!u);y.OutIdx===s.ClipperBase.Skip&&(y=this.ProcessBound(y,!u)),P.LeftBound.OutIdx===s.ClipperBase.Skip?P.LeftBound=null:P.RightBound.OutIdx===s.ClipperBase.Skip&&(P.RightBound=null),this.InsertLocalMinima(P),u||(a=y)}return!0},s.ClipperBase.prototype.AddPaths=function(t,e,i){for(var n=!1,r=0,o=t.length;r<o;++r)this.AddPath(t[r],e,i)&&(n=!0);return n},s.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3=function(t,e,i){return!(s.IntPoint.op_Equality(t,i)||s.IntPoint.op_Equality(t,e)||s.IntPoint.op_Equality(i,e))&&(t.X!==i.X?e.X>t.X==e.X<i.X:e.Y>t.Y==e.Y<i.Y)},s.ClipperBase.prototype.RemoveEdge=function(t){t.Prev.Next=t.Next,t.Next.Prev=t.Prev;var e=t.Next;return t.Prev=null,e},s.ClipperBase.prototype.SetDx=function(t){t.Delta.X=t.Top.X-t.Bot.X,t.Delta.Y=t.Top.Y-t.Bot.Y,0===t.Delta.Y?t.Dx=s.ClipperBase.horizontal:t.Dx=t.Delta.X/t.Delta.Y},s.ClipperBase.prototype.InsertLocalMinima=function(t){if(null===this.m_MinimaList)this.m_MinimaList=t;else if(t.Y>=this.m_MinimaList.Y)t.Next=this.m_MinimaList,this.m_MinimaList=t;else{for(var e=this.m_MinimaList;null!==e.Next&&t.Y<e.Next.Y;)e=e.Next;t.Next=e.Next,e.Next=t}},s.ClipperBase.prototype.PopLocalMinima=function(t,e){return e.v=this.m_CurrentLM,null!==this.m_CurrentLM&&this.m_CurrentLM.Y===t&&(this.m_CurrentLM=this.m_CurrentLM.Next,!0)},s.ClipperBase.prototype.ReverseHorizontal=function(t){var e=t.Top.X;t.Top.X=t.Bot.X,t.Bot.X=e,s.use_xyz&&(e=t.Top.Z,t.Top.Z=t.Bot.Z,t.Bot.Z=e)},s.ClipperBase.prototype.Reset=function(){if(this.m_CurrentLM=this.m_MinimaList,null!==this.m_CurrentLM){this.m_Scanbeam=null;for(var t=this.m_MinimaList;null!==t;){this.InsertScanbeam(t.Y);var e=t.LeftBound;null!==e&&(e.Curr.X=e.Bot.X,e.Curr.Y=e.Bot.Y,s.use_xyz&&(e.Curr.Z=e.Bot.Z),e.OutIdx=s.ClipperBase.Unassigned),null!==(e=t.RightBound)&&(e.Curr.X=e.Bot.X,e.Curr.Y=e.Bot.Y,s.use_xyz&&(e.Curr.Z=e.Bot.Z),e.OutIdx=s.ClipperBase.Unassigned),t=t.Next}this.m_ActiveEdges=null}},s.ClipperBase.prototype.InsertScanbeam=function(t){if(null===this.m_Scanbeam)this.m_Scanbeam=new s.Scanbeam,this.m_Scanbeam.Next=null,this.m_Scanbeam.Y=t;else if(t>this.m_Scanbeam.Y){var e=new s.Scanbeam;e.Y=t,e.Next=this.m_Scanbeam,this.m_Scanbeam=e}else{for(var i=this.m_Scanbeam;null!==i.Next&&t<=i.Next.Y;)i=i.Next;if(t===i.Y)return;var n=new s.Scanbeam;n.Y=t,n.Next=i.Next,i.Next=n}},s.ClipperBase.prototype.PopScanbeam=function(t){return null===this.m_Scanbeam?(t.v=0,!1):(t.v=this.m_Scanbeam.Y,this.m_Scanbeam=this.m_Scanbeam.Next,!0)},s.ClipperBase.prototype.LocalMinimaPending=function(){return null!==this.m_CurrentLM},s.ClipperBase.prototype.CreateOutRec=function(){var t=new s.OutRec;return t.Idx=s.ClipperBase.Unassigned,t.IsHole=!1,t.IsOpen=!1,t.FirstLeft=null,t.Pts=null,t.BottomPt=null,t.PolyNode=null,this.m_PolyOuts.push(t),t.Idx=this.m_PolyOuts.length-1,t},s.ClipperBase.prototype.DisposeOutRec=function(t){var e=this.m_PolyOuts[t];e.Pts=null,e=null,this.m_PolyOuts[t]=null},s.ClipperBase.prototype.UpdateEdgeIntoAEL=function(t){null===t.NextInLML&&s.Error("UpdateEdgeIntoAEL: invalid call");var e=t.PrevInAEL,i=t.NextInAEL;return t.NextInLML.OutIdx=t.OutIdx,null!==e?e.NextInAEL=t.NextInLML:this.m_ActiveEdges=t.NextInLML,null!==i&&(i.PrevInAEL=t.NextInLML),t.NextInLML.Side=t.Side,t.NextInLML.WindDelta=t.WindDelta,t.NextInLML.WindCnt=t.WindCnt,t.NextInLML.WindCnt2=t.WindCnt2,(t=t.NextInLML).Curr.X=t.Bot.X,t.Curr.Y=t.Bot.Y,t.PrevInAEL=e,t.NextInAEL=i,s.ClipperBase.IsHorizontal(t)||this.InsertScanbeam(t.Top.Y),t},s.ClipperBase.prototype.SwapPositionsInAEL=function(t,e){if(t.NextInAEL!==t.PrevInAEL&&e.NextInAEL!==e.PrevInAEL){if(t.NextInAEL===e){var i=e.NextInAEL;null!==i&&(i.PrevInAEL=t);var n=t.PrevInAEL;null!==n&&(n.NextInAEL=e),e.PrevInAEL=n,e.NextInAEL=t,t.PrevInAEL=e,t.NextInAEL=i}else if(e.NextInAEL===t){var r=t.NextInAEL;null!==r&&(r.PrevInAEL=e);var o=e.PrevInAEL;null!==o&&(o.NextInAEL=t),t.PrevInAEL=o,t.NextInAEL=e,e.PrevInAEL=t,e.NextInAEL=r}else{var s=t.NextInAEL,l=t.PrevInAEL;t.NextInAEL=e.NextInAEL,null!==t.NextInAEL&&(t.NextInAEL.PrevInAEL=t),t.PrevInAEL=e.PrevInAEL,null!==t.PrevInAEL&&(t.PrevInAEL.NextInAEL=t),e.NextInAEL=s,null!==e.NextInAEL&&(e.NextInAEL.PrevInAEL=e),e.PrevInAEL=l,null!==e.PrevInAEL&&(e.PrevInAEL.NextInAEL=e)}null===t.PrevInAEL?this.m_ActiveEdges=t:null===e.PrevInAEL&&(this.m_ActiveEdges=e)}},s.ClipperBase.prototype.DeleteFromAEL=function(t){var e=t.PrevInAEL,i=t.NextInAEL;null===e&&null===i&&t!==this.m_ActiveEdges||(null!==e?e.NextInAEL=i:this.m_ActiveEdges=i,null!==i&&(i.PrevInAEL=e),t.NextInAEL=null,t.PrevInAEL=null)},s.Clipper=function(t){void 0===t&&(t=0),this.m_PolyOuts=null,this.m_ClipType=s.ClipType.ctIntersection,this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=null,this.m_IntersectNodeComparer=null,this.m_ExecuteLocked=!1,this.m_ClipFillType=s.PolyFillType.pftEvenOdd,this.m_SubjFillType=s.PolyFillType.pftEvenOdd,this.m_Joins=null,this.m_GhostJoins=null,this.m_UsingPolyTree=!1,this.ReverseSolution=!1,this.StrictlySimple=!1,s.ClipperBase.call(this),this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=new Array,this.m_IntersectNodeComparer=s.MyIntersectNodeSort.Compare,this.m_ExecuteLocked=!1,this.m_UsingPolyTree=!1,this.m_PolyOuts=new Array,this.m_Joins=new Array,this.m_GhostJoins=new Array,this.ReverseSolution=0!=(1&t),this.StrictlySimple=0!=(2&t),this.PreserveCollinear=0!=(4&t),s.use_xyz&&(this.ZFillFunction=null)},s.Clipper.ioReverseSolution=1,s.Clipper.ioStrictlySimple=2,s.Clipper.ioPreserveCollinear=4,s.Clipper.prototype.Clear=function(){0!==this.m_edges.length&&(this.DisposeAllPolyPts(),s.ClipperBase.prototype.Clear.call(this))},s.Clipper.prototype.InsertMaxima=function(t){var e=new s.Maxima;if(e.X=t,null===this.m_Maxima)this.m_Maxima=e,this.m_Maxima.Next=null,this.m_Maxima.Prev=null;else if(t<this.m_Maxima.X)e.Next=this.m_Maxima,e.Prev=null,this.m_Maxima=e;else{for(var i=this.m_Maxima;null!==i.Next&&t>=i.Next.X;)i=i.Next;if(t===i.X)return;e.Next=i.Next,e.Prev=i,null!==i.Next&&(i.Next.Prev=e),i.Next=e}},s.Clipper.prototype.Execute=function(){var t=arguments,e=t.length,i=t[1]instanceof s.PolyTree;if(4===e&&!i){var n=t[0],r=t[1],o=t[2],l=t[3];if(this.m_ExecuteLocked)return!1;this.m_HasOpenPaths&&s.Error("Error: PolyTree struct is needed for open path clipping."),this.m_ExecuteLocked=!0,s.Clear(r),this.m_SubjFillType=o,this.m_ClipFillType=l,this.m_ClipType=n,this.m_UsingPolyTree=!1;try{(u=this.ExecuteInternal())&&this.BuildResult(r)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return u}if(4===e&&i){n=t[0];var p=t[1];o=t[2],l=t[3];if(this.m_ExecuteLocked)return!1;this.m_ExecuteLocked=!0,this.m_SubjFillType=o,this.m_ClipFillType=l,this.m_ClipType=n,this.m_UsingPolyTree=!0;try{var u;(u=this.ExecuteInternal())&&this.BuildResult2(p)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return u}if(2===e&&!i){n=t[0],r=t[1];return this.Execute(n,r,s.PolyFillType.pftEvenOdd,s.PolyFillType.pftEvenOdd)}if(2===e&&i){n=t[0],p=t[1];return this.Execute(n,p,s.PolyFillType.pftEvenOdd,s.PolyFillType.pftEvenOdd)}},s.Clipper.prototype.FixHoleLinkage=function(t){if(null!==t.FirstLeft&&(t.IsHole===t.FirstLeft.IsHole||null===t.FirstLeft.Pts)){for(var e=t.FirstLeft;null!==e&&(e.IsHole===t.IsHole||null===e.Pts);)e=e.FirstLeft;t.FirstLeft=e}},s.Clipper.prototype.ExecuteInternal=function(){try{this.Reset(),this.m_SortedEdges=null,this.m_Maxima=null;var t,e,i,n={},r={};if(!this.PopScanbeam(n))return!1;for(this.InsertLocalMinimaIntoAEL(n.v);this.PopScanbeam(r)||this.LocalMinimaPending();){if(this.ProcessHorizontals(),this.m_GhostJoins.length=0,!this.ProcessIntersections(r.v))return!1;this.ProcessEdgesAtTopOfScanbeam(r.v),n.v=r.v,this.InsertLocalMinimaIntoAEL(n.v)}for(e=0,i=this.m_PolyOuts.length;e<i;e++)null===(t=this.m_PolyOuts[e]).Pts||t.IsOpen||(t.IsHole^this.ReverseSolution)==this.Area$1(t)>0&&this.ReversePolyPtLinks(t.Pts);for(this.JoinCommonEdges(),e=0,i=this.m_PolyOuts.length;e<i;e++)null!==(t=this.m_PolyOuts[e]).Pts&&(t.IsOpen?this.FixupOutPolyline(t):this.FixupOutPolygon(t));return this.StrictlySimple&&this.DoSimplePolygons(),!0}finally{this.m_Joins.length=0,this.m_GhostJoins.length=0}},s.Clipper.prototype.DisposeAllPolyPts=function(){for(var t=0,e=this.m_PolyOuts.length;t<e;++t)this.DisposeOutRec(t);s.Clear(this.m_PolyOuts)},s.Clipper.prototype.AddJoin=function(t,e,i){var n=new s.Join;n.OutPt1=t,n.OutPt2=e,n.OffPt.X=i.X,n.OffPt.Y=i.Y,s.use_xyz&&(n.OffPt.Z=i.Z),this.m_Joins.push(n)},s.Clipper.prototype.AddGhostJoin=function(t,e){var i=new s.Join;i.OutPt1=t,i.OffPt.X=e.X,i.OffPt.Y=e.Y,s.use_xyz&&(i.OffPt.Z=e.Z),this.m_GhostJoins.push(i)},s.Clipper.prototype.SetZ=function(t,e,i){if(null!==this.ZFillFunction){if(0!==t.Z||null===this.ZFillFunction)return;s.IntPoint.op_Equality(t,e.Bot)?t.Z=e.Bot.Z:s.IntPoint.op_Equality(t,e.Top)?t.Z=e.Top.Z:s.IntPoint.op_Equality(t,i.Bot)?t.Z=i.Bot.Z:s.IntPoint.op_Equality(t,i.Top)?t.Z=i.Top.Z:this.ZFillFunction(e.Bot,e.Top,i.Bot,i.Top,t)}},s.Clipper.prototype.InsertLocalMinimaIntoAEL=function(t){for(var e,i,n={};this.PopLocalMinima(t,n);){e=n.v.LeftBound,i=n.v.RightBound;var r=null;if(null===e?(this.InsertEdgeIntoAEL(i,null),this.SetWindingCount(i),this.IsContributing(i)&&(r=this.AddOutPt(i,i.Bot))):null===i?(this.InsertEdgeIntoAEL(e,null),this.SetWindingCount(e),this.IsContributing(e)&&(r=this.AddOutPt(e,e.Bot)),this.InsertScanbeam(e.Top.Y)):(this.InsertEdgeIntoAEL(e,null),this.InsertEdgeIntoAEL(i,e),this.SetWindingCount(e),i.WindCnt=e.WindCnt,i.WindCnt2=e.WindCnt2,this.IsContributing(e)&&(r=this.AddLocalMinPoly(e,i,e.Bot)),this.InsertScanbeam(e.Top.Y)),null!==i&&(s.ClipperBase.IsHorizontal(i)?(null!==i.NextInLML&&this.InsertScanbeam(i.NextInLML.Top.Y),this.AddEdgeToSEL(i)):this.InsertScanbeam(i.Top.Y)),null!==e&&null!==i){if(null!==r&&s.ClipperBase.IsHorizontal(i)&&this.m_GhostJoins.length>0&&0!==i.WindDelta)for(var o=0,l=this.m_GhostJoins.length;o<l;o++){var p=this.m_GhostJoins[o];this.HorzSegmentsOverlap(p.OutPt1.Pt.X,p.OffPt.X,i.Bot.X,i.Top.X)&&this.AddJoin(p.OutPt1,r,p.OffPt)}if(e.OutIdx>=0&&null!==e.PrevInAEL&&e.PrevInAEL.Curr.X===e.Bot.X&&e.PrevInAEL.OutIdx>=0&&s.ClipperBase.SlopesEqual5(e.PrevInAEL.Curr,e.PrevInAEL.Top,e.Curr,e.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==e.PrevInAEL.WindDelta){var u=this.AddOutPt(e.PrevInAEL,e.Bot);this.AddJoin(r,u,e.Top)}if(e.NextInAEL!==i){if(i.OutIdx>=0&&i.PrevInAEL.OutIdx>=0&&s.ClipperBase.SlopesEqual5(i.PrevInAEL.Curr,i.PrevInAEL.Top,i.Curr,i.Top,this.m_UseFullRange)&&0!==i.WindDelta&&0!==i.PrevInAEL.WindDelta){u=this.AddOutPt(i.PrevInAEL,i.Bot);this.AddJoin(r,u,i.Top)}var h=e.NextInAEL;if(null!==h)for(;h!==i;)this.IntersectEdges(i,h,e.Curr),h=h.NextInAEL}}}},s.Clipper.prototype.InsertEdgeIntoAEL=function(t,e){if(null===this.m_ActiveEdges)t.PrevInAEL=null,t.NextInAEL=null,this.m_ActiveEdges=t;else if(null===e&&this.E2InsertsBeforeE1(this.m_ActiveEdges,t))t.PrevInAEL=null,t.NextInAEL=this.m_ActiveEdges,this.m_ActiveEdges.PrevInAEL=t,this.m_ActiveEdges=t;else{for(null===e&&(e=this.m_ActiveEdges);null!==e.NextInAEL&&!this.E2InsertsBeforeE1(e.NextInAEL,t);)e=e.NextInAEL;t.NextInAEL=e.NextInAEL,null!==e.NextInAEL&&(e.NextInAEL.PrevInAEL=t),t.PrevInAEL=e,e.NextInAEL=t}},s.Clipper.prototype.E2InsertsBeforeE1=function(t,e){return e.Curr.X===t.Curr.X?e.Top.Y>t.Top.Y?e.Top.X<s.Clipper.TopX(t,e.Top.Y):t.Top.X>s.Clipper.TopX(e,t.Top.Y):e.Curr.X<t.Curr.X},s.Clipper.prototype.IsEvenOddFillType=function(t){return t.PolyTyp===s.PolyType.ptSubject?this.m_SubjFillType===s.PolyFillType.pftEvenOdd:this.m_ClipFillType===s.PolyFillType.pftEvenOdd},s.Clipper.prototype.IsEvenOddAltFillType=function(t){return t.PolyTyp===s.PolyType.ptSubject?this.m_ClipFillType===s.PolyFillType.pftEvenOdd:this.m_SubjFillType===s.PolyFillType.pftEvenOdd},s.Clipper.prototype.IsContributing=function(t){var e,i;switch(t.PolyTyp===s.PolyType.ptSubject?(e=this.m_SubjFillType,i=this.m_ClipFillType):(e=this.m_ClipFillType,i=this.m_SubjFillType),e){case s.PolyFillType.pftEvenOdd:if(0===t.WindDelta&&1!==t.WindCnt)return!1;break;case s.PolyFillType.pftNonZero:if(1!==Math.abs(t.WindCnt))return!1;break;case s.PolyFillType.pftPositive:if(1!==t.WindCnt)return!1;break;default:if(-1!==t.WindCnt)return!1}switch(this.m_ClipType){case s.ClipType.ctIntersection:switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case s.ClipType.ctUnion:switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0===t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}case s.ClipType.ctDifference:if(t.PolyTyp===s.PolyType.ptSubject)switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0===t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}else switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case s.ClipType.ctXor:if(0!==t.WindDelta)return!0;switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0===t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}}return!0},s.Clipper.prototype.SetWindingCount=function(t){for(var e=t.PrevInAEL;null!==e&&(e.PolyTyp!==t.PolyTyp||0===e.WindDelta);)e=e.PrevInAEL;if(null===e){var i=t.PolyTyp===s.PolyType.ptSubject?this.m_SubjFillType:this.m_ClipFillType;0===t.WindDelta?t.WindCnt=i===s.PolyFillType.pftNegative?-1:1:t.WindCnt=t.WindDelta,t.WindCnt2=0,e=this.m_ActiveEdges}else if(0===t.WindDelta&&this.m_ClipType!==s.ClipType.ctUnion)t.WindCnt=1,t.WindCnt2=e.WindCnt2,e=e.NextInAEL;else if(this.IsEvenOddFillType(t)){if(0===t.WindDelta){for(var n=!0,r=e.PrevInAEL;null!==r;)r.PolyTyp===e.PolyTyp&&0!==r.WindDelta&&(n=!n),r=r.PrevInAEL;t.WindCnt=n?0:1}else t.WindCnt=t.WindDelta;t.WindCnt2=e.WindCnt2,e=e.NextInAEL}else e.WindCnt*e.WindDelta<0?Math.abs(e.WindCnt)>1?e.WindDelta*t.WindDelta<0?t.WindCnt=e.WindCnt:t.WindCnt=e.WindCnt+t.WindDelta:t.WindCnt=0===t.WindDelta?1:t.WindDelta:0===t.WindDelta?t.WindCnt=e.WindCnt<0?e.WindCnt-1:e.WindCnt+1:e.WindDelta*t.WindDelta<0?t.WindCnt=e.WindCnt:t.WindCnt=e.WindCnt+t.WindDelta,t.WindCnt2=e.WindCnt2,e=e.NextInAEL;if(this.IsEvenOddAltFillType(t))for(;e!==t;)0!==e.WindDelta&&(t.WindCnt2=0===t.WindCnt2?1:0),e=e.NextInAEL;else for(;e!==t;)t.WindCnt2+=e.WindDelta,e=e.NextInAEL},s.Clipper.prototype.AddEdgeToSEL=function(t){null===this.m_SortedEdges?(this.m_SortedEdges=t,t.PrevInSEL=null,t.NextInSEL=null):(t.NextInSEL=this.m_SortedEdges,t.PrevInSEL=null,this.m_SortedEdges.PrevInSEL=t,this.m_SortedEdges=t)},s.Clipper.prototype.PopEdgeFromSEL=function(t){if(t.v=this.m_SortedEdges,null===t.v)return!1;var e=t.v;return this.m_SortedEdges=t.v.NextInSEL,null!==this.m_SortedEdges&&(this.m_SortedEdges.PrevInSEL=null),e.NextInSEL=null,e.PrevInSEL=null,!0},s.Clipper.prototype.CopyAELToSEL=function(){var t=this.m_ActiveEdges;for(this.m_SortedEdges=t;null!==t;)t.PrevInSEL=t.PrevInAEL,t.NextInSEL=t.NextInAEL,t=t.NextInAEL},s.Clipper.prototype.SwapPositionsInSEL=function(t,e){if(!(null===t.NextInSEL&&null===t.PrevInSEL||null===e.NextInSEL&&null===e.PrevInSEL)){if(t.NextInSEL===e)null!==(i=e.NextInSEL)&&(i.PrevInSEL=t),null!==(n=t.PrevInSEL)&&(n.NextInSEL=e),e.PrevInSEL=n,e.NextInSEL=t,t.PrevInSEL=e,t.NextInSEL=i;else if(e.NextInSEL===t){null!==(i=t.NextInSEL)&&(i.PrevInSEL=e),null!==(n=e.PrevInSEL)&&(n.NextInSEL=t),t.PrevInSEL=n,t.NextInSEL=e,e.PrevInSEL=t,e.NextInSEL=i}else{var i=t.NextInSEL,n=t.PrevInSEL;t.NextInSEL=e.NextInSEL,null!==t.NextInSEL&&(t.NextInSEL.PrevInSEL=t),t.PrevInSEL=e.PrevInSEL,null!==t.PrevInSEL&&(t.PrevInSEL.NextInSEL=t),e.NextInSEL=i,null!==e.NextInSEL&&(e.NextInSEL.PrevInSEL=e),e.PrevInSEL=n,null!==e.PrevInSEL&&(e.PrevInSEL.NextInSEL=e)}null===t.PrevInSEL?this.m_SortedEdges=t:null===e.PrevInSEL&&(this.m_SortedEdges=e)}},s.Clipper.prototype.AddLocalMaxPoly=function(t,e,i){this.AddOutPt(t,i),0===e.WindDelta&&this.AddOutPt(e,i),t.OutIdx===e.OutIdx?(t.OutIdx=-1,e.OutIdx=-1):t.OutIdx<e.OutIdx?this.AppendPolygon(t,e):this.AppendPolygon(e,t)},s.Clipper.prototype.AddLocalMinPoly=function(t,e,i){var n,r,o;if(s.ClipperBase.IsHorizontal(e)||t.Dx>e.Dx?(n=this.AddOutPt(t,i),e.OutIdx=t.OutIdx,t.Side=s.EdgeSide.esLeft,e.Side=s.EdgeSide.esRight,o=(r=t).PrevInAEL===e?e.PrevInAEL:r.PrevInAEL):(n=this.AddOutPt(e,i),t.OutIdx=e.OutIdx,t.Side=s.EdgeSide.esRight,e.Side=s.EdgeSide.esLeft,o=(r=e).PrevInAEL===t?t.PrevInAEL:r.PrevInAEL),null!==o&&o.OutIdx>=0&&o.Top.Y<i.Y&&r.Top.Y<i.Y){var l=s.Clipper.TopX(o,i.Y),p=s.Clipper.TopX(r,i.Y);if(l===p&&0!==r.WindDelta&&0!==o.WindDelta&&s.ClipperBase.SlopesEqual5(new s.IntPoint2(l,i.Y),o.Top,new s.IntPoint2(p,i.Y),r.Top,this.m_UseFullRange)){var u=this.AddOutPt(o,i);this.AddJoin(n,u,r.Top)}}return n},s.Clipper.prototype.AddOutPt=function(t,e){if(t.OutIdx<0){(n=this.CreateOutRec()).IsOpen=0===t.WindDelta;var i=new s.OutPt;return n.Pts=i,i.Idx=n.Idx,i.Pt.X=e.X,i.Pt.Y=e.Y,s.use_xyz&&(i.Pt.Z=e.Z),i.Next=i,i.Prev=i,n.IsOpen||this.SetHoleState(t,n),t.OutIdx=n.Idx,i}var n,r=(n=this.m_PolyOuts[t.OutIdx]).Pts,o=t.Side===s.EdgeSide.esLeft;return o&&s.IntPoint.op_Equality(e,r.Pt)?r:!o&&s.IntPoint.op_Equality(e,r.Prev.Pt)?r.Prev:((i=new s.OutPt).Idx=n.Idx,i.Pt.X=e.X,i.Pt.Y=e.Y,s.use_xyz&&(i.Pt.Z=e.Z),i.Next=r,i.Prev=r.Prev,i.Prev.Next=i,r.Prev=i,o&&(n.Pts=i),i)},s.Clipper.prototype.GetLastOutPt=function(t){var e=this.m_PolyOuts[t.OutIdx];return t.Side===s.EdgeSide.esLeft?e.Pts:e.Pts.Prev},s.Clipper.prototype.SwapPoints=function(t,e){var i=new s.IntPoint1(t.Value);t.Value.X=e.Value.X,t.Value.Y=e.Value.Y,s.use_xyz&&(t.Value.Z=e.Value.Z),e.Value.X=i.X,e.Value.Y=i.Y,s.use_xyz&&(e.Value.Z=i.Z)},s.Clipper.prototype.HorzSegmentsOverlap=function(t,e,i,n){var r;return t>e&&(r=t,t=e,e=r),i>n&&(r=i,i=n,n=r),t<n&&i<e},s.Clipper.prototype.SetHoleState=function(t,e){for(var i=t.PrevInAEL,n=null;null!==i;)i.OutIdx>=0&&0!==i.WindDelta&&(null===n?n=i:n.OutIdx===i.OutIdx&&(n=null)),i=i.PrevInAEL;null===n?(e.FirstLeft=null,e.IsHole=!1):(e.FirstLeft=this.m_PolyOuts[n.OutIdx],e.IsHole=!e.FirstLeft.IsHole)},s.Clipper.prototype.GetDx=function(t,e){return t.Y===e.Y?s.ClipperBase.horizontal:(e.X-t.X)/(e.Y-t.Y)},s.Clipper.prototype.FirstIsBottomPt=function(t,e){for(var i=t.Prev;s.IntPoint.op_Equality(i.Pt,t.Pt)&&i!==t;)i=i.Prev;var n=Math.abs(this.GetDx(t.Pt,i.Pt));for(i=t.Next;s.IntPoint.op_Equality(i.Pt,t.Pt)&&i!==t;)i=i.Next;var r=Math.abs(this.GetDx(t.Pt,i.Pt));for(i=e.Prev;s.IntPoint.op_Equality(i.Pt,e.Pt)&&i!==e;)i=i.Prev;var o=Math.abs(this.GetDx(e.Pt,i.Pt));for(i=e.Next;s.IntPoint.op_Equality(i.Pt,e.Pt)&&i!==e;)i=i.Next;var l=Math.abs(this.GetDx(e.Pt,i.Pt));return Math.max(n,r)===Math.max(o,l)&&Math.min(n,r)===Math.min(o,l)?this.Area(t)>0:n>=o&&n>=l||r>=o&&r>=l},s.Clipper.prototype.GetBottomPt=function(t){for(var e=null,i=t.Next;i!==t;)i.Pt.Y>t.Pt.Y?(t=i,e=null):i.Pt.Y===t.Pt.Y&&i.Pt.X<=t.Pt.X&&(i.Pt.X<t.Pt.X?(e=null,t=i):i.Next!==t&&i.Prev!==t&&(e=i)),i=i.Next;if(null!==e)for(;e!==i;)for(this.FirstIsBottomPt(i,e)||(t=e),e=e.Next;s.IntPoint.op_Inequality(e.Pt,t.Pt);)e=e.Next;return t},s.Clipper.prototype.GetLowermostRec=function(t,e){null===t.BottomPt&&(t.BottomPt=this.GetBottomPt(t.Pts)),null===e.BottomPt&&(e.BottomPt=this.GetBottomPt(e.Pts));var i=t.BottomPt,n=e.BottomPt;return i.Pt.Y>n.Pt.Y?t:i.Pt.Y<n.Pt.Y?e:i.Pt.X<n.Pt.X?t:i.Pt.X>n.Pt.X?e:i.Next===i?e:n.Next===n?t:this.FirstIsBottomPt(i,n)?t:e},s.Clipper.prototype.OutRec1RightOfOutRec2=function(t,e){do{if((t=t.FirstLeft)===e)return!0}while(null!==t);return!1},s.Clipper.prototype.GetOutRec=function(t){for(var e=this.m_PolyOuts[t];e!==this.m_PolyOuts[e.Idx];)e=this.m_PolyOuts[e.Idx];return e},s.Clipper.prototype.AppendPolygon=function(t,e){var i,n=this.m_PolyOuts[t.OutIdx],r=this.m_PolyOuts[e.OutIdx];i=this.OutRec1RightOfOutRec2(n,r)?r:this.OutRec1RightOfOutRec2(r,n)?n:this.GetLowermostRec(n,r);var o=n.Pts,l=o.Prev,p=r.Pts,u=p.Prev;t.Side===s.EdgeSide.esLeft?e.Side===s.EdgeSide.esLeft?(this.ReversePolyPtLinks(p),p.Next=o,o.Prev=p,l.Next=u,u.Prev=l,n.Pts=u):(u.Next=o,o.Prev=u,p.Prev=l,l.Next=p,n.Pts=p):e.Side===s.EdgeSide.esRight?(this.ReversePolyPtLinks(p),l.Next=u,u.Prev=l,p.Next=o,o.Prev=p):(l.Next=p,p.Prev=l,o.Prev=u,u.Next=o),n.BottomPt=null,i===r&&(r.FirstLeft!==n&&(n.FirstLeft=r.FirstLeft),n.IsHole=r.IsHole),r.Pts=null,r.BottomPt=null,r.FirstLeft=n;var h=t.OutIdx,a=e.OutIdx;t.OutIdx=-1,e.OutIdx=-1;for(var f=this.m_ActiveEdges;null!==f;){if(f.OutIdx===a){f.OutIdx=h,f.Side=t.Side;break}f=f.NextInAEL}r.Idx=n.Idx},s.Clipper.prototype.ReversePolyPtLinks=function(t){if(null!==t){var e,i;e=t;do{i=e.Next,e.Next=e.Prev,e.Prev=i,e=i}while(e!==t)}},s.Clipper.SwapSides=function(t,e){var i=t.Side;t.Side=e.Side,e.Side=i},s.Clipper.SwapPolyIndexes=function(t,e){var i=t.OutIdx;t.OutIdx=e.OutIdx,e.OutIdx=i},s.Clipper.prototype.IntersectEdges=function(t,e,i){var n=t.OutIdx>=0,r=e.OutIdx>=0;if(s.use_xyz&&this.SetZ(i,t,e),!s.use_lines||0!==t.WindDelta&&0!==e.WindDelta){if(t.PolyTyp===e.PolyTyp)if(this.IsEvenOddFillType(t)){var o=t.WindCnt;t.WindCnt=e.WindCnt,e.WindCnt=o}else t.WindCnt+e.WindDelta===0?t.WindCnt=-t.WindCnt:t.WindCnt+=e.WindDelta,e.WindCnt-t.WindDelta==0?e.WindCnt=-e.WindCnt:e.WindCnt-=t.WindDelta;else this.IsEvenOddFillType(e)?t.WindCnt2=0===t.WindCnt2?1:0:t.WindCnt2+=e.WindDelta,this.IsEvenOddFillType(t)?e.WindCnt2=0===e.WindCnt2?1:0:e.WindCnt2-=t.WindDelta;var l,p,u,h,a,f;switch(t.PolyTyp===s.PolyType.ptSubject?(l=this.m_SubjFillType,u=this.m_ClipFillType):(l=this.m_ClipFillType,u=this.m_SubjFillType),e.PolyTyp===s.PolyType.ptSubject?(p=this.m_SubjFillType,h=this.m_ClipFillType):(p=this.m_ClipFillType,h=this.m_SubjFillType),l){case s.PolyFillType.pftPositive:a=t.WindCnt;break;case s.PolyFillType.pftNegative:a=-t.WindCnt;break;default:a=Math.abs(t.WindCnt)}switch(p){case s.PolyFillType.pftPositive:f=e.WindCnt;break;case s.PolyFillType.pftNegative:f=-e.WindCnt;break;default:f=Math.abs(e.WindCnt)}if(n&&r)0!==a&&1!==a||0!==f&&1!==f||t.PolyTyp!==e.PolyTyp&&this.m_ClipType!==s.ClipType.ctXor?this.AddLocalMaxPoly(t,e,i):(this.AddOutPt(t,i),this.AddOutPt(e,i),s.Clipper.SwapSides(t,e),s.Clipper.SwapPolyIndexes(t,e));else if(n)0!==f&&1!==f||(this.AddOutPt(t,i),s.Clipper.SwapSides(t,e),s.Clipper.SwapPolyIndexes(t,e));else if(r)0!==a&&1!==a||(this.AddOutPt(e,i),s.Clipper.SwapSides(t,e),s.Clipper.SwapPolyIndexes(t,e));else if(!(0!==a&&1!==a||0!==f&&1!==f)){var d,P;switch(u){case s.PolyFillType.pftPositive:d=t.WindCnt2;break;case s.PolyFillType.pftNegative:d=-t.WindCnt2;break;default:d=Math.abs(t.WindCnt2)}switch(h){case s.PolyFillType.pftPositive:P=e.WindCnt2;break;case s.PolyFillType.pftNegative:P=-e.WindCnt2;break;default:P=Math.abs(e.WindCnt2)}if(t.PolyTyp!==e.PolyTyp)this.AddLocalMinPoly(t,e,i);else if(1===a&&1===f)switch(this.m_ClipType){case s.ClipType.ctIntersection:d>0&&P>0&&this.AddLocalMinPoly(t,e,i);break;case s.ClipType.ctUnion:d<=0&&P<=0&&this.AddLocalMinPoly(t,e,i);break;case s.ClipType.ctDifference:(t.PolyTyp===s.PolyType.ptClip&&d>0&&P>0||t.PolyTyp===s.PolyType.ptSubject&&d<=0&&P<=0)&&this.AddLocalMinPoly(t,e,i);break;case s.ClipType.ctXor:this.AddLocalMinPoly(t,e,i)}else s.Clipper.SwapSides(t,e)}}else{if(0===t.WindDelta&&0===e.WindDelta)return;t.PolyTyp===e.PolyTyp&&t.WindDelta!==e.WindDelta&&this.m_ClipType===s.ClipType.ctUnion?0===t.WindDelta?r&&(this.AddOutPt(t,i),n&&(t.OutIdx=-1)):n&&(this.AddOutPt(e,i),r&&(e.OutIdx=-1)):t.PolyTyp!==e.PolyTyp&&(0!==t.WindDelta||1!==Math.abs(e.WindCnt)||this.m_ClipType===s.ClipType.ctUnion&&0!==e.WindCnt2?0!==e.WindDelta||1!==Math.abs(t.WindCnt)||this.m_ClipType===s.ClipType.ctUnion&&0!==t.WindCnt2||(this.AddOutPt(e,i),r&&(e.OutIdx=-1)):(this.AddOutPt(t,i),n&&(t.OutIdx=-1)))}},s.Clipper.prototype.DeleteFromSEL=function(t){var e=t.PrevInSEL,i=t.NextInSEL;null===e&&null===i&&t!==this.m_SortedEdges||(null!==e?e.NextInSEL=i:this.m_SortedEdges=i,null!==i&&(i.PrevInSEL=e),t.NextInSEL=null,t.PrevInSEL=null)},s.Clipper.prototype.ProcessHorizontals=function(){for(var t={};this.PopEdgeFromSEL(t);)this.ProcessHorizontal(t.v)},s.Clipper.prototype.GetHorzDirection=function(t,e){t.Bot.X<t.Top.X?(e.Left=t.Bot.X,e.Right=t.Top.X,e.Dir=s.Direction.dLeftToRight):(e.Left=t.Top.X,e.Right=t.Bot.X,e.Dir=s.Direction.dRightToLeft)},s.Clipper.prototype.ProcessHorizontal=function(t){var e={Dir:null,Left:null,Right:null};this.GetHorzDirection(t,e);for(var i=e.Dir,n=e.Left,r=e.Right,o=0===t.WindDelta,l=t,p=null;null!==l.NextInLML&&s.ClipperBase.IsHorizontal(l.NextInLML);)l=l.NextInLML;null===l.NextInLML&&(p=this.GetMaximaPair(l));var u=this.m_Maxima;if(null!==u)if(i===s.Direction.dLeftToRight){for(;null!==u&&u.X<=t.Bot.X;)u=u.Next;null!==u&&u.X>=l.Top.X&&(u=null)}else{for(;null!==u.Next&&u.Next.X<t.Bot.X;)u=u.Next;u.X<=l.Top.X&&(u=null)}for(var h=null;;){for(var a=t===l,f=this.GetNextInAEL(t,i);null!==f;){if(null!==u)if(i===s.Direction.dLeftToRight)for(;null!==u&&u.X<f.Curr.X;)t.OutIdx>=0&&!o&&this.AddOutPt(t,new s.IntPoint2(u.X,t.Bot.Y)),u=u.Next;else for(;null!==u&&u.X>f.Curr.X;)t.OutIdx>=0&&!o&&this.AddOutPt(t,new s.IntPoint2(u.X,t.Bot.Y)),u=u.Prev;if(i===s.Direction.dLeftToRight&&f.Curr.X>r||i===s.Direction.dRightToLeft&&f.Curr.X<n)break;if(f.Curr.X===t.Top.X&&null!==t.NextInLML&&f.Dx<t.NextInLML.Dx)break;if(t.OutIdx>=0&&!o){s.use_xyz&&(i===s.Direction.dLeftToRight?this.SetZ(f.Curr,t,f):this.SetZ(f.Curr,f,t)),h=this.AddOutPt(t,f.Curr);for(var d=this.m_SortedEdges;null!==d;){if(d.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,d.Bot.X,d.Top.X)){var P=this.GetLastOutPt(d);this.AddJoin(P,h,d.Top)}d=d.NextInSEL}this.AddGhostJoin(h,t.Bot)}if(f===p&&a)return t.OutIdx>=0&&this.AddLocalMaxPoly(t,p,t.Top),this.DeleteFromAEL(t),void this.DeleteFromAEL(p);if(i===s.Direction.dLeftToRight){var y=new s.IntPoint2(f.Curr.X,t.Curr.Y);this.IntersectEdges(t,f,y)}else{y=new s.IntPoint2(f.Curr.X,t.Curr.Y);this.IntersectEdges(f,t,y)}var m=this.GetNextInAEL(f,i);this.SwapPositionsInAEL(t,f),f=m}if(null===t.NextInLML||!s.ClipperBase.IsHorizontal(t.NextInLML))break;(t=this.UpdateEdgeIntoAEL(t)).OutIdx>=0&&this.AddOutPt(t,t.Bot),e={Dir:i,Left:n,Right:r},this.GetHorzDirection(t,e),i=e.Dir,n=e.Left,r=e.Right}if(t.OutIdx>=0&&null===h){h=this.GetLastOutPt(t);for(d=this.m_SortedEdges;null!==d;){if(d.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,d.Bot.X,d.Top.X)){P=this.GetLastOutPt(d);this.AddJoin(P,h,d.Top)}d=d.NextInSEL}this.AddGhostJoin(h,t.Top)}if(null!==t.NextInLML)if(t.OutIdx>=0){if(h=this.AddOutPt(t,t.Top),0===(t=this.UpdateEdgeIntoAEL(t)).WindDelta)return;var c=t.PrevInAEL;m=t.NextInAEL;if(null!==c&&c.Curr.X===t.Bot.X&&c.Curr.Y===t.Bot.Y&&0===c.WindDelta&&c.OutIdx>=0&&c.Curr.Y>c.Top.Y&&s.ClipperBase.SlopesEqual3(t,c,this.m_UseFullRange)){P=this.AddOutPt(c,t.Bot);this.AddJoin(h,P,t.Top)}else if(null!==m&&m.Curr.X===t.Bot.X&&m.Curr.Y===t.Bot.Y&&0!==m.WindDelta&&m.OutIdx>=0&&m.Curr.Y>m.Top.Y&&s.ClipperBase.SlopesEqual3(t,m,this.m_UseFullRange)){P=this.AddOutPt(m,t.Bot);this.AddJoin(h,P,t.Top)}}else t=this.UpdateEdgeIntoAEL(t);else t.OutIdx>=0&&this.AddOutPt(t,t.Top),this.DeleteFromAEL(t)},s.Clipper.prototype.GetNextInAEL=function(t,e){return e===s.Direction.dLeftToRight?t.NextInAEL:t.PrevInAEL},s.Clipper.prototype.IsMinima=function(t){return null!==t&&t.Prev.NextInLML!==t&&t.Next.NextInLML!==t},s.Clipper.prototype.IsMaxima=function(t,e){return null!==t&&t.Top.Y===e&&null===t.NextInLML},s.Clipper.prototype.IsIntermediate=function(t,e){return t.Top.Y===e&&null!==t.NextInLML},s.Clipper.prototype.GetMaximaPair=function(t){return s.IntPoint.op_Equality(t.Next.Top,t.Top)&&null===t.Next.NextInLML?t.Next:s.IntPoint.op_Equality(t.Prev.Top,t.Top)&&null===t.Prev.NextInLML?t.Prev:null},s.Clipper.prototype.GetMaximaPairEx=function(t){var e=this.GetMaximaPair(t);return null===e||e.OutIdx===s.ClipperBase.Skip||e.NextInAEL===e.PrevInAEL&&!s.ClipperBase.IsHorizontal(e)?null:e},s.Clipper.prototype.ProcessIntersections=function(t){if(null===this.m_ActiveEdges)return!0;try{if(this.BuildIntersectList(t),0===this.m_IntersectList.length)return!0;if(1!==this.m_IntersectList.length&&!this.FixupIntersectionOrder())return!1;this.ProcessIntersectList()}catch(t){this.m_SortedEdges=null,this.m_IntersectList.length=0,s.Error("ProcessIntersections error")}return this.m_SortedEdges=null,!0},s.Clipper.prototype.BuildIntersectList=function(t){if(null!==this.m_ActiveEdges){var e=this.m_ActiveEdges;for(this.m_SortedEdges=e;null!==e;)e.PrevInSEL=e.PrevInAEL,e.NextInSEL=e.NextInAEL,e.Curr.X=s.Clipper.TopX(e,t),e=e.NextInAEL;for(var i=!0;i&&null!==this.m_SortedEdges;){for(i=!1,e=this.m_SortedEdges;null!==e.NextInSEL;){var n=e.NextInSEL,r=new s.IntPoint0;if(e.Curr.X>n.Curr.X){this.IntersectPoint(e,n,r),r.Y<t&&(r=new s.IntPoint2(s.Clipper.TopX(e,t),t));var o=new s.IntersectNode;o.Edge1=e,o.Edge2=n,o.Pt.X=r.X,o.Pt.Y=r.Y,s.use_xyz&&(o.Pt.Z=r.Z),this.m_IntersectList.push(o),this.SwapPositionsInSEL(e,n),i=!0}else e=n}if(null===e.PrevInSEL)break;e.PrevInSEL.NextInSEL=null}this.m_SortedEdges=null}},s.Clipper.prototype.EdgesAdjacent=function(t){return t.Edge1.NextInSEL===t.Edge2||t.Edge1.PrevInSEL===t.Edge2},s.Clipper.IntersectNodeSort=function(t,e){return e.Pt.Y-t.Pt.Y},s.Clipper.prototype.FixupIntersectionOrder=function(){this.m_IntersectList.sort(this.m_IntersectNodeComparer),this.CopyAELToSEL();for(var t=this.m_IntersectList.length,e=0;e<t;e++){if(!this.EdgesAdjacent(this.m_IntersectList[e])){for(var i=e+1;i<t&&!this.EdgesAdjacent(this.m_IntersectList[i]);)i++;if(i===t)return!1;var n=this.m_IntersectList[e];this.m_IntersectList[e]=this.m_IntersectList[i],this.m_IntersectList[i]=n}this.SwapPositionsInSEL(this.m_IntersectList[e].Edge1,this.m_IntersectList[e].Edge2)}return!0},s.Clipper.prototype.ProcessIntersectList=function(){for(var t=0,e=this.m_IntersectList.length;t<e;t++){var i=this.m_IntersectList[t];this.IntersectEdges(i.Edge1,i.Edge2,i.Pt),this.SwapPositionsInAEL(i.Edge1,i.Edge2)}this.m_IntersectList.length=0};h.msie?s.Clipper.Round=function(t){return t<0?Math.ceil(t-.5):Math.round(t)}:h.chromium?s.Clipper.Round=function(t){return t<0?-Math.round(Math.abs(t)):Math.round(t)}:h.safari?s.Clipper.Round=function(t){return t<0?(t-=.5)<-2147483648?Math.ceil(t):0|t:(t+=.5)>2147483647?Math.floor(t):0|t}:s.Clipper.Round=function(t){return t<0?Math.ceil(t-.5):Math.floor(t+.5)},s.Clipper.TopX=function(t,e){return e===t.Top.Y?t.Top.X:t.Bot.X+s.Clipper.Round(t.Dx*(e-t.Bot.Y))},s.Clipper.prototype.IntersectPoint=function(t,e,i){var n,r;if(i.X=0,i.Y=0,t.Dx===e.Dx)return i.Y=t.Curr.Y,void(i.X=s.Clipper.TopX(t,i.Y));if(0===t.Delta.X)i.X=t.Bot.X,s.ClipperBase.IsHorizontal(e)?i.Y=e.Bot.Y:(r=e.Bot.Y-e.Bot.X/e.Dx,i.Y=s.Clipper.Round(i.X/e.Dx+r));else if(0===e.Delta.X)i.X=e.Bot.X,s.ClipperBase.IsHorizontal(t)?i.Y=t.Bot.Y:(n=t.Bot.Y-t.Bot.X/t.Dx,i.Y=s.Clipper.Round(i.X/t.Dx+n));else{n=t.Bot.X-t.Bot.Y*t.Dx;var o=((r=e.Bot.X-e.Bot.Y*e.Dx)-n)/(t.Dx-e.Dx);i.Y=s.Clipper.Round(o),Math.abs(t.Dx)<Math.abs(e.Dx)?i.X=s.Clipper.Round(t.Dx*o+n):i.X=s.Clipper.Round(e.Dx*o+r)}if(i.Y<t.Top.Y||i.Y<e.Top.Y){if(t.Top.Y>e.Top.Y)return i.Y=t.Top.Y,i.X=s.Clipper.TopX(e,t.Top.Y),i.X<t.Top.X;i.Y=e.Top.Y,Math.abs(t.Dx)<Math.abs(e.Dx)?i.X=s.Clipper.TopX(t,i.Y):i.X=s.Clipper.TopX(e,i.Y)}i.Y>t.Curr.Y&&(i.Y=t.Curr.Y,Math.abs(t.Dx)>Math.abs(e.Dx)?i.X=s.Clipper.TopX(e,i.Y):i.X=s.Clipper.TopX(t,i.Y))},s.Clipper.prototype.ProcessEdgesAtTopOfScanbeam=function(t){for(var e=this.m_ActiveEdges;null!==e;){var i=this.IsMaxima(e,t);if(i){var n=this.GetMaximaPairEx(e);i=null===n||!s.ClipperBase.IsHorizontal(n)}if(i){this.StrictlySimple&&this.InsertMaxima(e.Top.X);var r=e.PrevInAEL;this.DoMaxima(e),e=null===r?this.m_ActiveEdges:r.NextInAEL}else{if(this.IsIntermediate(e,t)&&s.ClipperBase.IsHorizontal(e.NextInLML)?((e=this.UpdateEdgeIntoAEL(e)).OutIdx>=0&&this.AddOutPt(e,e.Bot),this.AddEdgeToSEL(e)):(e.Curr.X=s.Clipper.TopX(e,t),e.Curr.Y=t),s.use_xyz&&(e.Top.Y===t?e.Curr.Z=e.Top.Z:e.Bot.Y===t?e.Curr.Z=e.Bot.Z:e.Curr.Z=0),this.StrictlySimple){r=e.PrevInAEL;if(e.OutIdx>=0&&0!==e.WindDelta&&null!==r&&r.OutIdx>=0&&r.Curr.X===e.Curr.X&&0!==r.WindDelta){var o=new s.IntPoint1(e.Curr);s.use_xyz&&this.SetZ(o,r,e);var l=this.AddOutPt(r,o),p=this.AddOutPt(e,o);this.AddJoin(l,p,o)}}e=e.NextInAEL}}for(this.ProcessHorizontals(),this.m_Maxima=null,e=this.m_ActiveEdges;null!==e;){if(this.IsIntermediate(e,t)){l=null;e.OutIdx>=0&&(l=this.AddOutPt(e,e.Top));r=(e=this.UpdateEdgeIntoAEL(e)).PrevInAEL;var u=e.NextInAEL;if(null!==r&&r.Curr.X===e.Bot.X&&r.Curr.Y===e.Bot.Y&&null!==l&&r.OutIdx>=0&&r.Curr.Y===r.Top.Y&&s.ClipperBase.SlopesEqual5(e.Curr,e.Top,r.Curr,r.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==r.WindDelta){p=this.AddOutPt(ePrev2,e.Bot);this.AddJoin(l,p,e.Top)}else if(null!==u&&u.Curr.X===e.Bot.X&&u.Curr.Y===e.Bot.Y&&null!==l&&u.OutIdx>=0&&u.Curr.Y===u.Top.Y&&s.ClipperBase.SlopesEqual5(e.Curr,e.Top,u.Curr,u.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==u.WindDelta){p=this.AddOutPt(u,e.Bot);this.AddJoin(l,p,e.Top)}}e=e.NextInAEL}},s.Clipper.prototype.DoMaxima=function(t){var e=this.GetMaximaPairEx(t);if(null===e)return t.OutIdx>=0&&this.AddOutPt(t,t.Top),void this.DeleteFromAEL(t);for(var i=t.NextInAEL;null!==i&&i!==e;)this.IntersectEdges(t,i,t.Top),this.SwapPositionsInAEL(t,i),i=t.NextInAEL;-1===t.OutIdx&&-1===e.OutIdx?(this.DeleteFromAEL(t),this.DeleteFromAEL(e)):t.OutIdx>=0&&e.OutIdx>=0?(t.OutIdx>=0&&this.AddLocalMaxPoly(t,e,t.Top),this.DeleteFromAEL(t),this.DeleteFromAEL(e)):s.use_lines&&0===t.WindDelta?(t.OutIdx>=0&&(this.AddOutPt(t,t.Top),t.OutIdx=s.ClipperBase.Unassigned),this.DeleteFromAEL(t),e.OutIdx>=0&&(this.AddOutPt(e,t.Top),e.OutIdx=s.ClipperBase.Unassigned),this.DeleteFromAEL(e)):s.Error("DoMaxima error")},s.Clipper.ReversePaths=function(t){for(var e=0,i=t.length;e<i;e++)t[e].reverse()},s.Clipper.Orientation=function(t){return s.Clipper.Area(t)>=0},s.Clipper.prototype.PointCount=function(t){if(null===t)return 0;var e=0,i=t;do{e++,i=i.Next}while(i!==t);return e},s.Clipper.prototype.BuildResult=function(t){s.Clear(t);for(var e=0,i=this.m_PolyOuts.length;e<i;e++){var n=this.m_PolyOuts[e];if(null!==n.Pts){var r=n.Pts.Prev,o=this.PointCount(r);if(!(o<2)){for(var l=new Array(o),p=0;p<o;p++)l[p]=r.Pt,r=r.Prev;t.push(l)}}}},s.Clipper.prototype.BuildResult2=function(t){t.Clear();for(var e=0,i=this.m_PolyOuts.length;e<i;e++){var n=this.m_PolyOuts[e],r=this.PointCount(n.Pts);if(!(n.IsOpen&&r<2||!n.IsOpen&&r<3)){this.FixHoleLinkage(n);var o=new s.PolyNode;t.m_AllPolys.push(o),n.PolyNode=o,o.m_polygon.length=r;for(var l=n.Pts.Prev,p=0;p<r;p++)o.m_polygon[p]=l.Pt,l=l.Prev}}for(e=0,i=this.m_PolyOuts.length;e<i;e++){null!==(n=this.m_PolyOuts[e]).PolyNode&&(n.IsOpen?(n.PolyNode.IsOpen=!0,t.AddChild(n.PolyNode)):null!==n.FirstLeft&&null!==n.FirstLeft.PolyNode?n.FirstLeft.PolyNode.AddChild(n.PolyNode):t.AddChild(n.PolyNode))}},s.Clipper.prototype.FixupOutPolyline=function(t){for(var e=t.Pts,i=e.Prev;e!==i;)if(e=e.Next,s.IntPoint.op_Equality(e.Pt,e.Prev.Pt)){e===i&&(i=e.Prev);var n=e.Prev;n.Next=e.Next,e.Next.Prev=n,e=n}e===e.Prev&&(t.Pts=null)},s.Clipper.prototype.FixupOutPolygon=function(t){var e=null;t.BottomPt=null;for(var i=t.Pts,n=this.PreserveCollinear||this.StrictlySimple;;){if(i.Prev===i||i.Prev===i.Next)return void(t.Pts=null);if(s.IntPoint.op_Equality(i.Pt,i.Next.Pt)||s.IntPoint.op_Equality(i.Pt,i.Prev.Pt)||s.ClipperBase.SlopesEqual4(i.Prev.Pt,i.Pt,i.Next.Pt,this.m_UseFullRange)&&(!n||!this.Pt2IsBetweenPt1AndPt3(i.Prev.Pt,i.Pt,i.Next.Pt)))e=null,i.Prev.Next=i.Next,i.Next.Prev=i.Prev,i=i.Prev;else{if(i===e)break;null===e&&(e=i),i=i.Next}}t.Pts=i},s.Clipper.prototype.DupOutPt=function(t,e){var i=new s.OutPt;return i.Pt.X=t.Pt.X,i.Pt.Y=t.Pt.Y,s.use_xyz&&(i.Pt.Z=t.Pt.Z),i.Idx=t.Idx,e?(i.Next=t.Next,i.Prev=t,t.Next.Prev=i,t.Next=i):(i.Prev=t.Prev,i.Next=t,t.Prev.Next=i,t.Prev=i),i},s.Clipper.prototype.GetOverlap=function(t,e,i,n,r){return t<e?i<n?(r.Left=Math.max(t,i),r.Right=Math.min(e,n)):(r.Left=Math.max(t,n),r.Right=Math.min(e,i)):i<n?(r.Left=Math.max(e,i),r.Right=Math.min(t,n)):(r.Left=Math.max(e,n),r.Right=Math.min(t,i)),r.Left<r.Right},s.Clipper.prototype.JoinHorz=function(t,e,i,n,r,o){var l=t.Pt.X>e.Pt.X?s.Direction.dRightToLeft:s.Direction.dLeftToRight,p=i.Pt.X>n.Pt.X?s.Direction.dRightToLeft:s.Direction.dLeftToRight;if(l===p)return!1;if(l===s.Direction.dLeftToRight){for(;t.Next.Pt.X<=r.X&&t.Next.Pt.X>=t.Pt.X&&t.Next.Pt.Y===r.Y;)t=t.Next;o&&t.Pt.X!==r.X&&(t=t.Next),e=this.DupOutPt(t,!o),s.IntPoint.op_Inequality(e.Pt,r)&&((t=e).Pt.X=r.X,t.Pt.Y=r.Y,s.use_xyz&&(t.Pt.Z=r.Z),e=this.DupOutPt(t,!o))}else{for(;t.Next.Pt.X>=r.X&&t.Next.Pt.X<=t.Pt.X&&t.Next.Pt.Y===r.Y;)t=t.Next;o||t.Pt.X===r.X||(t=t.Next),e=this.DupOutPt(t,o),s.IntPoint.op_Inequality(e.Pt,r)&&((t=e).Pt.X=r.X,t.Pt.Y=r.Y,s.use_xyz&&(t.Pt.Z=r.Z),e=this.DupOutPt(t,o))}if(p===s.Direction.dLeftToRight){for(;i.Next.Pt.X<=r.X&&i.Next.Pt.X>=i.Pt.X&&i.Next.Pt.Y===r.Y;)i=i.Next;o&&i.Pt.X!==r.X&&(i=i.Next),n=this.DupOutPt(i,!o),s.IntPoint.op_Inequality(n.Pt,r)&&((i=n).Pt.X=r.X,i.Pt.Y=r.Y,s.use_xyz&&(i.Pt.Z=r.Z),n=this.DupOutPt(i,!o))}else{for(;i.Next.Pt.X>=r.X&&i.Next.Pt.X<=i.Pt.X&&i.Next.Pt.Y===r.Y;)i=i.Next;o||i.Pt.X===r.X||(i=i.Next),n=this.DupOutPt(i,o),s.IntPoint.op_Inequality(n.Pt,r)&&((i=n).Pt.X=r.X,i.Pt.Y=r.Y,s.use_xyz&&(i.Pt.Z=r.Z),n=this.DupOutPt(i,o))}return l===s.Direction.dLeftToRight===o?(t.Prev=i,i.Next=t,e.Next=n,n.Prev=e):(t.Next=i,i.Prev=t,e.Prev=n,n.Next=e),!0},s.Clipper.prototype.JoinPoints=function(t,e,i){var n=t.OutPt1,r=new s.OutPt,o=t.OutPt2,l=new s.OutPt,p=t.OutPt1.Pt.Y===t.OffPt.Y;if(p&&s.IntPoint.op_Equality(t.OffPt,t.OutPt1.Pt)&&s.IntPoint.op_Equality(t.OffPt,t.OutPt2.Pt)){if(e!==i)return!1;for(r=t.OutPt1.Next;r!==n&&s.IntPoint.op_Equality(r.Pt,t.OffPt);)r=r.Next;var u=r.Pt.Y>t.OffPt.Y;for(l=t.OutPt2.Next;l!==o&&s.IntPoint.op_Equality(l.Pt,t.OffPt);)l=l.Next;return u!==l.Pt.Y>t.OffPt.Y&&(u?(r=this.DupOutPt(n,!1),l=this.DupOutPt(o,!0),n.Prev=o,o.Next=n,r.Next=l,l.Prev=r,t.OutPt1=n,t.OutPt2=r,!0):(r=this.DupOutPt(n,!0),l=this.DupOutPt(o,!1),n.Next=o,o.Prev=n,r.Prev=l,l.Next=r,t.OutPt1=n,t.OutPt2=r,!0))}if(p){for(r=n;n.Prev.Pt.Y===n.Pt.Y&&n.Prev!==r&&n.Prev!==o;)n=n.Prev;for(;r.Next.Pt.Y===r.Pt.Y&&r.Next!==n&&r.Next!==o;)r=r.Next;if(r.Next===n||r.Next===o)return!1;for(l=o;o.Prev.Pt.Y===o.Pt.Y&&o.Prev!==l&&o.Prev!==r;)o=o.Prev;for(;l.Next.Pt.Y===l.Pt.Y&&l.Next!==o&&l.Next!==n;)l=l.Next;if(l.Next===o||l.Next===n)return!1;var h={Left:null,Right:null};if(!this.GetOverlap(n.Pt.X,r.Pt.X,o.Pt.X,l.Pt.X,h))return!1;var a,f=h.Left,d=h.Right,P=new s.IntPoint0;return n.Pt.X>=f&&n.Pt.X<=d?(P.X=n.Pt.X,P.Y=n.Pt.Y,s.use_xyz&&(P.Z=n.Pt.Z),a=n.Pt.X>r.Pt.X):o.Pt.X>=f&&o.Pt.X<=d?(P.X=o.Pt.X,P.Y=o.Pt.Y,s.use_xyz&&(P.Z=o.Pt.Z),a=o.Pt.X>l.Pt.X):r.Pt.X>=f&&r.Pt.X<=d?(P.X=r.Pt.X,P.Y=r.Pt.Y,s.use_xyz&&(P.Z=r.Pt.Z),a=r.Pt.X>n.Pt.X):(P.X=l.Pt.X,P.Y=l.Pt.Y,s.use_xyz&&(P.Z=l.Pt.Z),a=l.Pt.X>o.Pt.X),t.OutPt1=n,t.OutPt2=o,this.JoinHorz(n,r,o,l,P,a)}for(r=n.Next;s.IntPoint.op_Equality(r.Pt,n.Pt)&&r!==n;)r=r.Next;var y=r.Pt.Y>n.Pt.Y||!s.ClipperBase.SlopesEqual4(n.Pt,r.Pt,t.OffPt,this.m_UseFullRange);if(y){for(r=n.Prev;s.IntPoint.op_Equality(r.Pt,n.Pt)&&r!==n;)r=r.Prev;if(r.Pt.Y>n.Pt.Y||!s.ClipperBase.SlopesEqual4(n.Pt,r.Pt,t.OffPt,this.m_UseFullRange))return!1}for(l=o.Next;s.IntPoint.op_Equality(l.Pt,o.Pt)&&l!==o;)l=l.Next;var m=l.Pt.Y>o.Pt.Y||!s.ClipperBase.SlopesEqual4(o.Pt,l.Pt,t.OffPt,this.m_UseFullRange);if(m){for(l=o.Prev;s.IntPoint.op_Equality(l.Pt,o.Pt)&&l!==o;)l=l.Prev;if(l.Pt.Y>o.Pt.Y||!s.ClipperBase.SlopesEqual4(o.Pt,l.Pt,t.OffPt,this.m_UseFullRange))return!1}return r!==n&&l!==o&&r!==l&&(e!==i||y!==m)&&(y?(r=this.DupOutPt(n,!1),l=this.DupOutPt(o,!0),n.Prev=o,o.Next=n,r.Next=l,l.Prev=r,t.OutPt1=n,t.OutPt2=r,!0):(r=this.DupOutPt(n,!0),l=this.DupOutPt(o,!1),n.Next=o,o.Prev=n,r.Prev=l,l.Next=r,t.OutPt1=n,t.OutPt2=r,!0))},s.Clipper.GetBounds=function(t){for(var e=0,i=t.length;e<i&&0===t[e].length;)e++;if(e===i)return new s.IntRect(0,0,0,0);var n=new s.IntRect;for(n.left=t[e][0].X,n.right=n.left,n.top=t[e][0].Y,n.bottom=n.top;e<i;e++)for(var r=0,o=t[e].length;r<o;r++)t[e][r].X<n.left?n.left=t[e][r].X:t[e][r].X>n.right&&(n.right=t[e][r].X),t[e][r].Y<n.top?n.top=t[e][r].Y:t[e][r].Y>n.bottom&&(n.bottom=t[e][r].Y);return n},s.Clipper.prototype.GetBounds2=function(t){var e=t,i=new s.IntRect;for(i.left=t.Pt.X,i.right=t.Pt.X,i.top=t.Pt.Y,i.bottom=t.Pt.Y,t=t.Next;t!==e;)t.Pt.X<i.left&&(i.left=t.Pt.X),t.Pt.X>i.right&&(i.right=t.Pt.X),t.Pt.Y<i.top&&(i.top=t.Pt.Y),t.Pt.Y>i.bottom&&(i.bottom=t.Pt.Y),t=t.Next;return i},s.Clipper.PointInPolygon=function(t,e){var i=0,n=e.length;if(n<3)return 0;for(var r=e[0],o=1;o<=n;++o){var s=o===n?e[0]:e[o];if(s.Y===t.Y&&(s.X===t.X||r.Y===t.Y&&s.X>t.X==r.X<t.X))return-1;if(r.Y<t.Y!=s.Y<t.Y)if(r.X>=t.X)if(s.X>t.X)i=1-i;else{if(0===(l=(r.X-t.X)*(s.Y-t.Y)-(s.X-t.X)*(r.Y-t.Y)))return-1;l>0==s.Y>r.Y&&(i=1-i)}else if(s.X>t.X){var l;if(0===(l=(r.X-t.X)*(s.Y-t.Y)-(s.X-t.X)*(r.Y-t.Y)))return-1;l>0==s.Y>r.Y&&(i=1-i)}r=s}return i},s.Clipper.prototype.PointInPolygon=function(t,e){var i=0,n=e,r=t.X,o=t.Y,s=e.Pt.X,l=e.Pt.Y;do{var p=(e=e.Next).Pt.X,u=e.Pt.Y;if(u===o&&(p===r||l===o&&p>r==s<r))return-1;if(l<o!=u<o)if(s>=r)if(p>r)i=1-i;else{if(0===(h=(s-r)*(u-o)-(p-r)*(l-o)))return-1;h>0==u>l&&(i=1-i)}else if(p>r){var h;if(0===(h=(s-r)*(u-o)-(p-r)*(l-o)))return-1;h>0==u>l&&(i=1-i)}s=p,l=u}while(n!==e);return i},s.Clipper.prototype.Poly2ContainsPoly1=function(t,e){var i=t;do{var n=this.PointInPolygon(i.Pt,e);if(n>=0)return n>0;i=i.Next}while(i!==t);return!0},s.Clipper.prototype.FixupFirstLefts1=function(t,e){for(var i,n,r=0,o=this.m_PolyOuts.length;r<o;r++)i=this.m_PolyOuts[r],n=s.Clipper.ParseFirstLeft(i.FirstLeft),null!==i.Pts&&n===t&&this.Poly2ContainsPoly1(i.Pts,e.Pts)&&(i.FirstLeft=e)},s.Clipper.prototype.FixupFirstLefts2=function(t,e){for(var i,n,r=e.FirstLeft,o=0,l=this.m_PolyOuts.length;o<l;o++)null!==(i=this.m_PolyOuts[o]).Pts&&i!==e&&i!==t&&((n=s.Clipper.ParseFirstLeft(i.FirstLeft))!==r&&n!==t&&n!==e||(this.Poly2ContainsPoly1(i.Pts,t.Pts)?i.FirstLeft=t:this.Poly2ContainsPoly1(i.Pts,e.Pts)?i.FirstLeft=e:i.FirstLeft!==t&&i.FirstLeft!==e||(i.FirstLeft=r)))},s.Clipper.prototype.FixupFirstLefts3=function(t,e){for(var i,n,r=0,o=this.m_PolyOuts.length;r<o;r++)i=this.m_PolyOuts[r],n=s.Clipper.ParseFirstLeft(i.FirstLeft),null!==i.Pts&&n===t&&(i.FirstLeft=e)},s.Clipper.ParseFirstLeft=function(t){for(;null!==t&&null===t.Pts;)t=t.FirstLeft;return t},s.Clipper.prototype.JoinCommonEdges=function(){for(var t=0,e=this.m_Joins.length;t<e;t++){var i,n=this.m_Joins[t],r=this.GetOutRec(n.OutPt1.Idx),o=this.GetOutRec(n.OutPt2.Idx);if(null!==r.Pts&&null!==o.Pts)if(!r.IsOpen&&!o.IsOpen)i=r===o?r:this.OutRec1RightOfOutRec2(r,o)?o:this.OutRec1RightOfOutRec2(o,r)?r:this.GetLowermostRec(r,o),this.JoinPoints(n,r,o)&&(r===o?(r.Pts=n.OutPt1,r.BottomPt=null,(o=this.CreateOutRec()).Pts=n.OutPt2,this.UpdateOutPtIdxs(o),this.Poly2ContainsPoly1(o.Pts,r.Pts)?(o.IsHole=!r.IsHole,o.FirstLeft=r,this.m_UsingPolyTree&&this.FixupFirstLefts2(o,r),(o.IsHole^this.ReverseSolution)==this.Area$1(o)>0&&this.ReversePolyPtLinks(o.Pts)):this.Poly2ContainsPoly1(r.Pts,o.Pts)?(o.IsHole=r.IsHole,r.IsHole=!o.IsHole,o.FirstLeft=r.FirstLeft,r.FirstLeft=o,this.m_UsingPolyTree&&this.FixupFirstLefts2(r,o),(r.IsHole^this.ReverseSolution)==this.Area$1(r)>0&&this.ReversePolyPtLinks(r.Pts)):(o.IsHole=r.IsHole,o.FirstLeft=r.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(r,o))):(o.Pts=null,o.BottomPt=null,o.Idx=r.Idx,r.IsHole=i.IsHole,i===o&&(r.FirstLeft=o.FirstLeft),o.FirstLeft=r,this.m_UsingPolyTree&&this.FixupFirstLefts3(o,r)))}},s.Clipper.prototype.UpdateOutPtIdxs=function(t){var e=t.Pts;do{e.Idx=t.Idx,e=e.Prev}while(e!==t.Pts)},s.Clipper.prototype.DoSimplePolygons=function(){for(var t=0;t<this.m_PolyOuts.length;){var e=this.m_PolyOuts[t++],i=e.Pts;if(null!==i&&!e.IsOpen)do{for(var n=i.Next;n!==e.Pts;){if(s.IntPoint.op_Equality(i.Pt,n.Pt)&&n.Next!==i&&n.Prev!==i){var r=i.Prev,o=n.Prev;i.Prev=o,o.Next=i,n.Prev=r,r.Next=n,e.Pts=i;var l=this.CreateOutRec();l.Pts=n,this.UpdateOutPtIdxs(l),this.Poly2ContainsPoly1(l.Pts,e.Pts)?(l.IsHole=!e.IsHole,l.FirstLeft=e,this.m_UsingPolyTree&&this.FixupFirstLefts2(l,e)):this.Poly2ContainsPoly1(e.Pts,l.Pts)?(l.IsHole=e.IsHole,e.IsHole=!l.IsHole,l.FirstLeft=e.FirstLeft,e.FirstLeft=l,this.m_UsingPolyTree&&this.FixupFirstLefts2(e,l)):(l.IsHole=e.IsHole,l.FirstLeft=e.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(e,l)),n=i}n=n.Next}i=i.Next}while(i!==e.Pts)}},s.Clipper.Area=function(t){if(!Array.isArray(t))return 0;var e=t.length;if(e<3)return 0;for(var i=0,n=0,r=e-1;n<e;++n)i+=(t[r].X+t[n].X)*(t[r].Y-t[n].Y),r=n;return.5*-i},s.Clipper.prototype.Area=function(t){var e=t;if(null===t)return 0;var i=0;do{i+=(t.Prev.Pt.X+t.Pt.X)*(t.Prev.Pt.Y-t.Pt.Y),t=t.Next}while(t!==e);return.5*i},s.Clipper.prototype.Area$1=function(t){return this.Area(t.Pts)},s.Clipper.SimplifyPolygon=function(t,e){var i=new Array,n=new s.Clipper(0);return n.StrictlySimple=!0,n.AddPath(t,s.PolyType.ptSubject,!0),n.Execute(s.ClipType.ctUnion,i,e,e),i},s.Clipper.SimplifyPolygons=function(t,e){void 0===e&&(e=s.PolyFillType.pftEvenOdd);var i=new Array,n=new s.Clipper(0);return n.StrictlySimple=!0,n.AddPaths(t,s.PolyType.ptSubject,!0),n.Execute(s.ClipType.ctUnion,i,e,e),i},s.Clipper.DistanceSqrd=function(t,e){var i=t.X-e.X,n=t.Y-e.Y;return i*i+n*n},s.Clipper.DistanceFromLineSqrd=function(t,e,i){var n=e.Y-i.Y,r=i.X-e.X,o=n*e.X+r*e.Y;return(o=n*t.X+r*t.Y-o)*o/(n*n+r*r)},s.Clipper.SlopesNearCollinear=function(t,e,i,n){return Math.abs(t.X-e.X)>Math.abs(t.Y-e.Y)?t.X>e.X==t.X<i.X?s.Clipper.DistanceFromLineSqrd(t,e,i)<n:e.X>t.X==e.X<i.X?s.Clipper.DistanceFromLineSqrd(e,t,i)<n:s.Clipper.DistanceFromLineSqrd(i,t,e)<n:t.Y>e.Y==t.Y<i.Y?s.Clipper.DistanceFromLineSqrd(t,e,i)<n:e.Y>t.Y==e.Y<i.Y?s.Clipper.DistanceFromLineSqrd(e,t,i)<n:s.Clipper.DistanceFromLineSqrd(i,t,e)<n},s.Clipper.PointsAreClose=function(t,e,i){var n=t.X-e.X,r=t.Y-e.Y;return n*n+r*r<=i},s.Clipper.ExcludeOp=function(t){var e=t.Prev;return e.Next=t.Next,t.Next.Prev=e,e.Idx=0,e},s.Clipper.CleanPolygon=function(t,e){void 0===e&&(e=1.415);var i=t.length;if(0===i)return new Array;for(var n=new Array(i),r=0;r<i;++r)n[r]=new s.OutPt;for(r=0;r<i;++r)n[r].Pt=t[r],n[r].Next=n[(r+1)%i],n[r].Next.Prev=n[r],n[r].Idx=0;for(var o=e*e,l=n[0];0===l.Idx&&l.Next!==l.Prev;)s.Clipper.PointsAreClose(l.Pt,l.Prev.Pt,o)?(l=s.Clipper.ExcludeOp(l),i--):s.Clipper.PointsAreClose(l.Prev.Pt,l.Next.Pt,o)?(s.Clipper.ExcludeOp(l.Next),l=s.Clipper.ExcludeOp(l),i-=2):s.Clipper.SlopesNearCollinear(l.Prev.Pt,l.Pt,l.Next.Pt,o)?(l=s.Clipper.ExcludeOp(l),i--):(l.Idx=1,l=l.Next);i<3&&(i=0);var p=new Array(i);for(r=0;r<i;++r)p[r]=new s.IntPoint1(l.Pt),l=l.Next;return n=null,p},s.Clipper.CleanPolygons=function(t,e){for(var i=new Array(t.length),n=0,r=t.length;n<r;n++)i[n]=s.Clipper.CleanPolygon(t[n],e);return i},s.Clipper.Minkowski=function(t,e,i,n){var r=n?1:0,o=t.length,l=e.length,p=new Array;if(i)for(var u=0;u<l;u++){for(var h=new Array(o),a=0,f=t.length,d=t[a];a<f;d=t[++a])h[a]=new s.IntPoint2(e[u].X+d.X,e[u].Y+d.Y);p.push(h)}else for(u=0;u<l;u++){for(h=new Array(o),a=0,f=t.length,d=t[a];a<f;d=t[++a])h[a]=new s.IntPoint2(e[u].X-d.X,e[u].Y-d.Y);p.push(h)}var P=new Array;for(u=0;u<l-1+r;u++)for(a=0;a<o;a++){var y=new Array;y.push(p[u%l][a%o]),y.push(p[(u+1)%l][a%o]),y.push(p[(u+1)%l][(a+1)%o]),y.push(p[u%l][(a+1)%o]),s.Clipper.Orientation(y)||y.reverse(),P.push(y)}return P},s.Clipper.MinkowskiSum=function(t,e,i){if(e[0]instanceof Array){u=e;for(var n=new s.Paths,r=(l=new s.Clipper,0);r<u.length;++r){var o=s.Clipper.Minkowski(t,u[r],!0,i);if(l.AddPaths(o,s.PolyType.ptSubject,!0),i){p=s.Clipper.TranslatePath(u[r],t[0]);l.AddPath(p,s.PolyType.ptClip,!0)}}return l.Execute(s.ClipType.ctUnion,n,s.PolyFillType.pftNonZero,s.PolyFillType.pftNonZero),n}var l,p=e,u=s.Clipper.Minkowski(t,p,!0,i);return(l=new s.Clipper).AddPaths(u,s.PolyType.ptSubject,!0),l.Execute(s.ClipType.ctUnion,u,s.PolyFillType.pftNonZero,s.PolyFillType.pftNonZero),u},s.Clipper.TranslatePath=function(t,e){for(var i=new s.Path,n=0;n<t.length;n++)i.push(new s.IntPoint2(t[n].X+e.X,t[n].Y+e.Y));return i},s.Clipper.MinkowskiDiff=function(t,e){var i=s.Clipper.Minkowski(t,e,!1,!0),n=new s.Clipper;return n.AddPaths(i,s.PolyType.ptSubject,!0),n.Execute(s.ClipType.ctUnion,i,s.PolyFillType.pftNonZero,s.PolyFillType.pftNonZero),i},s.Clipper.PolyTreeToPaths=function(t){var e=new Array;return s.Clipper.AddPolyNodeToPaths(t,s.Clipper.NodeType.ntAny,e),e},s.Clipper.AddPolyNodeToPaths=function(t,e,i){var n=!0;switch(e){case s.Clipper.NodeType.ntOpen:return;case s.Clipper.NodeType.ntClosed:n=!t.IsOpen}t.m_polygon.length>0&&n&&i.push(t.m_polygon);for(var r=0,o=t.Childs(),l=o.length,p=o[r];r<l;p=o[++r])s.Clipper.AddPolyNodeToPaths(p,e,i)},s.Clipper.OpenPathsFromPolyTree=function(t){for(var e=new s.Paths,i=0,n=t.ChildCount();i<n;i++)t.Childs()[i].IsOpen&&e.push(t.Childs()[i].m_polygon);return e},s.Clipper.ClosedPathsFromPolyTree=function(t){var e=new s.Paths;return s.Clipper.AddPolyNodeToPaths(t,s.Clipper.NodeType.ntClosed,e),e},b(s.Clipper,s.ClipperBase),s.Clipper.NodeType={ntAny:0,ntOpen:1,ntClosed:2},s.ClipperOffset=function(t,e){void 0===t&&(t=2),void 0===e&&(e=s.ClipperOffset.def_arc_tolerance),this.m_destPolys=new s.Paths,this.m_srcPoly=new s.Path,this.m_destPoly=new s.Path,this.m_normals=new Array,this.m_delta=0,this.m_sinA=0,this.m_sin=0,this.m_cos=0,this.m_miterLim=0,this.m_StepsPerRad=0,this.m_lowest=new s.IntPoint0,this.m_polyNodes=new s.PolyNode,this.MiterLimit=t,this.ArcTolerance=e,this.m_lowest.X=-1},s.ClipperOffset.two_pi=6.28318530717959,s.ClipperOffset.def_arc_tolerance=.25,s.ClipperOffset.prototype.Clear=function(){s.Clear(this.m_polyNodes.Childs()),this.m_lowest.X=-1},s.ClipperOffset.Round=s.Clipper.Round,s.ClipperOffset.prototype.AddPath=function(t,e,i){var n=t.length-1;if(!(n<0)){var r=new s.PolyNode;if(r.m_jointype=e,r.m_endtype=i,i===s.EndType.etClosedLine||i===s.EndType.etClosedPolygon)for(;n>0&&s.IntPoint.op_Equality(t[0],t[n]);)n--;r.m_polygon.push(t[0]);for(var o=0,l=0,p=1;p<=n;p++)s.IntPoint.op_Inequality(r.m_polygon[o],t[p])&&(o++,r.m_polygon.push(t[p]),(t[p].Y>r.m_polygon[l].Y||t[p].Y===r.m_polygon[l].Y&&t[p].X<r.m_polygon[l].X)&&(l=o));if(!(i===s.EndType.etClosedPolygon&&o<2)&&(this.m_polyNodes.AddChild(r),i===s.EndType.etClosedPolygon))if(this.m_lowest.X<0)this.m_lowest=new s.IntPoint2(this.m_polyNodes.ChildCount()-1,l);else{var u=this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];(r.m_polygon[l].Y>u.Y||r.m_polygon[l].Y===u.Y&&r.m_polygon[l].X<u.X)&&(this.m_lowest=new s.IntPoint2(this.m_polyNodes.ChildCount()-1,l))}}},s.ClipperOffset.prototype.AddPaths=function(t,e,i){for(var n=0,r=t.length;n<r;n++)this.AddPath(t[n],e,i)},s.ClipperOffset.prototype.FixOrientations=function(){if(this.m_lowest.X>=0&&!s.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))for(var t=0;t<this.m_polyNodes.ChildCount();t++){((e=this.m_polyNodes.Childs()[t]).m_endtype===s.EndType.etClosedPolygon||e.m_endtype===s.EndType.etClosedLine&&s.Clipper.Orientation(e.m_polygon))&&e.m_polygon.reverse()}else for(t=0;t<this.m_polyNodes.ChildCount();t++){var e;(e=this.m_polyNodes.Childs()[t]).m_endtype!==s.EndType.etClosedLine||s.Clipper.Orientation(e.m_polygon)||e.m_polygon.reverse()}},s.ClipperOffset.GetUnitNormal=function(t,e){var i=e.X-t.X,n=e.Y-t.Y;if(0===i&&0===n)return new s.DoublePoint2(0,0);var r=1/Math.sqrt(i*i+n*n);return i*=r,n*=r,new s.DoublePoint2(n,-i)},s.ClipperOffset.prototype.DoOffset=function(t){if(this.m_destPolys=new Array,this.m_delta=t,s.ClipperBase.near_zero(t))for(var e=0;e<this.m_polyNodes.ChildCount();e++){(r=this.m_polyNodes.Childs()[e]).m_endtype===s.EndType.etClosedPolygon&&this.m_destPolys.push(r.m_polygon)}else{var i;this.MiterLimit>2?this.m_miterLim=2/(this.MiterLimit*this.MiterLimit):this.m_miterLim=.5,i=this.ArcTolerance<=0?s.ClipperOffset.def_arc_tolerance:this.ArcTolerance>Math.abs(t)*s.ClipperOffset.def_arc_tolerance?Math.abs(t)*s.ClipperOffset.def_arc_tolerance:this.ArcTolerance;var n=3.14159265358979/Math.acos(1-i/Math.abs(t));this.m_sin=Math.sin(s.ClipperOffset.two_pi/n),this.m_cos=Math.cos(s.ClipperOffset.two_pi/n),this.m_StepsPerRad=n/s.ClipperOffset.two_pi,t<0&&(this.m_sin=-this.m_sin);for(e=0;e<this.m_polyNodes.ChildCount();e++){var r=this.m_polyNodes.Childs()[e];this.m_srcPoly=r.m_polygon;var o=this.m_srcPoly.length;if(!(0===o||t<=0&&(o<3||r.m_endtype!==s.EndType.etClosedPolygon)))if(this.m_destPoly=new Array,1!==o){this.m_normals.length=0;for(f=0;f<o-1;f++)this.m_normals.push(s.ClipperOffset.GetUnitNormal(this.m_srcPoly[f],this.m_srcPoly[f+1]));if(r.m_endtype===s.EndType.etClosedLine||r.m_endtype===s.EndType.etClosedPolygon?this.m_normals.push(s.ClipperOffset.GetUnitNormal(this.m_srcPoly[o-1],this.m_srcPoly[0])):this.m_normals.push(new s.DoublePoint1(this.m_normals[o-2])),r.m_endtype===s.EndType.etClosedPolygon){var l=o-1;for(f=0;f<o;f++)l=this.OffsetPoint(f,l,r.m_jointype);this.m_destPolys.push(this.m_destPoly)}else if(r.m_endtype===s.EndType.etClosedLine){for(l=o-1,f=0;f<o;f++)l=this.OffsetPoint(f,l,r.m_jointype);this.m_destPolys.push(this.m_destPoly),this.m_destPoly=new Array;var p=this.m_normals[o-1];for(f=o-1;f>0;f--)this.m_normals[f]=new s.DoublePoint2(-this.m_normals[f-1].X,-this.m_normals[f-1].Y);this.m_normals[0]=new s.DoublePoint2(-p.X,-p.Y),l=0;for(f=o-1;f>=0;f--)l=this.OffsetPoint(f,l,r.m_jointype);this.m_destPolys.push(this.m_destPoly)}else{var u;for(l=0,f=1;f<o-1;++f)l=this.OffsetPoint(f,l,r.m_jointype);if(r.m_endtype===s.EndType.etOpenButt){f=o-1;u=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[f].X+this.m_normals[f].X*t),s.ClipperOffset.Round(this.m_srcPoly[f].Y+this.m_normals[f].Y*t)),this.m_destPoly.push(u),u=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[f].X-this.m_normals[f].X*t),s.ClipperOffset.Round(this.m_srcPoly[f].Y-this.m_normals[f].Y*t)),this.m_destPoly.push(u)}else{f=o-1;l=o-2,this.m_sinA=0,this.m_normals[f]=new s.DoublePoint2(-this.m_normals[f].X,-this.m_normals[f].Y),r.m_endtype===s.EndType.etOpenSquare?this.DoSquare(f,l):this.DoRound(f,l)}for(f=o-1;f>0;f--)this.m_normals[f]=new s.DoublePoint2(-this.m_normals[f-1].X,-this.m_normals[f-1].Y);this.m_normals[0]=new s.DoublePoint2(-this.m_normals[1].X,-this.m_normals[1].Y);for(f=(l=o-1)-1;f>0;--f)l=this.OffsetPoint(f,l,r.m_jointype);r.m_endtype===s.EndType.etOpenButt?(u=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X-this.m_normals[0].X*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y-this.m_normals[0].Y*t)),this.m_destPoly.push(u),u=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X+this.m_normals[0].X*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y+this.m_normals[0].Y*t)),this.m_destPoly.push(u)):(l=1,this.m_sinA=0,r.m_endtype===s.EndType.etOpenSquare?this.DoSquare(0,1):this.DoRound(0,1)),this.m_destPolys.push(this.m_destPoly)}}else{if(r.m_jointype===s.JoinType.jtRound)for(var h=1,a=0,f=1;f<=n;f++){this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X+h*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y+a*t)));var d=h;h=h*this.m_cos-this.m_sin*a,a=d*this.m_sin+a*this.m_cos}else{h=-1,a=-1;for(var f=0;f<4;++f)this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X+h*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y+a*t))),h<0?h=1:a<0?a=1:h=-1}this.m_destPolys.push(this.m_destPoly)}}}},s.ClipperOffset.prototype.Execute=function(){var t=arguments,e=t[0]instanceof s.PolyTree;if(e){o=t[0],l=t[1];if(o.Clear(),this.FixOrientations(),this.DoOffset(l),(r=new s.Clipper(0)).AddPaths(this.m_destPolys,s.PolyType.ptSubject,!0),l>0)r.Execute(s.ClipType.ctUnion,o,s.PolyFillType.pftPositive,s.PolyFillType.pftPositive);else{u=s.Clipper.GetBounds(this.m_destPolys);if((p=new s.Path).push(new s.IntPoint2(u.left-10,u.bottom+10)),p.push(new s.IntPoint2(u.right+10,u.bottom+10)),p.push(new s.IntPoint2(u.right+10,u.top-10)),p.push(new s.IntPoint2(u.left-10,u.top-10)),r.AddPath(p,s.PolyType.ptSubject,!0),r.ReverseSolution=!0,r.Execute(s.ClipType.ctUnion,o,s.PolyFillType.pftNegative,s.PolyFillType.pftNegative),1===o.ChildCount()&&o.Childs()[0].ChildCount()>0){var i=o.Childs()[0];o.Childs()[0]=i.Childs()[0],o.Childs()[0].m_Parent=o;for(var n=1;n<i.ChildCount();n++)o.AddChild(i.Childs()[n])}else o.Clear()}}else{var r,o=t[0],l=t[1];if(s.Clear(o),this.FixOrientations(),this.DoOffset(l),(r=new s.Clipper(0)).AddPaths(this.m_destPolys,s.PolyType.ptSubject,!0),l>0)r.Execute(s.ClipType.ctUnion,o,s.PolyFillType.pftPositive,s.PolyFillType.pftPositive);else{var p,u=s.Clipper.GetBounds(this.m_destPolys);(p=new s.Path).push(new s.IntPoint2(u.left-10,u.bottom+10)),p.push(new s.IntPoint2(u.right+10,u.bottom+10)),p.push(new s.IntPoint2(u.right+10,u.top-10)),p.push(new s.IntPoint2(u.left-10,u.top-10)),r.AddPath(p,s.PolyType.ptSubject,!0),r.ReverseSolution=!0,r.Execute(s.ClipType.ctUnion,o,s.PolyFillType.pftNegative,s.PolyFillType.pftNegative),o.length>0&&o.splice(0,1)}}},s.ClipperOffset.prototype.OffsetPoint=function(t,e,i){if(this.m_sinA=this.m_normals[e].X*this.m_normals[t].Y-this.m_normals[t].X*this.m_normals[e].Y,Math.abs(this.m_sinA*this.m_delta)<1){if(this.m_normals[e].X*this.m_normals[t].X+this.m_normals[t].Y*this.m_normals[e].Y>0)return this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[e].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[e].Y*this.m_delta))),e}else this.m_sinA>1?this.m_sinA=1:this.m_sinA<-1&&(this.m_sinA=-1);if(this.m_sinA*this.m_delta<0)this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[e].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[e].Y*this.m_delta))),this.m_destPoly.push(new s.IntPoint1(this.m_srcPoly[t])),this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)));else switch(i){case s.JoinType.jtMiter:var n=this.m_normals[t].X*this.m_normals[e].X+this.m_normals[t].Y*this.m_normals[e].Y+1;n>=this.m_miterLim?this.DoMiter(t,e,n):this.DoSquare(t,e);break;case s.JoinType.jtSquare:this.DoSquare(t,e);break;case s.JoinType.jtRound:this.DoRound(t,e)}return e=t},s.ClipperOffset.prototype.DoSquare=function(t,e){var i=Math.tan(Math.atan2(this.m_sinA,this.m_normals[e].X*this.m_normals[t].X+this.m_normals[e].Y*this.m_normals[t].Y)/4);this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[e].X-this.m_normals[e].Y*i)),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[e].Y+this.m_normals[e].X*i)))),this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[t].X+this.m_normals[t].Y*i)),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[t].Y-this.m_normals[t].X*i))))},s.ClipperOffset.prototype.DoMiter=function(t,e,i){var n=this.m_delta/i;this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+(this.m_normals[e].X+this.m_normals[t].X)*n),s.ClipperOffset.Round(this.m_srcPoly[t].Y+(this.m_normals[e].Y+this.m_normals[t].Y)*n)))},s.ClipperOffset.prototype.DoRound=function(t,e){for(var i,n=Math.atan2(this.m_sinA,this.m_normals[e].X*this.m_normals[t].X+this.m_normals[e].Y*this.m_normals[t].Y),r=Math.max(s.Cast_Int32(s.ClipperOffset.Round(this.m_StepsPerRad*Math.abs(n))),1),o=this.m_normals[e].X,l=this.m_normals[e].Y,p=0;p<r;++p)this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+o*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+l*this.m_delta))),i=o,o=o*this.m_cos-this.m_sin*l,l=i*this.m_sin+l*this.m_cos;this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)))},s.Error=function(t){try{throw new Error(t)}catch(t){alert(t.message)}},s.JS={},s.JS.AreaOfPolygon=function(t,e){return e||(e=1),s.Clipper.Area(t)/(e*e)},s.JS.AreaOfPolygons=function(t,e){e||(e=1);for(var i=0,n=0;n<t.length;n++)i+=s.Clipper.Area(t[n]);return i/(e*e)},s.JS.BoundsOfPath=function(t,e){return s.JS.BoundsOfPaths([t],e)},s.JS.BoundsOfPaths=function(t,e){e||(e=1);var i=s.Clipper.GetBounds(t);return i.left/=e,i.bottom/=e,i.right/=e,i.top/=e,i},s.JS.Clean=function(t,e){if(!(t instanceof Array))return[];var i=t[0]instanceof Array;t=s.JS.Clone(t);if("number"!=typeof e||null===e)return s.Error("Delta is not a number in Clean()."),t;if(0===t.length||1===t.length&&0===t[0].length||e<0)return t;i||(t=[t]);for(var n,r,o,l,p,u,h,a=t.length,f=[],d=0;d<a;d++)if(0!==(n=(r=t[d]).length))if(n<3)o=r,f.push(o);else{for(o=r,l=e*e,p=r[0],u=1,h=1;h<n;h++)(r[h].X-p.X)*(r[h].X-p.X)+(r[h].Y-p.Y)*(r[h].Y-p.Y)<=l||(o[u]=r[h],p=r[h],u++);p=r[u-1],(r[0].X-p.X)*(r[0].X-p.X)+(r[0].Y-p.Y)*(r[0].Y-p.Y)<=l&&u--,u<n&&o.splice(u,n-u),o.length&&f.push(o)}return!i&&f.length?f=f[0]:i||0!==f.length?i&&0===f.length&&(f=[[]]):f=[],f},s.JS.Clone=function(t){if(!(t instanceof Array))return[];if(0===t.length)return[];if(1===t.length&&0===t[0].length)return[[]];var e=t[0]instanceof Array;e||(t=[t]);var i,n,r,o,s=t.length,l=new Array(s);for(n=0;n<s;n++){for(i=t[n].length,o=new Array(i),r=0;r<i;r++)o[r]={X:t[n][r].X,Y:t[n][r].Y};l[n]=o}return e||(l=l[0]),l},s.JS.Lighten=function(t,e){if(!(t instanceof Array))return[];if("number"!=typeof e||null===e)return s.Error("Tolerance is not a number in Lighten()."),s.JS.Clone(t);if(0===t.length||1===t.length&&0===t[0].length||e<0)return s.JS.Clone(t);var i,n,r,o,l,p,u,h,a,f,d,P,y,m,c,x,v=t[0]instanceof Array;v||(t=[t]);var C=t.length,I=e*e,_=[];for(i=0;i<C;i++)if(0!==(p=(r=t[i]).length)){for(o=0;o<1e6;o++){for(l=[],r[(p=r.length)-1].X!==r[0].X||r[p-1].Y!==r[0].Y?(d=1,r.push({X:r[0].X,Y:r[0].Y}),p=r.length):d=0,f=[],n=0;n<p-2;n++)u=r[n],a=r[n+1],h=r[n+2],c=u.X,x=u.Y,P=h.X-c,y=h.Y-x,0===P&&0===y||((m=((a.X-c)*P+(a.Y-x)*y)/(P*P+y*y))>1?(c=h.X,x=h.Y):m>0&&(c+=P*m,x+=y*m)),(P=a.X-c)*P+(y=a.Y-x)*y<=I&&(f[n+1]=1,n++);for(l.push({X:r[0].X,Y:r[0].Y}),n=1;n<p-1;n++)f[n]||l.push({X:r[n].X,Y:r[n].Y});if(l.push({X:r[p-1].X,Y:r[p-1].Y}),d&&r.pop(),!f.length)break;r=l}l[(p=l.length)-1].X===l[0].X&&l[p-1].Y===l[0].Y&&l.pop(),l.length>2&&_.push(l)}return v||(_=_[0]),void 0===_&&(_=[]),_},s.JS.PerimeterOfPath=function(t,e,i){if(void 0===t)return 0;var n,r,o=Math.sqrt,s=0,l=0,p=0,u=0,h=0,a=t.length;if(a<2)return 0;for(e&&(t[a]=t[0],a++);--a;)l=(n=t[a]).X,p=n.Y,s+=o((l-(u=(r=t[a-1]).X))*(l-u)+(p-(h=r.Y))*(p-h));return e&&t.pop(),s/i},s.JS.PerimeterOfPaths=function(t,e,i){i||(i=1);for(var n=0,r=0;r<t.length;r++)n+=s.JS.PerimeterOfPath(t[r],e,i);return n},s.JS.ScaleDownPath=function(t,e){var i,n;for(e||(e=1),i=t.length;i--;)(n=t[i]).X=n.X/e,n.Y=n.Y/e},s.JS.ScaleDownPaths=function(t,e){var i,n,r;for(e||(e=1),i=t.length;i--;)for(n=t[i].length;n--;)(r=t[i][n]).X=r.X/e,r.Y=r.Y/e},s.JS.ScaleUpPath=function(t,e){var i,n,r=Math.round;for(e||(e=1),i=t.length;i--;)(n=t[i]).X=r(n.X*e),n.Y=r(n.Y*e)},s.JS.ScaleUpPaths=function(t,e){var i,n,r,o=Math.round;for(e||(e=1),i=t.length;i--;)for(n=t[i].length;n--;)(r=t[i][n]).X=o(r.X*e),r.Y=o(r.Y*e)},s.ExPolygons=function(){return[]},s.ExPolygon=function(){this.outer=null,this.holes=null},s.JS.AddOuterPolyNodeToExPolygons=function(t,e){var i=new s.ExPolygon;i.outer=t.Contour();var n,r,o,l,p,u,h=t.Childs(),a=h.length;for(i.holes=new Array(a),o=0;o<a;o++)for(n=h[o],i.holes[o]=n.Contour(),l=0,u=(p=n.Childs()).length;l<u;l++)r=p[l],s.JS.AddOuterPolyNodeToExPolygons(r,e);e.push(i)},s.JS.ExPolygonsToPaths=function(t){var e,i,n,r,o=new s.Paths;for(e=0,n=t.length;e<n;e++)for(o.push(t[e].outer),i=0,r=t[e].holes.length;i<r;i++)o.push(t[e].holes[i]);return o},s.JS.PolyTreeToExPolygons=function(t){var e,i,n,r,o=new s.ExPolygons;for(i=0,r=(n=t.Childs()).length;i<r;i++)e=n[i],s.JS.AddOuterPolyNodeToExPolygons(e,o);return o}}()},function(t,e,i){"use strict";i.r(e);var n=i(0),r=i.n(n);class o{constructor(t=0,e=0,i=!1){this.x=t,this.y=e,this.marked=i}static fromJSON(t){return new o(t.x,t.y,t.marked)}set(t){return this.x=t.x,this.y=t.y,this}normalize(){let t=this.length();return new o(this.x/t,this.y/t)}add(t){return new o(this.x+t.x,this.y+t.y)}sub(t){return new o(this.x-t.x,this.y-t.y)}multiplyScalar(t){return new o(this.x*t,this.y*t,this.marked)}squaredLength(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.squaredLength())}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.y*t.x-this.x*t.y}perpendicular(){return new o(this.y,-this.x)}negative(){return new o(-this.x,-this.y)}translate(t,e){return new o(this.x+t,this.y+e)}mark(){return this.marked=!0,this}unmark(){return this.marked=!1,this}approximately(t,e=1e-9){return Math.abs(this.x,t.x)<e&&Math.abs(this.y,t.y)<e}clone(){return new o(this.x,this.y,this.marked)}}class s extends o{constructor(t,e,i,n){super(t,e),this.start=i,this.end=n}clone(){let t=super.clone();return t.start=this.start.clone(),t.end=this.end.clone(),t}}class l{constructor(){}toSVG(){throw new Error("Not implemented toSVG()")}}class p{constructor(t,e){this.min=t,this.max=e,this.width=this.max.x-this.min.x,this.height=this.max.y-this.min.y}}class u extends l{constructor(t,e={}){super(),this.points=t,this.options=e}static fromJSON(t){let e=t.points.map(t=>o.fromJSON(t));return new u(e,t.options)}bounds(){let t=Number.MAX_VALUE,e=Number.MIN_VALUE,i=Number.MAX_VALUE,n=Number.MIN_VALUE;return this.points.forEach(r=>{t=Math.min(r.x,t),i=Math.min(r.y,i),e=Math.max(r.x,e),n=Math.max(r.y,n)}),new p(new o(t,i),new o(e,n))}translate(t,e){let i=this.clone();return i.points=i.points.map(i=>i.translate(t,e)),i}rotate(t){let e=this.clone(),i=Math.sin(t),n=Math.cos(t);return e.points=e.points.map(t=>new o(t.x*n-t.y*i,t.x*i+t.y*n,t.marked)),e}clone(){let t=this.points.map(t=>t.clone());return new u(t,this.options)}area(){let t=0,e=this.points.length;for(let i=0,n=e-1;i<e;n=i++)t+=(this.points[n].x+this.points[i].x)*(this.points[n].y-this.points[i].y);return.5*t}toSVG(){let t=document.createElementNS("http://www.w3.org/2000/svg","svg"),e=document.createElementNS("http://www.w3.org/2000/svg","polyline");if(e.setAttribute("stroke",this.options.strokeColor||"#000000"),e.setAttribute("stroke-width",this.options.strokeWidth||2),e.setAttribute("fill",this.options.fill||"none"),this.points.forEach((i,n)=>{let r=t.createSVGPoint();r.x=i.x,r.y=i.y,e.points.appendItem(r)}),(void 0===this.options.closed||this.options.closed)&&this.points.length>0){let i=this.points[0],n=t.createSVGPoint();n.x=i.x,n.y=i.y,e.points.appendItem(n)}return e}}const h=function(t){return t.map(t=>({X:1e7*t.x,Y:1e7*t.y}))},a=function(t){return t.map(t=>new o(t.X/1e7,t.Y/1e7))},f=function(t,e,i){return i||(i=1e-9),Math.abs(t-e)<i},d=function(t,e,i){if(f(t.x,e.x)&&f(i.x,t.x))return!f(i.y,e.y)&&!f(i.y,t.y)&&i.y<Math.max(e.y,t.y)&&i.y>Math.min(e.y,t.y);if(f(t.y,e.y)&&f(i.y,t.y))return!f(i.x,e.x)&&!f(i.x,t.x)&&i.x<Math.max(e.x,t.x)&&i.x>Math.min(e.x,t.x);if(i.x<t.x&&i.x<e.x||i.x>t.x&&i.x>e.x||i.y<t.y&&i.y<e.y||i.y>t.y&&i.y>e.y)return!1;if(f(i.x,t.x)&&f(i.y,t.y)||f(i.x,e.x)&&f(i.y,e.y))return!1;const n=(i.y-t.y)*(e.x-t.x)-(i.x-t.x)*(e.y-t.y);if(Math.abs(n)>1e-9)return!1;const r=(i.x-t.x)*(e.x-t.x)+(i.y-t.y)*(e.y-t.y);if(r<0||f(r,0))return!1;const o=(e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y);return!(r>o||f(r,o))},P=function(t,e){if(!e||e.points.length<3)return null;let i=!1;for(let n=e.points.length,r=0,o=n-1;r<n;o=r++){let n=e.points[r].add(e.offset),s=e.points[o].add(e.offset);if(n.approximately(t))return null;if(d(n,s,t))return null;n.approximately(s)||n.y>t.y!=s.y>t.y&&t.x<(s.x-n.x)*(t.y-n.y)/(s.y-n.y)+n.x&&(i=!i)}return i},y=function(t,e,i,n,r){let o=(n=n.normalize()).perpendicular(),s=t.dot(o),l=e.dot(o),p=i.dot(o),u=t.dot(n),h=e.dot(n),a=i.dot(n);if(!r){if((s<l||f(s,l))&&(s<p||f(s,p))||(s>l||f(s,l))&&(s>p||f(s,p)))return null;if(f(s,l)&&f(s,p)&&u>h&&u>a)return Math.min(u-h,u-a);if(f(s,l)&&f(s,p)&&u<h&&u<a)return-Math.min(h-u,a-u)}return-(u-h+(h-a)*(l-s)/(l-p))},m=function(t,e,i,n,r){let o,s=r.perpendicular(),l=t.dot(s),p=e.dot(s),u=i.dot(s),h=n.dot(s),a=t.cross(r),d=e.cross(r),P=i.cross(r),m=n.cross(r),c=Math.min(l,p),x=Math.max(l,p),v=Math.max(u,h),C=Math.min(u,h);if(f(x,C)||f(c,v))return null;if(x<C||c>v)return null;if(x>v&&c<C||v>x&&C<c)o=1;else{o=(Math.min(x,v)-Math.max(c,C))/(Math.max(x,v)-Math.min(c,C))}let I=i.sub(t),_=e.sub(t),g=n.sub(t),L=i.sub(n),E=I.cross(_),T=g.cross(_);if(f(E,0)&&f(T,0)){let t=_.perpendicular().normalize(),e=L.perpendicular().normalize();if(Math.abs(t.cross(e))<1e-9&&t.dot(e)<0){let e=t.dot(r);if(f(e,0))return null;if(e<0)return 0}return null}let X=[],N=r.negative();if(f(l,u))X.push(a-P);else if(f(l,h))X.push(a-m);else if(l>C&&l<v){let r=y(t,i,n,N);if(null!==r&&f(r,0)){var O=y(e,i,n,N,!0);(O<0||f(O*o,0))&&(r=null)}null!==r&&X.push(r)}if(f(p,u))X.push(d-P);else if(f(p,h))X.push(d-m);else if(p>C&&p<v){let r=y(e,i,n,N);if(null!==r&&f(r,0)){var Y=y(t,i,n,N,!0);(Y<0||f(Y*o,0))&&(r=null)}null!==r&&X.push(r)}if(u>c&&u<x){let s=y(i,t,e,r);if(null!==s&&f(s,0)){let i=y(n,t,e,r,!0);(i<0||f(i*o,0))&&(s=null)}null!==s&&X.push(s)}if(h>c&&h<x){let s=y(n,t,e,r);if(null!==s&&f(s,0)){let n=y(i,t,e,r,!0);(n<0||f(n*o,0))&&(s=null)}null!==s&&X.push(s)}return X.length<=0?null:Math.min.apply(Math,X)},c=function(t,e,i,n){let r=t.points.slice(0),o=e.points.slice(0);r[0]!=r[r.length-1]&&r.push(r[0]),o[0]!=o[o.length-1]&&o.push(o[0]);let s=null,l=i.normalize();for(var p=0;p<o.length-1;p++)for(var u=0;u<r.length-1;u++){let i=r[u].add(t.offset),h=r[u+1].add(t.offset),a=o[p].add(e.offset),d=o[p+1].add(e.offset);if(i.approximately(h)||a.approximately(d))continue;let P=m(i,h,a,d,l);null!==P&&(null===s||P<s)&&(!n||P>0||f(P,0))&&(s=P)}return s},x=function(t,e,i){let n=t.points.slice(0),r=e.points.slice(0);n[0]!=n[n.length-1]&&n.push(n[0]),r[0]!=r[r.length-1]&&r.push(r[0]);let o=null;for(var s=0;s<r.length;s++){let p=null;for(var l=0;l<n.length-1;l++){let o=r[s].add(e.offset),u=n[l].add(t.offset),h=n[l+1].add(t.offset),a=h.sub(u);if(Math.abs(a.cross(i))<1e-9)continue;let f=y(o,u,h,i);null!==f&&(null===p||f<p)&&(p=f)}null!==p&&(null===o||p>o)&&(o=p)}return o},v=function(t,e,i,n,r){let s=e.y-t.y,l=t.x-e.x,p=e.x*t.y-t.x*e.y,u=n.y-i.y,h=i.x-n.x,a=n.x*i.y-i.x*n.y,f=s*h-u*l,d=(l*a-h*p)/f,P=(u*p-s*a)/f;if(!isFinite(d)||!isFinite(P))return null;if(!r){if(Math.abs(t.x-e.x)>1e-9&&(t.x<e.x?d<t.x||d>e.x:d>t.x||d<e.x))return null;if(Math.abs(t.y-e.y)>1e-9&&(t.y<e.y?P<t.y||P>e.y:P>t.y||P<e.y))return null;if(Math.abs(i.x-n.x)>1e-9&&(i.x<n.x?d<i.x||d>n.x:d>i.x||d<n.x))return null;if(Math.abs(i.y-n.y)>1e-9&&(i.y<n.y?P<i.y||P>n.y:P>i.y||P<n.y))return null}return new o(d,P)},C=function(t,e){let i=t.points.slice(0),n=e.points.slice(0);for(let r=0,o=i.length;r<o-1;r++)for(let s=0,l=n.length;s<l-1;s++){let p=i[r].add(t.offset),u=i[r+1].add(t.offset),h=n[s].add(e.offset),a=n[s+1].add(e.offset),f=0==s?l-1:s-1,y=0==r?o-1:r-1,m=s+1==l-1?0:s+2,c=r+1==o-1?0:r+2;(n[f]==n[s]||n[f].approximately(n[s]))&&(f=0==f?l-1:f-1),(i[y]==i[r]||i[y].approximately(i[r]))&&(y=0==y?o-1:y-1),(n[m]==n[s+1]||n[m].approximately(n[s+1]))&&(m=m==l-1?0:m+1),(i[c]==i[r+1]||i[c].approximately(i[r+1]))&&(c=c==o-1?0:c+1);let x=i[y].add(t.offset),C=n[f].add(e.offset),I=i[c].add(t.offset),_=n[m].add(e.offset);if(d(p,u,h)||p.approximately(h)){let e=P(C,t),i=P(a,t);if(!0===e&&!1===i||!1===e&&!0===i)return!0}else if(d(p,u,a)||u.approximately(a)){let e=P(h,t),i=P(_,t);if(!0===e&&!1===i||!1===e&&!0===i)return!0}else if(d(h,a,p)||p.approximately(a)){let t=P(x,e),i=P(u,e);if(!0===t&&!1===i||!1===t&&!0===i)return!0}else if(d(h,a,u)||u.approximately(h)){let t=P(p,e),i=P(I,e);if(!0===t&&!1===i||!1===t&&!0===i)return!0}else if(null!==v(h,a,p,u))return!0}return!1},I=function(t,e,i,n){let r=t.points.slice(0),o=e.points.slice(0);r[0]!=r[r.length-1]&&r.push(r[0]),o[0]!=o[o.length-1]&&o.push(o[0]);for(let p=0;p<r.length-1;p++)if(!r[p].marked){r[p].mark();for(let u=0;u<o.length;u++){e.offset.set(r[p].sub(o[u]));let h=null;for(var s=0;s<o.length;s++){let i=P(o[s].add(e.offset),t);if(null!==i){h=i;break}}if(null===h)return null;let a=e.offset.clone();if((h&&i||!h&&!i)&&!C(t,e)&&!_(a,n))return a;let d=r[p+1].sub(r[p]),y=x(t,e,d),m=x(e,t,d.negative()),c=null;if(null===y&&null===m||(c=null===y?m:null===m?y:Math.min(y,m)),null===c||f(c,0)||!(c>0))continue;let v=d.squaredLength();if(c*c<v&&!f(c*c,v)){var l=Math.sqrt(v);d=d.multiplyScalar(c/l)}e.offset.add(d);for(let i=0;i<o.length;i++){let n=P(o[i].add(e.offset),t);if(null!==n){h=n;break}}if(a=e.offset.clone(),(h&&i||!h&&!i)&&!C(t,e)&&!_(a,n))return a}}return null},_=function(t,e){if(!e||0==e.length)return!1;for(let i=0,n=e.length;i<n;i++)for(let n=0,r=e[i].points.length;n<r;n++)if(t.approximately(e[i].points[n]))return!0;return!1};class g extends u{constructor(t,e,i){super(e,i),this.id=t,this.offset=new o(0,0),this.transformed=0,this.rotation=0}static fromJSON(t){let e=t.points.map(t=>o.fromJSON(t)),i=new g(t.id,e,t.options);return i.offset=new o(t.offset.x,t.offset.y),i.transformed=t.transformed,i.rotation=t.rotation,i}transform(t,e){let i=this.clone();return i.transformed=t,i.rotation=1*t/e*Math.PI*2,i}clone(){let t=this.points.map(t=>t.clone()),e=new g(this.id,t,this.options);return e.offset=this.offset.clone(),e.transformed=this.transformed,e.rotation=this.rotation,e}toString(){return`${this.id}:${this.transformed}`}}self.addEventListener("message",t=>{let e=g.fromJSON(t.data.A);e=e.rotate(e.rotation);let i=g.fromJSON(t.data.B);i=i.rotate(i.rotation);let n,l=t.data.debug||!1;if(t.data.A.isBin){let r=function(t,e){let i=t.bounds(),n=e.bounds();if(n.max.x-n.min.x>i.max.x-i.min.x||n.max.y-n.min.y>i.max.y-i.min.y)return null;let r=new o(i.min.x-n.min.x,i.min.y-n.min.y),s=new o(i.max.x-n.max.x,i.min.y-n.min.y),l=new o(i.max.x-n.max.x,i.max.y-n.max.y),p=new o(i.min.x-n.min.x,i.max.y-n.max.y);return new u([e.points[0].add(r),e.points[0].add(s),e.points[0].add(l),e.points[0].add(p)])}(e,i,t.data.inside,t.data.edges);n=r?[r]:[]}else n=t.data.edges?function(t,e,i=!1,n=!1,r=!1){let o=t.points[0].y,l=0,p=e.points[0].y,h=0;const a=t.points.length,P=e.points.length;for(let e=1;e<a;e++)t.points[e].unmark(),t.points[e].y<o&&(o=t.points[e].y,l=e);for(let t=1;t<P;t++)e.points[t].unmark(),e.points[t].y>p&&(p=e.points[t].y,h=t);let y=null;y=i?I(t.clone(),e.clone(),!0):t.points[l].sub(e.points[h]);let m=[];for(;null!==y;){console.log("while start",y,e.offset.clone()),e.offset.set(y);let r=null,o=e.points[0].add(e.offset),l=[o.clone()],p=o.clone(),h=0;const v=10*(a+P);for(;h++<v;){let i=[];for(let n=0;n<a;n++){let r=n===a-1?0:n+1;for(let o=0;o<P;o++){let s=o===P-1?0:o+1,l=e.points[o].add(e.offset);t.points[n].approximately(l)?i.push({type:0,A:n,B:o}):d(t.points[n],t.points[r],l)?i.push({type:1,A:r,B:o}):d(l,e.points[s].add(e.offset),t.points[n])&&i.push({type:2,A:n,B:s})}}let n=[];for(let r=0,o=i.length;r<o;r++){let o=t.points[i[r].A];o.mark();let l=i[r].A-1,p=i[r].A+1;l=l<0?a-1:l,p=p>=a?0:p;let u=t.points[l],h=t.points[p],f=e.points[i[r].B],d=i[r].B-1,y=i[r].B+1;d=d<0?P-1:d,y=y>=P?0:y;let m=e.points[d],c=e.points[y];switch(i[r].type){case 0:{let t=u.sub(o),e=h.sub(o),i=f.sub(m),r=f.sub(c);n.push(new s(t.x,t.y,o,u)),n.push(new s(e.x,e.y,o,h)),n.push(new s(i.x,i.y,m,f)),n.push(new s(r.x,r.y,c,f));break}case 1:{var x=f.add(e.offset);let t=o.sub(x),i=u.sub(x);n.push(new s(t.x,t.y,u,o)),n.push(new s(i.x,i.y,o,u));break}case 2:{let t=o.sub(f.add(e.offset)),i=o.sub(m.add(e.offset));n.push(new s(t.x,t.y,m,f)),n.push(new s(i.x,i.y,f,m))}}}let u=null,h=0;for(let i=0,o=n.length;i<o;i++){if(0==n[i].x&&0==n[i].y)continue;if(r&&n[i].dot(r)<0){let t=n[i].normalize(),e=r.normalize();if(Math.abs(t.cross(e))<1e-8)continue}let o=c(t,e,n[i],!0),s=n[i].squaredLength();(null===o||o*o>s)&&(o=Math.sqrt(s)),null!==o&&o>h&&(h=o,u=n[i])}if(null===u||f(h,0)){l=null;break}u.start.mark(),u.end.mark();let y=u.squaredLength(),m=h*h;if(m<y&&!f(m,y)){let t=Math.sqrt(m/y);u=u.multiplyScalar(t)}if(r=u.clone(),(o=o.add(u)).approximately(p))break;let v=!1;if(l.length>0)for(let t=0;t<l.length-1;t++)o.approximately(l[t])&&(v=!0);if(v)break;l.push(o.clone()),e.offset=e.offset.add(u)}if(l&&l.length>0&&m.push(new u(l)),!n)break;y=I(t.clone(),e.clone(),i,m)}return m}(e,i,t.data.inside,t.data.edges,l):function(t,e){let i=h(t.points),n=h(e.points);for(let t=0;t<n.length;t++)n[t].X*=-1,n[t].Y*=-1;let o,s=r.a.Clipper.MinkowskiSum(i,n,!0),l=null;for(let t=0,e=s.length;t<e;t++){let e=a(s[t]),i=new u(e),n=i.area();(null===l||l>n)&&(o=i,l=n)}const p=e.points[0];return[o=o.translate(p.x,p.y)]}(e,i);n=n.map(t=>(t.area()>0&&t.points.reverse(),t)),self.postMessage({result:n})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,