!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Fit=e():t.Fit=e()}(window,(function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/js/",i(i.s=3)}([function(t,e,i){var n,o;!function(){"use strict";var r,s={version:"6.4.2.2",use_lines:!0,use_xyz:!1},l=!1;if(t.exports?(t.exports=s,l=!0):(void 0===(o="function"==typeof(n=s)?n.call(e,i,e,t):n)||(t.exports=o),"undefined"!=typeof document?window.ClipperLib=s:self.ClipperLib=s),l){p="chrome";r="Netscape"}else{var p=navigator.userAgent.toString().toLowerCase();r=navigator.appName}var h,u={};-1!=p.indexOf("chrome")&&-1==p.indexOf("chromium")?u.chrome=1:u.chrome=0,-1!=p.indexOf("chromium")?u.chromium=1:u.chromium=0,-1!=p.indexOf("safari")&&-1==p.indexOf("chrome")&&-1==p.indexOf("chromium")?u.safari=1:u.safari=0,-1!=p.indexOf("firefox")?u.firefox=1:u.firefox=0,-1!=p.indexOf("firefox/17")?u.firefox17=1:u.firefox17=0,-1!=p.indexOf("firefox/15")?u.firefox15=1:u.firefox15=0,-1!=p.indexOf("firefox/3")?u.firefox3=1:u.firefox3=0,-1!=p.indexOf("opera")?u.opera=1:u.opera=0,-1!=p.indexOf("msie 10")?u.msie10=1:u.msie10=0,-1!=p.indexOf("msie 9")?u.msie9=1:u.msie9=0,-1!=p.indexOf("msie 8")?u.msie8=1:u.msie8=0,-1!=p.indexOf("msie 7")?u.msie7=1:u.msie7=0,-1!=p.indexOf("msie ")?u.msie=1:u.msie=0,s.biginteger_used=null;function a(t,e,i){s.biginteger_used=1,null!=t&&("number"==typeof t&&void 0===e?this.fromInt(t):"number"==typeof t?this.fromNumber(t,e,i):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}function f(){return new a(null,void 0,void 0)}"Microsoft Internet Explorer"==r?(a.prototype.am=function(t,e,i,n,o,r){for(var s=32767&e,l=e>>15;--r>=0;){var p=32767&this[t],h=this[t++]>>15,u=l*p+h*s;o=((p=s*p+((32767&u)<<15)+i[n]+(1073741823&o))>>>30)+(u>>>15)+l*h+(o>>>30),i[n++]=1073741823&p}return o},h=30):"Netscape"!=r?(a.prototype.am=function(t,e,i,n,o,r){for(;--r>=0;){var s=e*this[t++]+i[n]+o;o=Math.floor(s/67108864),i[n++]=67108863&s}return o},h=26):(a.prototype.am=function(t,e,i,n,o,r){for(var s=16383&e,l=e>>14;--r>=0;){var p=16383&this[t],h=this[t++]>>14,u=l*p+h*s;o=((p=s*p+((16383&u)<<14)+i[n]+o)>>28)+(u>>14)+l*h,i[n++]=268435455&p}return o},h=28),a.prototype.DB=h,a.prototype.DM=(1<<h)-1,a.prototype.DV=1<<h;a.prototype.FV=Math.pow(2,52),a.prototype.F1=52-h,a.prototype.F2=2*h-52;var d,P,m="0123456789abcdefghijklmnopqrstuvwxyz",c=new Array;for(d="0".charCodeAt(0),P=0;P<=9;++P)c[d++]=P;for(d="a".charCodeAt(0),P=10;P<36;++P)c[d++]=P;for(d="A".charCodeAt(0),P=10;P<36;++P)c[d++]=P;function y(t){return m.charAt(t)}function v(t,e){var i=c[t.charCodeAt(e)];return null==i?-1:i}function x(t){var e=f();return e.fromInt(t),e}function C(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}function I(t){this.m=t}function _(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function E(t,e){return t|e}function L(t,e){return t^e}function T(t,e){return t&~e}function X(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function N(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function O(){}function Y(t){return t}function S(t){this.r2=f(),this.q3=f(),a.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}I.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},I.prototype.revert=function(t){return t},I.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},I.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},I.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},_.prototype.convert=function(t){var e=f();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(a.ZERO)>0&&this.m.subTo(e,e),e},_.prototype.revert=function(t){var e=f();return t.copyTo(e),this.reduce(e),e},_.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],n=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},_.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},_.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},a.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},a.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},a.prototype.fromString=function(t,e){var i;if(16==e)i=4;else if(8==e)i=3;else if(256==e)i=8;else if(2==e)i=1;else if(32==e)i=5;else{if(4!=e)return void this.fromRadix(t,e);i=2}this.t=0,this.s=0;for(var n=t.length,o=!1,r=0;--n>=0;){var s=8==i?255&t[n]:v(t,n);s<0?"-"==t.charAt(n)&&(o=!0):(o=!1,0==r?this[this.t++]=s:r+i>this.DB?(this[this.t-1]|=(s&(1<<this.DB-r)-1)<<r,this[this.t++]=s>>this.DB-r):this[this.t-1]|=s<<r,(r+=i)>=this.DB&&(r-=this.DB))}8==i&&0!=(128&t[0])&&(this.s=-1,r>0&&(this[this.t-1]|=(1<<this.DB-r)-1<<r)),this.clamp(),o&&a.ZERO.subTo(this,this)},a.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},a.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},a.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},a.prototype.lShiftTo=function(t,e){var i,n=t%this.DB,o=this.DB-n,r=(1<<o)-1,s=Math.floor(t/this.DB),l=this.s<<n&this.DM;for(i=this.t-1;i>=0;--i)e[i+s+1]=this[i]>>o|l,l=(this[i]&r)<<n;for(i=s-1;i>=0;--i)e[i]=0;e[s]=l,e.t=this.t+s+1,e.s=this.s,e.clamp()},a.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var n=t%this.DB,o=this.DB-n,r=(1<<n)-1;e[0]=this[i]>>n;for(var s=i+1;s<this.t;++s)e[s-i-1]|=(this[s]&r)<<o,e[s-i]=this[s]>>n;n>0&&(e[this.t-i-1]|=(this.s&r)<<o),e.t=this.t-i,e.clamp()}},a.prototype.subTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]-t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n-=t[i],e[i++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[i++]=this.DV+n:n>0&&(e[i++]=n),e.t=i,e.clamp()},a.prototype.multiplyTo=function(t,e){var i=this.abs(),n=t.abs(),o=i.t;for(e.t=o+n.t;--o>=0;)e[o]=0;for(o=0;o<n.t;++o)e[o+i.t]=i.am(0,n[o],e,o,0,i.t);e.s=0,e.clamp(),this.s!=t.s&&a.ZERO.subTo(e,e)},a.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var n=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,n,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},a.prototype.divRemTo=function(t,e,i){var n=t.abs();if(!(n.t<=0)){var o=this.abs();if(o.t<n.t)return null!=e&&e.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=f());var r=f(),s=this.s,l=t.s,p=this.DB-C(n[n.t-1]);p>0?(n.lShiftTo(p,r),o.lShiftTo(p,i)):(n.copyTo(r),o.copyTo(i));var h=r.t,u=r[h-1];if(0!=u){var d=u*(1<<this.F1)+(h>1?r[h-2]>>this.F2:0),P=this.FV/d,m=(1<<this.F1)/d,c=1<<this.F2,y=i.t,v=y-h,x=null==e?f():e;for(r.dlShiftTo(v,x),i.compareTo(x)>=0&&(i[i.t++]=1,i.subTo(x,i)),a.ONE.dlShiftTo(h,x),x.subTo(r,r);r.t<h;)r[r.t++]=0;for(;--v>=0;){var I=i[--y]==u?this.DM:Math.floor(i[y]*P+(i[y-1]+c)*m);if((i[y]+=r.am(0,I,i,v,0,h))<I)for(r.dlShiftTo(v,x),i.subTo(x,i);i[y]<--I;)i.subTo(x,i)}null!=e&&(i.drShiftTo(h,e),s!=l&&a.ZERO.subTo(e,e)),i.t=h,i.clamp(),p>0&&i.rShiftTo(p,i),s<0&&a.ZERO.subTo(i,i)}}},a.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},a.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},a.prototype.exp=function(t,e){if(t>4294967295||t<1)return a.ONE;var i=f(),n=f(),o=e.convert(this),r=C(t)-1;for(o.copyTo(i);--r>=0;)if(e.sqrTo(i,n),(t&1<<r)>0)e.mulTo(n,o,i);else{var s=i;i=n,n=s}return e.revert(i)},a.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,n=(1<<e)-1,o=!1,r="",s=this.t,l=this.DB-s*this.DB%e;if(s-- >0)for(l<this.DB&&(i=this[s]>>l)>0&&(o=!0,r=y(i));s>=0;)l<e?(i=(this[s]&(1<<l)-1)<<e-l,i|=this[--s]>>(l+=this.DB-e)):(i=this[s]>>(l-=e)&n,l<=0&&(l+=this.DB,--s)),i>0&&(o=!0),o&&(r+=y(i));return o?r:"0"},a.prototype.negate=function(){var t=f();return a.ZERO.subTo(this,t),t},a.prototype.abs=function(){return this.s<0?this.negate():this},a.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},a.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+C(this[this.t-1]^this.s&this.DM)},a.prototype.mod=function(t){var e=f();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(a.ZERO)>0&&t.subTo(e,e),e},a.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new I(e):new _(e),this.exp(t,i)},a.ZERO=x(0),a.ONE=x(1),O.prototype.convert=Y,O.prototype.revert=Y,O.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},O.prototype.sqrTo=function(t,e){t.squareTo(e)},S.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=f();return t.copyTo(e),this.reduce(e),e},S.prototype.revert=function(t){return t},S.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},S.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},S.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var A=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],B=(1<<26)/A[A.length-1];a.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},a.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),i=Math.pow(t,e),n=x(i),o=f(),r=f(),s="";for(this.divRemTo(n,o,r);o.signum()>0;)s=(i+r.intValue()).toString(t).substr(1)+s,o.divRemTo(n,o,r);return r.intValue().toString(t)+s},a.prototype.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var i=this.chunkSize(e),n=Math.pow(e,i),o=!1,r=0,s=0,l=0;l<t.length;++l){var p=v(t,l);p<0?"-"==t.charAt(l)&&0==this.signum()&&(o=!0):(s=e*s+p,++r>=i&&(this.dMultiply(n),this.dAddOffset(s,0),r=0,s=0))}r>0&&(this.dMultiply(Math.pow(e,r)),this.dAddOffset(s,0)),o&&a.ZERO.subTo(this,this)},a.prototype.fromNumber=function(t,e,i){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(a.ONE.shiftLeft(t-1),E,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(a.ONE.shiftLeft(t-1),this);else{var n=new Array,o=7&t;n.length=1+(t>>3),e.nextBytes(n),o>0?n[0]&=(1<<o)-1:n[0]=0,this.fromString(n,256)}},a.prototype.bitwiseTo=function(t,e,i){var n,o,r=Math.min(t.t,this.t);for(n=0;n<r;++n)i[n]=e(this[n],t[n]);if(t.t<this.t){for(o=t.s&this.DM,n=r;n<this.t;++n)i[n]=e(this[n],o);i.t=this.t}else{for(o=this.s&this.DM,n=r;n<t.t;++n)i[n]=e(o,t[n]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},a.prototype.changeBit=function(t,e){var i=a.ONE.shiftLeft(t);return this.bitwiseTo(i,e,i),i},a.prototype.addTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]+t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n+=t[i],e[i++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[i++]=n:n<-1&&(e[i++]=this.DV+n),e.t=i,e.clamp()},a.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},a.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},a.prototype.multiplyLowerTo=function(t,e,i){var n,o=Math.min(this.t+t.t,e);for(i.s=0,i.t=o;o>0;)i[--o]=0;for(n=i.t-this.t;o<n;++o)i[o+this.t]=this.am(0,t[o],i,o,0,this.t);for(n=Math.min(t.t,e);o<n;++o)this.am(0,t[o],i,o,0,e-o);i.clamp()},a.prototype.multiplyUpperTo=function(t,e,i){--e;var n=i.t=this.t+t.t-e;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)i[this.t+n-e]=this.am(e-n,t[n],i,0,0,this.t+n-e);i.clamp(),i.drShiftTo(1,i)},a.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var n=this.t-1;n>=0;--n)i=(e*i+this[n])%t;return i},a.prototype.millerRabin=function(t){var e=this.subtract(a.ONE),i=e.getLowestSetBit();if(i<=0)return!1;var n=e.shiftRight(i);(t=t+1>>1)>A.length&&(t=A.length);for(var o=f(),r=0;r<t;++r){o.fromInt(A[Math.floor(Math.random()*A.length)]);var s=o.modPow(n,this);if(0!=s.compareTo(a.ONE)&&0!=s.compareTo(e)){for(var l=1;l++<i&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(a.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},a.prototype.clone=function(){var t=f();return this.copyTo(t),t},a.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},a.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},a.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},a.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},a.prototype.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var i,n=this.DB-t*this.DB%8,o=0;if(t-- >0)for(n<this.DB&&(i=this[t]>>n)!=(this.s&this.DM)>>n&&(e[o++]=i|this.s<<this.DB-n);t>=0;)n<8?(i=(this[t]&(1<<n)-1)<<8-n,i|=this[--t]>>(n+=this.DB-8)):(i=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==o&&(128&this.s)!=(128&i)&&++o,(o>0||i!=this.s)&&(e[o++]=i);return e},a.prototype.equals=function(t){return 0==this.compareTo(t)},a.prototype.min=function(t){return this.compareTo(t)<0?this:t},a.prototype.max=function(t){return this.compareTo(t)>0?this:t},a.prototype.and=function(t){var e=f();return this.bitwiseTo(t,g,e),e},a.prototype.or=function(t){var e=f();return this.bitwiseTo(t,E,e),e},a.prototype.xor=function(t){var e=f();return this.bitwiseTo(t,L,e),e},a.prototype.andNot=function(t){var e=f();return this.bitwiseTo(t,T,e),e},a.prototype.not=function(){for(var t=f(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},a.prototype.shiftLeft=function(t){var e=f();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},a.prototype.shiftRight=function(t){var e=f();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},a.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+X(this[t]);return this.s<0?this.t*this.DB:-1},a.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=N(this[i]^e);return t},a.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},a.prototype.setBit=function(t){return this.changeBit(t,E)},a.prototype.clearBit=function(t){return this.changeBit(t,T)},a.prototype.flipBit=function(t){return this.changeBit(t,L)},a.prototype.add=function(t){var e=f();return this.addTo(t,e),e},a.prototype.subtract=function(t){var e=f();return this.subTo(t,e),e},a.prototype.multiply=function(t){var e=f();return this.multiplyTo(t,e),e},a.prototype.divide=function(t){var e=f();return this.divRemTo(t,e,null),e},a.prototype.remainder=function(t){var e=f();return this.divRemTo(t,null,e),e},a.prototype.divideAndRemainder=function(t){var e=f(),i=f();return this.divRemTo(t,e,i),new Array(e,i)},a.prototype.modPow=function(t,e){var i,n,o=t.bitLength(),r=x(1);if(o<=0)return r;i=o<18?1:o<48?3:o<144?4:o<768?5:6,n=o<8?new I(e):e.isEven()?new S(e):new _(e);var s=new Array,l=3,p=i-1,h=(1<<i)-1;if(s[1]=n.convert(this),i>1){var u=f();for(n.sqrTo(s[1],u);l<=h;)s[l]=f(),n.mulTo(u,s[l-2],s[l]),l+=2}var a,d,P=t.t-1,m=!0,c=f();for(o=C(t[P])-1;P>=0;){for(o>=p?a=t[P]>>o-p&h:(a=(t[P]&(1<<o+1)-1)<<p-o,P>0&&(a|=t[P-1]>>this.DB+o-p)),l=i;0==(1&a);)a>>=1,--l;if((o-=l)<0&&(o+=this.DB,--P),m)s[a].copyTo(r),m=!1;else{for(;l>1;)n.sqrTo(r,c),n.sqrTo(c,r),l-=2;l>0?n.sqrTo(r,c):(d=r,r=c,c=d),n.mulTo(c,s[a],r)}for(;P>=0&&0==(t[P]&1<<o);)n.sqrTo(r,c),d=r,r=c,c=d,--o<0&&(o=this.DB-1,--P)}return n.revert(r)},a.prototype.modInverse=function(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return a.ZERO;for(var i=t.clone(),n=this.clone(),o=x(1),r=x(0),s=x(0),l=x(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),e?(o.isEven()&&r.isEven()||(o.addTo(this,o),r.subTo(t,r)),o.rShiftTo(1,o)):r.isEven()||r.subTo(t,r),r.rShiftTo(1,r);for(;n.isEven();)n.rShiftTo(1,n),e?(s.isEven()&&l.isEven()||(s.addTo(this,s),l.subTo(t,l)),s.rShiftTo(1,s)):l.isEven()||l.subTo(t,l),l.rShiftTo(1,l);i.compareTo(n)>=0?(i.subTo(n,i),e&&o.subTo(s,o),r.subTo(l,r)):(n.subTo(i,n),e&&s.subTo(o,s),l.subTo(r,l))}return 0!=n.compareTo(a.ONE)?a.ZERO:l.compareTo(t)>=0?l.subtract(t):l.signum()<0?(l.addTo(t,l),l.signum()<0?l.add(t):l):l},a.prototype.pow=function(t){return this.exp(t,new O)},a.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var n=e;e=i,i=n}var o=e.getLowestSetBit(),r=i.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),i.rShiftTo(r,i));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=i.getLowestSetBit())>0&&i.rShiftTo(o,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return r>0&&i.lShiftTo(r,i),i},a.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=A[A.length-1]){for(e=0;e<A.length;++e)if(i[0]==A[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<A.length;){for(var n=A[e],o=e+1;o<A.length&&n<B;)n*=A[o++];for(n=i.modInt(n);e<o;)if(n%A[e++]==0)return!1}return i.millerRabin(t)},a.prototype.square=function(){var t=f();return this.squareTo(t),t};var D=a;D.prototype.IsNegative=function(){return-1==this.compareTo(D.ZERO)},D.op_Equality=function(t,e){return 0==t.compareTo(e)},D.op_Inequality=function(t,e){return 0!=t.compareTo(e)},D.op_GreaterThan=function(t,e){return t.compareTo(e)>0},D.op_LessThan=function(t,e){return t.compareTo(e)<0},D.op_Addition=function(t,e){return new D(t,void 0,void 0).add(new D(e,void 0,void 0))},D.op_Subtraction=function(t,e){return new D(t,void 0,void 0).subtract(new D(e,void 0,void 0))},D.Int128Mul=function(t,e){return new D(t,void 0,void 0).multiply(new D(e,void 0,void 0))},D.op_Division=function(t,e){return t.divide(e)},D.prototype.ToDouble=function(){return parseFloat(this.toString())};var w=function(t,e){var i;if(void 0===Object.getOwnPropertyNames){for(i in e.prototype)void 0!==t.prototype[i]&&t.prototype[i]!==Object.prototype[i]||(t.prototype[i]=e.prototype[i]);for(i in e)void 0===t[i]&&(t[i]=e[i]);t.$baseCtor=e}else{for(var n=Object.getOwnPropertyNames(e.prototype),o=0;o<n.length;o++)void 0===Object.getOwnPropertyDescriptor(t.prototype,n[o])&&Object.defineProperty(t.prototype,n[o],Object.getOwnPropertyDescriptor(e.prototype,n[o]));for(i in e)void 0===t[i]&&(t[i]=e[i]);t.$baseCtor=e}};s.Path=function(){return[]},s.Path.prototype.push=Array.prototype.push,s.Paths=function(){return[]},s.Paths.prototype.push=Array.prototype.push,s.DoublePoint=function(){var t=arguments;this.X=0,this.Y=0,1===t.length?(this.X=t[0].X,this.Y=t[0].Y):2===t.length&&(this.X=t[0],this.Y=t[1])},s.DoublePoint0=function(){this.X=0,this.Y=0},s.DoublePoint0.prototype=s.DoublePoint.prototype,s.DoublePoint1=function(t){this.X=t.X,this.Y=t.Y},s.DoublePoint1.prototype=s.DoublePoint.prototype,s.DoublePoint2=function(t,e){this.X=t,this.Y=e},s.DoublePoint2.prototype=s.DoublePoint.prototype,s.PolyNode=function(){this.m_Parent=null,this.m_polygon=new s.Path,this.m_Index=0,this.m_jointype=0,this.m_endtype=0,this.m_Childs=[],this.IsOpen=!1},s.PolyNode.prototype.IsHoleNode=function(){for(var t=!0,e=this.m_Parent;null!==e;)t=!t,e=e.m_Parent;return t},s.PolyNode.prototype.ChildCount=function(){return this.m_Childs.length},s.PolyNode.prototype.Contour=function(){return this.m_polygon},s.PolyNode.prototype.AddChild=function(t){var e=this.m_Childs.length;this.m_Childs.push(t),t.m_Parent=this,t.m_Index=e},s.PolyNode.prototype.GetNext=function(){return this.m_Childs.length>0?this.m_Childs[0]:this.GetNextSiblingUp()},s.PolyNode.prototype.GetNextSiblingUp=function(){return null===this.m_Parent?null:this.m_Index===this.m_Parent.m_Childs.length-1?this.m_Parent.GetNextSiblingUp():this.m_Parent.m_Childs[this.m_Index+1]},s.PolyNode.prototype.Childs=function(){return this.m_Childs},s.PolyNode.prototype.Parent=function(){return this.m_Parent},s.PolyNode.prototype.IsHole=function(){return this.IsHoleNode()},s.PolyTree=function(){this.m_AllPolys=[],s.PolyNode.call(this)},s.PolyTree.prototype.Clear=function(){for(var t=0,e=this.m_AllPolys.length;t<e;t++)this.m_AllPolys[t]=null;this.m_AllPolys.length=0,this.m_Childs.length=0},s.PolyTree.prototype.GetFirst=function(){return this.m_Childs.length>0?this.m_Childs[0]:null},s.PolyTree.prototype.Total=function(){var t=this.m_AllPolys.length;return t>0&&this.m_Childs[0]!==this.m_AllPolys[0]&&t--,t},w(s.PolyTree,s.PolyNode),s.Math_Abs_Int64=s.Math_Abs_Int32=s.Math_Abs_Double=function(t){return Math.abs(t)},s.Math_Max_Int32_Int32=function(t,e){return Math.max(t,e)},u.msie||u.opera||u.safari?s.Cast_Int32=function(t){return 0|t}:s.Cast_Int32=function(t){return~~t},void 0===Number.toInteger&&(Number.toInteger=null),u.chrome?s.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):~~t}:u.firefox&&"function"==typeof Number.toInteger?s.Cast_Int64=function(t){return Number.toInteger(t)}:u.msie7||u.msie8?s.Cast_Int64=function(t){return parseInt(t,10)}:u.msie?s.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):0|t}:s.Cast_Int64=function(t){return t<0?Math.ceil(t):Math.floor(t)},s.Clear=function(t){t.length=0},s.PI=3.141592653589793,s.PI2=6.283185307179586,s.IntPoint=function(){var t=arguments,e=t.length;if(this.X=0,this.Y=0,s.use_xyz)if(this.Z=0,3===e)this.X=t[0],this.Y=t[1],this.Z=t[2];else if(2===e)this.X=t[0],this.Y=t[1],this.Z=0;else if(1===e)if(t[0]instanceof s.DoublePoint){var i=t[0];this.X=s.Clipper.Round(i.X),this.Y=s.Clipper.Round(i.Y),this.Z=0}else{void 0===(n=t[0]).Z&&(n.Z=0),this.X=n.X,this.Y=n.Y,this.Z=n.Z}else this.X=0,this.Y=0,this.Z=0;else if(2===e)this.X=t[0],this.Y=t[1];else if(1===e)if(t[0]instanceof s.DoublePoint){i=t[0];this.X=s.Clipper.Round(i.X),this.Y=s.Clipper.Round(i.Y)}else{var n=t[0];this.X=n.X,this.Y=n.Y}else this.X=0,this.Y=0},s.IntPoint.op_Equality=function(t,e){return t.X===e.X&&t.Y===e.Y},s.IntPoint.op_Inequality=function(t,e){return t.X!==e.X||t.Y!==e.Y},s.IntPoint0=function(){this.X=0,this.Y=0,s.use_xyz&&(this.Z=0)},s.IntPoint0.prototype=s.IntPoint.prototype,s.IntPoint1=function(t){this.X=t.X,this.Y=t.Y,s.use_xyz&&(void 0===t.Z?this.Z=0:this.Z=t.Z)},s.IntPoint1.prototype=s.IntPoint.prototype,s.IntPoint1dp=function(t){this.X=s.Clipper.Round(t.X),this.Y=s.Clipper.Round(t.Y),s.use_xyz&&(this.Z=0)},s.IntPoint1dp.prototype=s.IntPoint.prototype,s.IntPoint2=function(t,e,i){this.X=t,this.Y=e,s.use_xyz&&(this.Z=void 0===i?0:i)},s.IntPoint2.prototype=s.IntPoint.prototype,s.IntRect=function(){var t=arguments,e=t.length;if(4===e)this.left=t[0],this.top=t[1],this.right=t[2],this.bottom=t[3];else if(1===e){var i=t[0];this.left=i.left,this.top=i.top,this.right=i.right,this.bottom=i.bottom}else this.left=0,this.top=0,this.right=0,this.bottom=0},s.IntRect0=function(){this.left=0,this.top=0,this.right=0,this.bottom=0},s.IntRect0.prototype=s.IntRect.prototype,s.IntRect1=function(t){this.left=t.left,this.top=t.top,this.right=t.right,this.bottom=t.bottom},s.IntRect1.prototype=s.IntRect.prototype,s.IntRect4=function(t,e,i,n){this.left=t,this.top=e,this.right=i,this.bottom=n},s.IntRect4.prototype=s.IntRect.prototype,s.ClipType={ctIntersection:0,ctUnion:1,ctDifference:2,ctXor:3},s.PolyType={ptSubject:0,ptClip:1},s.PolyFillType={pftEvenOdd:0,pftNonZero:1,pftPositive:2,pftNegative:3},s.JoinType={jtSquare:0,jtRound:1,jtMiter:2},s.EndType={etOpenSquare:0,etOpenRound:1,etOpenButt:2,etClosedLine:3,etClosedPolygon:4},s.EdgeSide={esLeft:0,esRight:1},s.Direction={dRightToLeft:0,dLeftToRight:1},s.TEdge=function(){this.Bot=new s.IntPoint0,this.Curr=new s.IntPoint0,this.Top=new s.IntPoint0,this.Delta=new s.IntPoint0,this.Dx=0,this.PolyTyp=s.PolyType.ptSubject,this.Side=s.EdgeSide.esLeft,this.WindDelta=0,this.WindCnt=0,this.WindCnt2=0,this.OutIdx=0,this.Next=null,this.Prev=null,this.NextInLML=null,this.NextInAEL=null,this.PrevInAEL=null,this.NextInSEL=null,this.PrevInSEL=null},s.IntersectNode=function(){this.Edge1=null,this.Edge2=null,this.Pt=new s.IntPoint0},s.MyIntersectNodeSort=function(){},s.MyIntersectNodeSort.Compare=function(t,e){var i=e.Pt.Y-t.Pt.Y;return i>0?1:i<0?-1:0},s.LocalMinima=function(){this.Y=0,this.LeftBound=null,this.RightBound=null,this.Next=null},s.Scanbeam=function(){this.Y=0,this.Next=null},s.Maxima=function(){this.X=0,this.Next=null,this.Prev=null},s.OutRec=function(){this.Idx=0,this.IsHole=!1,this.IsOpen=!1,this.FirstLeft=null,this.Pts=null,this.BottomPt=null,this.PolyNode=null},s.OutPt=function(){this.Idx=0,this.Pt=new s.IntPoint0,this.Next=null,this.Prev=null},s.Join=function(){this.OutPt1=null,this.OutPt2=null,this.OffPt=new s.IntPoint0},s.ClipperBase=function(){this.m_MinimaList=null,this.m_CurrentLM=null,this.m_edges=new Array,this.m_UseFullRange=!1,this.m_HasOpenPaths=!1,this.PreserveCollinear=!1,this.m_Scanbeam=null,this.m_PolyOuts=null,this.m_ActiveEdges=null},s.ClipperBase.horizontal=-9007199254740992,s.ClipperBase.Skip=-2,s.ClipperBase.Unassigned=-1,s.ClipperBase.tolerance=1e-20,s.ClipperBase.loRange=47453132,s.ClipperBase.hiRange=0xfffffffffffff,s.ClipperBase.near_zero=function(t){return t>-s.ClipperBase.tolerance&&t<s.ClipperBase.tolerance},s.ClipperBase.IsHorizontal=function(t){return 0===t.Delta.Y},s.ClipperBase.prototype.PointIsVertex=function(t,e){var i=e;do{if(s.IntPoint.op_Equality(i.Pt,t))return!0;i=i.Next}while(i!==e);return!1},s.ClipperBase.prototype.PointOnLineSegment=function(t,e,i,n){return n?t.X===e.X&&t.Y===e.Y||t.X===i.X&&t.Y===i.Y||t.X>e.X==t.X<i.X&&t.Y>e.Y==t.Y<i.Y&&D.op_Equality(D.Int128Mul(t.X-e.X,i.Y-e.Y),D.Int128Mul(i.X-e.X,t.Y-e.Y)):t.X===e.X&&t.Y===e.Y||t.X===i.X&&t.Y===i.Y||t.X>e.X==t.X<i.X&&t.Y>e.Y==t.Y<i.Y&&(t.X-e.X)*(i.Y-e.Y)==(i.X-e.X)*(t.Y-e.Y)},s.ClipperBase.prototype.PointOnPolygon=function(t,e,i){for(var n=e;;){if(this.PointOnLineSegment(t,n.Pt,n.Next.Pt,i))return!0;if((n=n.Next)===e)break}return!1},s.ClipperBase.prototype.SlopesEqual=s.ClipperBase.SlopesEqual=function(){var t,e,i,n,o,r,l=arguments,p=l.length;return 3===p?(t=l[0],e=l[1],l[2]?D.op_Equality(D.Int128Mul(t.Delta.Y,e.Delta.X),D.Int128Mul(t.Delta.X,e.Delta.Y)):s.Cast_Int64(t.Delta.Y*e.Delta.X)===s.Cast_Int64(t.Delta.X*e.Delta.Y)):4===p?(i=l[0],n=l[1],o=l[2],l[3]?D.op_Equality(D.Int128Mul(i.Y-n.Y,n.X-o.X),D.Int128Mul(i.X-n.X,n.Y-o.Y)):s.Cast_Int64((i.Y-n.Y)*(n.X-o.X))-s.Cast_Int64((i.X-n.X)*(n.Y-o.Y))==0):(i=l[0],n=l[1],o=l[2],r=l[3],l[4]?D.op_Equality(D.Int128Mul(i.Y-n.Y,o.X-r.X),D.Int128Mul(i.X-n.X,o.Y-r.Y)):s.Cast_Int64((i.Y-n.Y)*(o.X-r.X))-s.Cast_Int64((i.X-n.X)*(o.Y-r.Y))==0)},s.ClipperBase.SlopesEqual3=function(t,e,i){return i?D.op_Equality(D.Int128Mul(t.Delta.Y,e.Delta.X),D.Int128Mul(t.Delta.X,e.Delta.Y)):s.Cast_Int64(t.Delta.Y*e.Delta.X)===s.Cast_Int64(t.Delta.X*e.Delta.Y)},s.ClipperBase.SlopesEqual4=function(t,e,i,n){return n?D.op_Equality(D.Int128Mul(t.Y-e.Y,e.X-i.X),D.Int128Mul(t.X-e.X,e.Y-i.Y)):s.Cast_Int64((t.Y-e.Y)*(e.X-i.X))-s.Cast_Int64((t.X-e.X)*(e.Y-i.Y))==0},s.ClipperBase.SlopesEqual5=function(t,e,i,n,o){return o?D.op_Equality(D.Int128Mul(t.Y-e.Y,i.X-n.X),D.Int128Mul(t.X-e.X,i.Y-n.Y)):s.Cast_Int64((t.Y-e.Y)*(i.X-n.X))-s.Cast_Int64((t.X-e.X)*(i.Y-n.Y))==0},s.ClipperBase.prototype.Clear=function(){this.DisposeLocalMinimaList();for(var t=0,e=this.m_edges.length;t<e;++t){for(var i=0,n=this.m_edges[t].length;i<n;++i)this.m_edges[t][i]=null;s.Clear(this.m_edges[t])}s.Clear(this.m_edges),this.m_UseFullRange=!1,this.m_HasOpenPaths=!1},s.ClipperBase.prototype.DisposeLocalMinimaList=function(){for(;null!==this.m_MinimaList;){var t=this.m_MinimaList.Next;this.m_MinimaList=null,this.m_MinimaList=t}this.m_CurrentLM=null},s.ClipperBase.prototype.RangeTest=function(t,e){e.Value?(t.X>s.ClipperBase.hiRange||t.Y>s.ClipperBase.hiRange||-t.X>s.ClipperBase.hiRange||-t.Y>s.ClipperBase.hiRange)&&s.Error("Coordinate outside allowed range in RangeTest()."):(t.X>s.ClipperBase.loRange||t.Y>s.ClipperBase.loRange||-t.X>s.ClipperBase.loRange||-t.Y>s.ClipperBase.loRange)&&(e.Value=!0,this.RangeTest(t,e))},s.ClipperBase.prototype.InitEdge=function(t,e,i,n){t.Next=e,t.Prev=i,t.Curr.X=n.X,t.Curr.Y=n.Y,s.use_xyz&&(t.Curr.Z=n.Z),t.OutIdx=-1},s.ClipperBase.prototype.InitEdge2=function(t,e){t.Curr.Y>=t.Next.Curr.Y?(t.Bot.X=t.Curr.X,t.Bot.Y=t.Curr.Y,s.use_xyz&&(t.Bot.Z=t.Curr.Z),t.Top.X=t.Next.Curr.X,t.Top.Y=t.Next.Curr.Y,s.use_xyz&&(t.Top.Z=t.Next.Curr.Z)):(t.Top.X=t.Curr.X,t.Top.Y=t.Curr.Y,s.use_xyz&&(t.Top.Z=t.Curr.Z),t.Bot.X=t.Next.Curr.X,t.Bot.Y=t.Next.Curr.Y,s.use_xyz&&(t.Bot.Z=t.Next.Curr.Z)),this.SetDx(t),t.PolyTyp=e},s.ClipperBase.prototype.FindNextLocMin=function(t){for(var e;;){for(;s.IntPoint.op_Inequality(t.Bot,t.Prev.Bot)||s.IntPoint.op_Equality(t.Curr,t.Top);)t=t.Next;if(t.Dx!==s.ClipperBase.horizontal&&t.Prev.Dx!==s.ClipperBase.horizontal)break;for(;t.Prev.Dx===s.ClipperBase.horizontal;)t=t.Prev;for(e=t;t.Dx===s.ClipperBase.horizontal;)t=t.Next;if(t.Top.Y!==t.Prev.Bot.Y){e.Prev.Bot.X<t.Bot.X&&(t=e);break}}return t},s.ClipperBase.prototype.ProcessBound=function(t,e){var i,n,o=t;if(o.OutIdx===s.ClipperBase.Skip){if(t=o,e){for(;t.Top.Y===t.Next.Bot.Y;)t=t.Next;for(;t!==o&&t.Dx===s.ClipperBase.horizontal;)t=t.Prev}else{for(;t.Top.Y===t.Prev.Bot.Y;)t=t.Prev;for(;t!==o&&t.Dx===s.ClipperBase.horizontal;)t=t.Next}if(t===o)o=e?t.Next:t.Prev;else{t=e?o.Next:o.Prev;var r=new s.LocalMinima;r.Next=null,r.Y=t.Bot.Y,r.LeftBound=null,r.RightBound=t,t.WindDelta=0,o=this.ProcessBound(t,e),this.InsertLocalMinima(r)}return o}if(t.Dx===s.ClipperBase.horizontal&&((i=e?t.Prev:t.Next).Dx===s.ClipperBase.horizontal?i.Bot.X!==t.Bot.X&&i.Top.X!==t.Bot.X&&this.ReverseHorizontal(t):i.Bot.X!==t.Bot.X&&this.ReverseHorizontal(t)),i=t,e){for(;o.Top.Y===o.Next.Bot.Y&&o.Next.OutIdx!==s.ClipperBase.Skip;)o=o.Next;if(o.Dx===s.ClipperBase.horizontal&&o.Next.OutIdx!==s.ClipperBase.Skip){for(n=o;n.Prev.Dx===s.ClipperBase.horizontal;)n=n.Prev;n.Prev.Top.X>o.Next.Top.X&&(o=n.Prev)}for(;t!==o;)t.NextInLML=t.Next,t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),t=t.Next;t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),o=o.Next}else{for(;o.Top.Y===o.Prev.Bot.Y&&o.Prev.OutIdx!==s.ClipperBase.Skip;)o=o.Prev;if(o.Dx===s.ClipperBase.horizontal&&o.Prev.OutIdx!==s.ClipperBase.Skip){for(n=o;n.Next.Dx===s.ClipperBase.horizontal;)n=n.Next;(n.Next.Top.X===o.Prev.Top.X||n.Next.Top.X>o.Prev.Top.X)&&(o=n.Next)}for(;t!==o;)t.NextInLML=t.Prev,t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),t=t.Prev;t.Dx===s.ClipperBase.horizontal&&t!==i&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),o=o.Prev}return o},s.ClipperBase.prototype.AddPath=function(t,e,i){s.use_lines?i||e!==s.PolyType.ptClip||s.Error("AddPath: Open paths must be subject."):i||s.Error("AddPath: Open paths have been disabled.");var n=t.length-1;if(i)for(;n>0&&s.IntPoint.op_Equality(t[n],t[0]);)--n;for(;n>0&&s.IntPoint.op_Equality(t[n],t[n-1]);)--n;if(i&&n<2||!i&&n<1)return!1;for(var o=new Array,r=0;r<=n;r++)o.push(new s.TEdge);var l=!0;o[1].Curr.X=t[1].X,o[1].Curr.Y=t[1].Y,s.use_xyz&&(o[1].Curr.Z=t[1].Z);var p={Value:this.m_UseFullRange};this.RangeTest(t[0],p),this.m_UseFullRange=p.Value,p.Value=this.m_UseFullRange,this.RangeTest(t[n],p),this.m_UseFullRange=p.Value,this.InitEdge(o[0],o[1],o[n],t[0]),this.InitEdge(o[n],o[0],o[n-1],t[n]);for(r=n-1;r>=1;--r)p.Value=this.m_UseFullRange,this.RangeTest(t[r],p),this.m_UseFullRange=p.Value,this.InitEdge(o[r],o[r+1],o[r-1],t[r]);for(var h,u=o[0],a=u,f=u;;)if(a.Curr!==a.Next.Curr||!i&&a.Next===u){if(a.Prev===a.Next)break;if(!i||!s.ClipperBase.SlopesEqual4(a.Prev.Curr,a.Curr,a.Next.Curr,this.m_UseFullRange)||this.PreserveCollinear&&this.Pt2IsBetweenPt1AndPt3(a.Prev.Curr,a.Curr,a.Next.Curr)){if((a=a.Next)===f||!i&&a.Next===u)break}else a===u&&(u=a.Next),f=a=(a=this.RemoveEdge(a)).Prev}else{if(a===a.Next)break;a===u&&(u=a.Next),f=a=this.RemoveEdge(a)}if(!i&&a===a.Next||i&&a.Prev===a.Next)return!1;i||(this.m_HasOpenPaths=!0,u.Prev.OutIdx=s.ClipperBase.Skip),a=u;do{this.InitEdge2(a,e),a=a.Next,l&&a.Curr.Y!==u.Curr.Y&&(l=!1)}while(a!==u);if(l){if(i)return!1;for(a.Prev.OutIdx=s.ClipperBase.Skip,(P=new s.LocalMinima).Next=null,P.Y=a.Bot.Y,P.LeftBound=null,P.RightBound=a,P.RightBound.Side=s.EdgeSide.esRight,P.RightBound.WindDelta=0;a.Bot.X!==a.Prev.Top.X&&this.ReverseHorizontal(a),a.Next.OutIdx!==s.ClipperBase.Skip;)a.NextInLML=a.Next,a=a.Next;return this.InsertLocalMinima(P),this.m_edges.push(o),!0}this.m_edges.push(o);var d=null;for(s.IntPoint.op_Equality(a.Prev.Bot,a.Prev.Top)&&(a=a.Next);(a=this.FindNextLocMin(a))!==d;){var P;null===d&&(d=a),(P=new s.LocalMinima).Next=null,P.Y=a.Bot.Y,a.Dx<a.Prev.Dx?(P.LeftBound=a.Prev,P.RightBound=a,h=!1):(P.LeftBound=a,P.RightBound=a.Prev,h=!0),P.LeftBound.Side=s.EdgeSide.esLeft,P.RightBound.Side=s.EdgeSide.esRight,i?P.LeftBound.Next===P.RightBound?P.LeftBound.WindDelta=-1:P.LeftBound.WindDelta=1:P.LeftBound.WindDelta=0,P.RightBound.WindDelta=-P.LeftBound.WindDelta,(a=this.ProcessBound(P.LeftBound,h)).OutIdx===s.ClipperBase.Skip&&(a=this.ProcessBound(a,h));var m=this.ProcessBound(P.RightBound,!h);m.OutIdx===s.ClipperBase.Skip&&(m=this.ProcessBound(m,!h)),P.LeftBound.OutIdx===s.ClipperBase.Skip?P.LeftBound=null:P.RightBound.OutIdx===s.ClipperBase.Skip&&(P.RightBound=null),this.InsertLocalMinima(P),h||(a=m)}return!0},s.ClipperBase.prototype.AddPaths=function(t,e,i){for(var n=!1,o=0,r=t.length;o<r;++o)this.AddPath(t[o],e,i)&&(n=!0);return n},s.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3=function(t,e,i){return!(s.IntPoint.op_Equality(t,i)||s.IntPoint.op_Equality(t,e)||s.IntPoint.op_Equality(i,e))&&(t.X!==i.X?e.X>t.X==e.X<i.X:e.Y>t.Y==e.Y<i.Y)},s.ClipperBase.prototype.RemoveEdge=function(t){t.Prev.Next=t.Next,t.Next.Prev=t.Prev;var e=t.Next;return t.Prev=null,e},s.ClipperBase.prototype.SetDx=function(t){t.Delta.X=t.Top.X-t.Bot.X,t.Delta.Y=t.Top.Y-t.Bot.Y,0===t.Delta.Y?t.Dx=s.ClipperBase.horizontal:t.Dx=t.Delta.X/t.Delta.Y},s.ClipperBase.prototype.InsertLocalMinima=function(t){if(null===this.m_MinimaList)this.m_MinimaList=t;else if(t.Y>=this.m_MinimaList.Y)t.Next=this.m_MinimaList,this.m_MinimaList=t;else{for(var e=this.m_MinimaList;null!==e.Next&&t.Y<e.Next.Y;)e=e.Next;t.Next=e.Next,e.Next=t}},s.ClipperBase.prototype.PopLocalMinima=function(t,e){return e.v=this.m_CurrentLM,null!==this.m_CurrentLM&&this.m_CurrentLM.Y===t&&(this.m_CurrentLM=this.m_CurrentLM.Next,!0)},s.ClipperBase.prototype.ReverseHorizontal=function(t){var e=t.Top.X;t.Top.X=t.Bot.X,t.Bot.X=e,s.use_xyz&&(e=t.Top.Z,t.Top.Z=t.Bot.Z,t.Bot.Z=e)},s.ClipperBase.prototype.Reset=function(){if(this.m_CurrentLM=this.m_MinimaList,null!==this.m_CurrentLM){this.m_Scanbeam=null;for(var t=this.m_MinimaList;null!==t;){this.InsertScanbeam(t.Y);var e=t.LeftBound;null!==e&&(e.Curr.X=e.Bot.X,e.Curr.Y=e.Bot.Y,s.use_xyz&&(e.Curr.Z=e.Bot.Z),e.OutIdx=s.ClipperBase.Unassigned),null!==(e=t.RightBound)&&(e.Curr.X=e.Bot.X,e.Curr.Y=e.Bot.Y,s.use_xyz&&(e.Curr.Z=e.Bot.Z),e.OutIdx=s.ClipperBase.Unassigned),t=t.Next}this.m_ActiveEdges=null}},s.ClipperBase.prototype.InsertScanbeam=function(t){if(null===this.m_Scanbeam)this.m_Scanbeam=new s.Scanbeam,this.m_Scanbeam.Next=null,this.m_Scanbeam.Y=t;else if(t>this.m_Scanbeam.Y){var e=new s.Scanbeam;e.Y=t,e.Next=this.m_Scanbeam,this.m_Scanbeam=e}else{for(var i=this.m_Scanbeam;null!==i.Next&&t<=i.Next.Y;)i=i.Next;if(t===i.Y)return;var n=new s.Scanbeam;n.Y=t,n.Next=i.Next,i.Next=n}},s.ClipperBase.prototype.PopScanbeam=function(t){return null===this.m_Scanbeam?(t.v=0,!1):(t.v=this.m_Scanbeam.Y,this.m_Scanbeam=this.m_Scanbeam.Next,!0)},s.ClipperBase.prototype.LocalMinimaPending=function(){return null!==this.m_CurrentLM},s.ClipperBase.prototype.CreateOutRec=function(){var t=new s.OutRec;return t.Idx=s.ClipperBase.Unassigned,t.IsHole=!1,t.IsOpen=!1,t.FirstLeft=null,t.Pts=null,t.BottomPt=null,t.PolyNode=null,this.m_PolyOuts.push(t),t.Idx=this.m_PolyOuts.length-1,t},s.ClipperBase.prototype.DisposeOutRec=function(t){var e=this.m_PolyOuts[t];e.Pts=null,e=null,this.m_PolyOuts[t]=null},s.ClipperBase.prototype.UpdateEdgeIntoAEL=function(t){null===t.NextInLML&&s.Error("UpdateEdgeIntoAEL: invalid call");var e=t.PrevInAEL,i=t.NextInAEL;return t.NextInLML.OutIdx=t.OutIdx,null!==e?e.NextInAEL=t.NextInLML:this.m_ActiveEdges=t.NextInLML,null!==i&&(i.PrevInAEL=t.NextInLML),t.NextInLML.Side=t.Side,t.NextInLML.WindDelta=t.WindDelta,t.NextInLML.WindCnt=t.WindCnt,t.NextInLML.WindCnt2=t.WindCnt2,(t=t.NextInLML).Curr.X=t.Bot.X,t.Curr.Y=t.Bot.Y,t.PrevInAEL=e,t.NextInAEL=i,s.ClipperBase.IsHorizontal(t)||this.InsertScanbeam(t.Top.Y),t},s.ClipperBase.prototype.SwapPositionsInAEL=function(t,e){if(t.NextInAEL!==t.PrevInAEL&&e.NextInAEL!==e.PrevInAEL){if(t.NextInAEL===e){var i=e.NextInAEL;null!==i&&(i.PrevInAEL=t);var n=t.PrevInAEL;null!==n&&(n.NextInAEL=e),e.PrevInAEL=n,e.NextInAEL=t,t.PrevInAEL=e,t.NextInAEL=i}else if(e.NextInAEL===t){var o=t.NextInAEL;null!==o&&(o.PrevInAEL=e);var r=e.PrevInAEL;null!==r&&(r.NextInAEL=t),t.PrevInAEL=r,t.NextInAEL=e,e.PrevInAEL=t,e.NextInAEL=o}else{var s=t.NextInAEL,l=t.PrevInAEL;t.NextInAEL=e.NextInAEL,null!==t.NextInAEL&&(t.NextInAEL.PrevInAEL=t),t.PrevInAEL=e.PrevInAEL,null!==t.PrevInAEL&&(t.PrevInAEL.NextInAEL=t),e.NextInAEL=s,null!==e.NextInAEL&&(e.NextInAEL.PrevInAEL=e),e.PrevInAEL=l,null!==e.PrevInAEL&&(e.PrevInAEL.NextInAEL=e)}null===t.PrevInAEL?this.m_ActiveEdges=t:null===e.PrevInAEL&&(this.m_ActiveEdges=e)}},s.ClipperBase.prototype.DeleteFromAEL=function(t){var e=t.PrevInAEL,i=t.NextInAEL;null===e&&null===i&&t!==this.m_ActiveEdges||(null!==e?e.NextInAEL=i:this.m_ActiveEdges=i,null!==i&&(i.PrevInAEL=e),t.NextInAEL=null,t.PrevInAEL=null)},s.Clipper=function(t){void 0===t&&(t=0),this.m_PolyOuts=null,this.m_ClipType=s.ClipType.ctIntersection,this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=null,this.m_IntersectNodeComparer=null,this.m_ExecuteLocked=!1,this.m_ClipFillType=s.PolyFillType.pftEvenOdd,this.m_SubjFillType=s.PolyFillType.pftEvenOdd,this.m_Joins=null,this.m_GhostJoins=null,this.m_UsingPolyTree=!1,this.ReverseSolution=!1,this.StrictlySimple=!1,s.ClipperBase.call(this),this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=new Array,this.m_IntersectNodeComparer=s.MyIntersectNodeSort.Compare,this.m_ExecuteLocked=!1,this.m_UsingPolyTree=!1,this.m_PolyOuts=new Array,this.m_Joins=new Array,this.m_GhostJoins=new Array,this.ReverseSolution=0!=(1&t),this.StrictlySimple=0!=(2&t),this.PreserveCollinear=0!=(4&t),s.use_xyz&&(this.ZFillFunction=null)},s.Clipper.ioReverseSolution=1,s.Clipper.ioStrictlySimple=2,s.Clipper.ioPreserveCollinear=4,s.Clipper.prototype.Clear=function(){0!==this.m_edges.length&&(this.DisposeAllPolyPts(),s.ClipperBase.prototype.Clear.call(this))},s.Clipper.prototype.InsertMaxima=function(t){var e=new s.Maxima;if(e.X=t,null===this.m_Maxima)this.m_Maxima=e,this.m_Maxima.Next=null,this.m_Maxima.Prev=null;else if(t<this.m_Maxima.X)e.Next=this.m_Maxima,e.Prev=null,this.m_Maxima=e;else{for(var i=this.m_Maxima;null!==i.Next&&t>=i.Next.X;)i=i.Next;if(t===i.X)return;e.Next=i.Next,e.Prev=i,null!==i.Next&&(i.Next.Prev=e),i.Next=e}},s.Clipper.prototype.Execute=function(){var t=arguments,e=t.length,i=t[1]instanceof s.PolyTree;if(4===e&&!i){var n=t[0],o=t[1],r=t[2],l=t[3];if(this.m_ExecuteLocked)return!1;this.m_HasOpenPaths&&s.Error("Error: PolyTree struct is needed for open path clipping."),this.m_ExecuteLocked=!0,s.Clear(o),this.m_SubjFillType=r,this.m_ClipFillType=l,this.m_ClipType=n,this.m_UsingPolyTree=!1;try{(h=this.ExecuteInternal())&&this.BuildResult(o)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return h}if(4===e&&i){n=t[0];var p=t[1];r=t[2],l=t[3];if(this.m_ExecuteLocked)return!1;this.m_ExecuteLocked=!0,this.m_SubjFillType=r,this.m_ClipFillType=l,this.m_ClipType=n,this.m_UsingPolyTree=!0;try{var h;(h=this.ExecuteInternal())&&this.BuildResult2(p)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return h}if(2===e&&!i){n=t[0],o=t[1];return this.Execute(n,o,s.PolyFillType.pftEvenOdd,s.PolyFillType.pftEvenOdd)}if(2===e&&i){n=t[0],p=t[1];return this.Execute(n,p,s.PolyFillType.pftEvenOdd,s.PolyFillType.pftEvenOdd)}},s.Clipper.prototype.FixHoleLinkage=function(t){if(null!==t.FirstLeft&&(t.IsHole===t.FirstLeft.IsHole||null===t.FirstLeft.Pts)){for(var e=t.FirstLeft;null!==e&&(e.IsHole===t.IsHole||null===e.Pts);)e=e.FirstLeft;t.FirstLeft=e}},s.Clipper.prototype.ExecuteInternal=function(){try{this.Reset(),this.m_SortedEdges=null,this.m_Maxima=null;var t,e,i,n={},o={};if(!this.PopScanbeam(n))return!1;for(this.InsertLocalMinimaIntoAEL(n.v);this.PopScanbeam(o)||this.LocalMinimaPending();){if(this.ProcessHorizontals(),this.m_GhostJoins.length=0,!this.ProcessIntersections(o.v))return!1;this.ProcessEdgesAtTopOfScanbeam(o.v),n.v=o.v,this.InsertLocalMinimaIntoAEL(n.v)}for(e=0,i=this.m_PolyOuts.length;e<i;e++)null===(t=this.m_PolyOuts[e]).Pts||t.IsOpen||(t.IsHole^this.ReverseSolution)==this.Area$1(t)>0&&this.ReversePolyPtLinks(t.Pts);for(this.JoinCommonEdges(),e=0,i=this.m_PolyOuts.length;e<i;e++)null!==(t=this.m_PolyOuts[e]).Pts&&(t.IsOpen?this.FixupOutPolyline(t):this.FixupOutPolygon(t));return this.StrictlySimple&&this.DoSimplePolygons(),!0}finally{this.m_Joins.length=0,this.m_GhostJoins.length=0}},s.Clipper.prototype.DisposeAllPolyPts=function(){for(var t=0,e=this.m_PolyOuts.length;t<e;++t)this.DisposeOutRec(t);s.Clear(this.m_PolyOuts)},s.Clipper.prototype.AddJoin=function(t,e,i){var n=new s.Join;n.OutPt1=t,n.OutPt2=e,n.OffPt.X=i.X,n.OffPt.Y=i.Y,s.use_xyz&&(n.OffPt.Z=i.Z),this.m_Joins.push(n)},s.Clipper.prototype.AddGhostJoin=function(t,e){var i=new s.Join;i.OutPt1=t,i.OffPt.X=e.X,i.OffPt.Y=e.Y,s.use_xyz&&(i.OffPt.Z=e.Z),this.m_GhostJoins.push(i)},s.Clipper.prototype.SetZ=function(t,e,i){if(null!==this.ZFillFunction){if(0!==t.Z||null===this.ZFillFunction)return;s.IntPoint.op_Equality(t,e.Bot)?t.Z=e.Bot.Z:s.IntPoint.op_Equality(t,e.Top)?t.Z=e.Top.Z:s.IntPoint.op_Equality(t,i.Bot)?t.Z=i.Bot.Z:s.IntPoint.op_Equality(t,i.Top)?t.Z=i.Top.Z:this.ZFillFunction(e.Bot,e.Top,i.Bot,i.Top,t)}},s.Clipper.prototype.InsertLocalMinimaIntoAEL=function(t){for(var e,i,n={};this.PopLocalMinima(t,n);){e=n.v.LeftBound,i=n.v.RightBound;var o=null;if(null===e?(this.InsertEdgeIntoAEL(i,null),this.SetWindingCount(i),this.IsContributing(i)&&(o=this.AddOutPt(i,i.Bot))):null===i?(this.InsertEdgeIntoAEL(e,null),this.SetWindingCount(e),this.IsContributing(e)&&(o=this.AddOutPt(e,e.Bot)),this.InsertScanbeam(e.Top.Y)):(this.InsertEdgeIntoAEL(e,null),this.InsertEdgeIntoAEL(i,e),this.SetWindingCount(e),i.WindCnt=e.WindCnt,i.WindCnt2=e.WindCnt2,this.IsContributing(e)&&(o=this.AddLocalMinPoly(e,i,e.Bot)),this.InsertScanbeam(e.Top.Y)),null!==i&&(s.ClipperBase.IsHorizontal(i)?(null!==i.NextInLML&&this.InsertScanbeam(i.NextInLML.Top.Y),this.AddEdgeToSEL(i)):this.InsertScanbeam(i.Top.Y)),null!==e&&null!==i){if(null!==o&&s.ClipperBase.IsHorizontal(i)&&this.m_GhostJoins.length>0&&0!==i.WindDelta)for(var r=0,l=this.m_GhostJoins.length;r<l;r++){var p=this.m_GhostJoins[r];this.HorzSegmentsOverlap(p.OutPt1.Pt.X,p.OffPt.X,i.Bot.X,i.Top.X)&&this.AddJoin(p.OutPt1,o,p.OffPt)}if(e.OutIdx>=0&&null!==e.PrevInAEL&&e.PrevInAEL.Curr.X===e.Bot.X&&e.PrevInAEL.OutIdx>=0&&s.ClipperBase.SlopesEqual5(e.PrevInAEL.Curr,e.PrevInAEL.Top,e.Curr,e.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==e.PrevInAEL.WindDelta){var h=this.AddOutPt(e.PrevInAEL,e.Bot);this.AddJoin(o,h,e.Top)}if(e.NextInAEL!==i){if(i.OutIdx>=0&&i.PrevInAEL.OutIdx>=0&&s.ClipperBase.SlopesEqual5(i.PrevInAEL.Curr,i.PrevInAEL.Top,i.Curr,i.Top,this.m_UseFullRange)&&0!==i.WindDelta&&0!==i.PrevInAEL.WindDelta){h=this.AddOutPt(i.PrevInAEL,i.Bot);this.AddJoin(o,h,i.Top)}var u=e.NextInAEL;if(null!==u)for(;u!==i;)this.IntersectEdges(i,u,e.Curr),u=u.NextInAEL}}}},s.Clipper.prototype.InsertEdgeIntoAEL=function(t,e){if(null===this.m_ActiveEdges)t.PrevInAEL=null,t.NextInAEL=null,this.m_ActiveEdges=t;else if(null===e&&this.E2InsertsBeforeE1(this.m_ActiveEdges,t))t.PrevInAEL=null,t.NextInAEL=this.m_ActiveEdges,this.m_ActiveEdges.PrevInAEL=t,this.m_ActiveEdges=t;else{for(null===e&&(e=this.m_ActiveEdges);null!==e.NextInAEL&&!this.E2InsertsBeforeE1(e.NextInAEL,t);)e=e.NextInAEL;t.NextInAEL=e.NextInAEL,null!==e.NextInAEL&&(e.NextInAEL.PrevInAEL=t),t.PrevInAEL=e,e.NextInAEL=t}},s.Clipper.prototype.E2InsertsBeforeE1=function(t,e){return e.Curr.X===t.Curr.X?e.Top.Y>t.Top.Y?e.Top.X<s.Clipper.TopX(t,e.Top.Y):t.Top.X>s.Clipper.TopX(e,t.Top.Y):e.Curr.X<t.Curr.X},s.Clipper.prototype.IsEvenOddFillType=function(t){return t.PolyTyp===s.PolyType.ptSubject?this.m_SubjFillType===s.PolyFillType.pftEvenOdd:this.m_ClipFillType===s.PolyFillType.pftEvenOdd},s.Clipper.prototype.IsEvenOddAltFillType=function(t){return t.PolyTyp===s.PolyType.ptSubject?this.m_ClipFillType===s.PolyFillType.pftEvenOdd:this.m_SubjFillType===s.PolyFillType.pftEvenOdd},s.Clipper.prototype.IsContributing=function(t){var e,i;switch(t.PolyTyp===s.PolyType.ptSubject?(e=this.m_SubjFillType,i=this.m_ClipFillType):(e=this.m_ClipFillType,i=this.m_SubjFillType),e){case s.PolyFillType.pftEvenOdd:if(0===t.WindDelta&&1!==t.WindCnt)return!1;break;case s.PolyFillType.pftNonZero:if(1!==Math.abs(t.WindCnt))return!1;break;case s.PolyFillType.pftPositive:if(1!==t.WindCnt)return!1;break;default:if(-1!==t.WindCnt)return!1}switch(this.m_ClipType){case s.ClipType.ctIntersection:switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case s.ClipType.ctUnion:switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0===t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}case s.ClipType.ctDifference:if(t.PolyTyp===s.PolyType.ptSubject)switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0===t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}else switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case s.ClipType.ctXor:if(0!==t.WindDelta)return!0;switch(i){case s.PolyFillType.pftEvenOdd:case s.PolyFillType.pftNonZero:return 0===t.WindCnt2;case s.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}}return!0},s.Clipper.prototype.SetWindingCount=function(t){for(var e=t.PrevInAEL;null!==e&&(e.PolyTyp!==t.PolyTyp||0===e.WindDelta);)e=e.PrevInAEL;if(null===e){var i=t.PolyTyp===s.PolyType.ptSubject?this.m_SubjFillType:this.m_ClipFillType;0===t.WindDelta?t.WindCnt=i===s.PolyFillType.pftNegative?-1:1:t.WindCnt=t.WindDelta,t.WindCnt2=0,e=this.m_ActiveEdges}else if(0===t.WindDelta&&this.m_ClipType!==s.ClipType.ctUnion)t.WindCnt=1,t.WindCnt2=e.WindCnt2,e=e.NextInAEL;else if(this.IsEvenOddFillType(t)){if(0===t.WindDelta){for(var n=!0,o=e.PrevInAEL;null!==o;)o.PolyTyp===e.PolyTyp&&0!==o.WindDelta&&(n=!n),o=o.PrevInAEL;t.WindCnt=n?0:1}else t.WindCnt=t.WindDelta;t.WindCnt2=e.WindCnt2,e=e.NextInAEL}else e.WindCnt*e.WindDelta<0?Math.abs(e.WindCnt)>1?e.WindDelta*t.WindDelta<0?t.WindCnt=e.WindCnt:t.WindCnt=e.WindCnt+t.WindDelta:t.WindCnt=0===t.WindDelta?1:t.WindDelta:0===t.WindDelta?t.WindCnt=e.WindCnt<0?e.WindCnt-1:e.WindCnt+1:e.WindDelta*t.WindDelta<0?t.WindCnt=e.WindCnt:t.WindCnt=e.WindCnt+t.WindDelta,t.WindCnt2=e.WindCnt2,e=e.NextInAEL;if(this.IsEvenOddAltFillType(t))for(;e!==t;)0!==e.WindDelta&&(t.WindCnt2=0===t.WindCnt2?1:0),e=e.NextInAEL;else for(;e!==t;)t.WindCnt2+=e.WindDelta,e=e.NextInAEL},s.Clipper.prototype.AddEdgeToSEL=function(t){null===this.m_SortedEdges?(this.m_SortedEdges=t,t.PrevInSEL=null,t.NextInSEL=null):(t.NextInSEL=this.m_SortedEdges,t.PrevInSEL=null,this.m_SortedEdges.PrevInSEL=t,this.m_SortedEdges=t)},s.Clipper.prototype.PopEdgeFromSEL=function(t){if(t.v=this.m_SortedEdges,null===t.v)return!1;var e=t.v;return this.m_SortedEdges=t.v.NextInSEL,null!==this.m_SortedEdges&&(this.m_SortedEdges.PrevInSEL=null),e.NextInSEL=null,e.PrevInSEL=null,!0},s.Clipper.prototype.CopyAELToSEL=function(){var t=this.m_ActiveEdges;for(this.m_SortedEdges=t;null!==t;)t.PrevInSEL=t.PrevInAEL,t.NextInSEL=t.NextInAEL,t=t.NextInAEL},s.Clipper.prototype.SwapPositionsInSEL=function(t,e){if(!(null===t.NextInSEL&&null===t.PrevInSEL||null===e.NextInSEL&&null===e.PrevInSEL)){if(t.NextInSEL===e)null!==(i=e.NextInSEL)&&(i.PrevInSEL=t),null!==(n=t.PrevInSEL)&&(n.NextInSEL=e),e.PrevInSEL=n,e.NextInSEL=t,t.PrevInSEL=e,t.NextInSEL=i;else if(e.NextInSEL===t){null!==(i=t.NextInSEL)&&(i.PrevInSEL=e),null!==(n=e.PrevInSEL)&&(n.NextInSEL=t),t.PrevInSEL=n,t.NextInSEL=e,e.PrevInSEL=t,e.NextInSEL=i}else{var i=t.NextInSEL,n=t.PrevInSEL;t.NextInSEL=e.NextInSEL,null!==t.NextInSEL&&(t.NextInSEL.PrevInSEL=t),t.PrevInSEL=e.PrevInSEL,null!==t.PrevInSEL&&(t.PrevInSEL.NextInSEL=t),e.NextInSEL=i,null!==e.NextInSEL&&(e.NextInSEL.PrevInSEL=e),e.PrevInSEL=n,null!==e.PrevInSEL&&(e.PrevInSEL.NextInSEL=e)}null===t.PrevInSEL?this.m_SortedEdges=t:null===e.PrevInSEL&&(this.m_SortedEdges=e)}},s.Clipper.prototype.AddLocalMaxPoly=function(t,e,i){this.AddOutPt(t,i),0===e.WindDelta&&this.AddOutPt(e,i),t.OutIdx===e.OutIdx?(t.OutIdx=-1,e.OutIdx=-1):t.OutIdx<e.OutIdx?this.AppendPolygon(t,e):this.AppendPolygon(e,t)},s.Clipper.prototype.AddLocalMinPoly=function(t,e,i){var n,o,r;if(s.ClipperBase.IsHorizontal(e)||t.Dx>e.Dx?(n=this.AddOutPt(t,i),e.OutIdx=t.OutIdx,t.Side=s.EdgeSide.esLeft,e.Side=s.EdgeSide.esRight,r=(o=t).PrevInAEL===e?e.PrevInAEL:o.PrevInAEL):(n=this.AddOutPt(e,i),t.OutIdx=e.OutIdx,t.Side=s.EdgeSide.esRight,e.Side=s.EdgeSide.esLeft,r=(o=e).PrevInAEL===t?t.PrevInAEL:o.PrevInAEL),null!==r&&r.OutIdx>=0&&r.Top.Y<i.Y&&o.Top.Y<i.Y){var l=s.Clipper.TopX(r,i.Y),p=s.Clipper.TopX(o,i.Y);if(l===p&&0!==o.WindDelta&&0!==r.WindDelta&&s.ClipperBase.SlopesEqual5(new s.IntPoint2(l,i.Y),r.Top,new s.IntPoint2(p,i.Y),o.Top,this.m_UseFullRange)){var h=this.AddOutPt(r,i);this.AddJoin(n,h,o.Top)}}return n},s.Clipper.prototype.AddOutPt=function(t,e){if(t.OutIdx<0){(n=this.CreateOutRec()).IsOpen=0===t.WindDelta;var i=new s.OutPt;return n.Pts=i,i.Idx=n.Idx,i.Pt.X=e.X,i.Pt.Y=e.Y,s.use_xyz&&(i.Pt.Z=e.Z),i.Next=i,i.Prev=i,n.IsOpen||this.SetHoleState(t,n),t.OutIdx=n.Idx,i}var n,o=(n=this.m_PolyOuts[t.OutIdx]).Pts,r=t.Side===s.EdgeSide.esLeft;return r&&s.IntPoint.op_Equality(e,o.Pt)?o:!r&&s.IntPoint.op_Equality(e,o.Prev.Pt)?o.Prev:((i=new s.OutPt).Idx=n.Idx,i.Pt.X=e.X,i.Pt.Y=e.Y,s.use_xyz&&(i.Pt.Z=e.Z),i.Next=o,i.Prev=o.Prev,i.Prev.Next=i,o.Prev=i,r&&(n.Pts=i),i)},s.Clipper.prototype.GetLastOutPt=function(t){var e=this.m_PolyOuts[t.OutIdx];return t.Side===s.EdgeSide.esLeft?e.Pts:e.Pts.Prev},s.Clipper.prototype.SwapPoints=function(t,e){var i=new s.IntPoint1(t.Value);t.Value.X=e.Value.X,t.Value.Y=e.Value.Y,s.use_xyz&&(t.Value.Z=e.Value.Z),e.Value.X=i.X,e.Value.Y=i.Y,s.use_xyz&&(e.Value.Z=i.Z)},s.Clipper.prototype.HorzSegmentsOverlap=function(t,e,i,n){var o;return t>e&&(o=t,t=e,e=o),i>n&&(o=i,i=n,n=o),t<n&&i<e},s.Clipper.prototype.SetHoleState=function(t,e){for(var i=t.PrevInAEL,n=null;null!==i;)i.OutIdx>=0&&0!==i.WindDelta&&(null===n?n=i:n.OutIdx===i.OutIdx&&(n=null)),i=i.PrevInAEL;null===n?(e.FirstLeft=null,e.IsHole=!1):(e.FirstLeft=this.m_PolyOuts[n.OutIdx],e.IsHole=!e.FirstLeft.IsHole)},s.Clipper.prototype.GetDx=function(t,e){return t.Y===e.Y?s.ClipperBase.horizontal:(e.X-t.X)/(e.Y-t.Y)},s.Clipper.prototype.FirstIsBottomPt=function(t,e){for(var i=t.Prev;s.IntPoint.op_Equality(i.Pt,t.Pt)&&i!==t;)i=i.Prev;var n=Math.abs(this.GetDx(t.Pt,i.Pt));for(i=t.Next;s.IntPoint.op_Equality(i.Pt,t.Pt)&&i!==t;)i=i.Next;var o=Math.abs(this.GetDx(t.Pt,i.Pt));for(i=e.Prev;s.IntPoint.op_Equality(i.Pt,e.Pt)&&i!==e;)i=i.Prev;var r=Math.abs(this.GetDx(e.Pt,i.Pt));for(i=e.Next;s.IntPoint.op_Equality(i.Pt,e.Pt)&&i!==e;)i=i.Next;var l=Math.abs(this.GetDx(e.Pt,i.Pt));return Math.max(n,o)===Math.max(r,l)&&Math.min(n,o)===Math.min(r,l)?this.Area(t)>0:n>=r&&n>=l||o>=r&&o>=l},s.Clipper.prototype.GetBottomPt=function(t){for(var e=null,i=t.Next;i!==t;)i.Pt.Y>t.Pt.Y?(t=i,e=null):i.Pt.Y===t.Pt.Y&&i.Pt.X<=t.Pt.X&&(i.Pt.X<t.Pt.X?(e=null,t=i):i.Next!==t&&i.Prev!==t&&(e=i)),i=i.Next;if(null!==e)for(;e!==i;)for(this.FirstIsBottomPt(i,e)||(t=e),e=e.Next;s.IntPoint.op_Inequality(e.Pt,t.Pt);)e=e.Next;return t},s.Clipper.prototype.GetLowermostRec=function(t,e){null===t.BottomPt&&(t.BottomPt=this.GetBottomPt(t.Pts)),null===e.BottomPt&&(e.BottomPt=this.GetBottomPt(e.Pts));var i=t.BottomPt,n=e.BottomPt;return i.Pt.Y>n.Pt.Y?t:i.Pt.Y<n.Pt.Y?e:i.Pt.X<n.Pt.X?t:i.Pt.X>n.Pt.X?e:i.Next===i?e:n.Next===n?t:this.FirstIsBottomPt(i,n)?t:e},s.Clipper.prototype.OutRec1RightOfOutRec2=function(t,e){do{if((t=t.FirstLeft)===e)return!0}while(null!==t);return!1},s.Clipper.prototype.GetOutRec=function(t){for(var e=this.m_PolyOuts[t];e!==this.m_PolyOuts[e.Idx];)e=this.m_PolyOuts[e.Idx];return e},s.Clipper.prototype.AppendPolygon=function(t,e){var i,n=this.m_PolyOuts[t.OutIdx],o=this.m_PolyOuts[e.OutIdx];i=this.OutRec1RightOfOutRec2(n,o)?o:this.OutRec1RightOfOutRec2(o,n)?n:this.GetLowermostRec(n,o);var r=n.Pts,l=r.Prev,p=o.Pts,h=p.Prev;t.Side===s.EdgeSide.esLeft?e.Side===s.EdgeSide.esLeft?(this.ReversePolyPtLinks(p),p.Next=r,r.Prev=p,l.Next=h,h.Prev=l,n.Pts=h):(h.Next=r,r.Prev=h,p.Prev=l,l.Next=p,n.Pts=p):e.Side===s.EdgeSide.esRight?(this.ReversePolyPtLinks(p),l.Next=h,h.Prev=l,p.Next=r,r.Prev=p):(l.Next=p,p.Prev=l,r.Prev=h,h.Next=r),n.BottomPt=null,i===o&&(o.FirstLeft!==n&&(n.FirstLeft=o.FirstLeft),n.IsHole=o.IsHole),o.Pts=null,o.BottomPt=null,o.FirstLeft=n;var u=t.OutIdx,a=e.OutIdx;t.OutIdx=-1,e.OutIdx=-1;for(var f=this.m_ActiveEdges;null!==f;){if(f.OutIdx===a){f.OutIdx=u,f.Side=t.Side;break}f=f.NextInAEL}o.Idx=n.Idx},s.Clipper.prototype.ReversePolyPtLinks=function(t){if(null!==t){var e,i;e=t;do{i=e.Next,e.Next=e.Prev,e.Prev=i,e=i}while(e!==t)}},s.Clipper.SwapSides=function(t,e){var i=t.Side;t.Side=e.Side,e.Side=i},s.Clipper.SwapPolyIndexes=function(t,e){var i=t.OutIdx;t.OutIdx=e.OutIdx,e.OutIdx=i},s.Clipper.prototype.IntersectEdges=function(t,e,i){var n=t.OutIdx>=0,o=e.OutIdx>=0;if(s.use_xyz&&this.SetZ(i,t,e),!s.use_lines||0!==t.WindDelta&&0!==e.WindDelta){if(t.PolyTyp===e.PolyTyp)if(this.IsEvenOddFillType(t)){var r=t.WindCnt;t.WindCnt=e.WindCnt,e.WindCnt=r}else t.WindCnt+e.WindDelta===0?t.WindCnt=-t.WindCnt:t.WindCnt+=e.WindDelta,e.WindCnt-t.WindDelta==0?e.WindCnt=-e.WindCnt:e.WindCnt-=t.WindDelta;else this.IsEvenOddFillType(e)?t.WindCnt2=0===t.WindCnt2?1:0:t.WindCnt2+=e.WindDelta,this.IsEvenOddFillType(t)?e.WindCnt2=0===e.WindCnt2?1:0:e.WindCnt2-=t.WindDelta;var l,p,h,u,a,f;switch(t.PolyTyp===s.PolyType.ptSubject?(l=this.m_SubjFillType,h=this.m_ClipFillType):(l=this.m_ClipFillType,h=this.m_SubjFillType),e.PolyTyp===s.PolyType.ptSubject?(p=this.m_SubjFillType,u=this.m_ClipFillType):(p=this.m_ClipFillType,u=this.m_SubjFillType),l){case s.PolyFillType.pftPositive:a=t.WindCnt;break;case s.PolyFillType.pftNegative:a=-t.WindCnt;break;default:a=Math.abs(t.WindCnt)}switch(p){case s.PolyFillType.pftPositive:f=e.WindCnt;break;case s.PolyFillType.pftNegative:f=-e.WindCnt;break;default:f=Math.abs(e.WindCnt)}if(n&&o)0!==a&&1!==a||0!==f&&1!==f||t.PolyTyp!==e.PolyTyp&&this.m_ClipType!==s.ClipType.ctXor?this.AddLocalMaxPoly(t,e,i):(this.AddOutPt(t,i),this.AddOutPt(e,i),s.Clipper.SwapSides(t,e),s.Clipper.SwapPolyIndexes(t,e));else if(n)0!==f&&1!==f||(this.AddOutPt(t,i),s.Clipper.SwapSides(t,e),s.Clipper.SwapPolyIndexes(t,e));else if(o)0!==a&&1!==a||(this.AddOutPt(e,i),s.Clipper.SwapSides(t,e),s.Clipper.SwapPolyIndexes(t,e));else if(!(0!==a&&1!==a||0!==f&&1!==f)){var d,P;switch(h){case s.PolyFillType.pftPositive:d=t.WindCnt2;break;case s.PolyFillType.pftNegative:d=-t.WindCnt2;break;default:d=Math.abs(t.WindCnt2)}switch(u){case s.PolyFillType.pftPositive:P=e.WindCnt2;break;case s.PolyFillType.pftNegative:P=-e.WindCnt2;break;default:P=Math.abs(e.WindCnt2)}if(t.PolyTyp!==e.PolyTyp)this.AddLocalMinPoly(t,e,i);else if(1===a&&1===f)switch(this.m_ClipType){case s.ClipType.ctIntersection:d>0&&P>0&&this.AddLocalMinPoly(t,e,i);break;case s.ClipType.ctUnion:d<=0&&P<=0&&this.AddLocalMinPoly(t,e,i);break;case s.ClipType.ctDifference:(t.PolyTyp===s.PolyType.ptClip&&d>0&&P>0||t.PolyTyp===s.PolyType.ptSubject&&d<=0&&P<=0)&&this.AddLocalMinPoly(t,e,i);break;case s.ClipType.ctXor:this.AddLocalMinPoly(t,e,i)}else s.Clipper.SwapSides(t,e)}}else{if(0===t.WindDelta&&0===e.WindDelta)return;t.PolyTyp===e.PolyTyp&&t.WindDelta!==e.WindDelta&&this.m_ClipType===s.ClipType.ctUnion?0===t.WindDelta?o&&(this.AddOutPt(t,i),n&&(t.OutIdx=-1)):n&&(this.AddOutPt(e,i),o&&(e.OutIdx=-1)):t.PolyTyp!==e.PolyTyp&&(0!==t.WindDelta||1!==Math.abs(e.WindCnt)||this.m_ClipType===s.ClipType.ctUnion&&0!==e.WindCnt2?0!==e.WindDelta||1!==Math.abs(t.WindCnt)||this.m_ClipType===s.ClipType.ctUnion&&0!==t.WindCnt2||(this.AddOutPt(e,i),o&&(e.OutIdx=-1)):(this.AddOutPt(t,i),n&&(t.OutIdx=-1)))}},s.Clipper.prototype.DeleteFromSEL=function(t){var e=t.PrevInSEL,i=t.NextInSEL;null===e&&null===i&&t!==this.m_SortedEdges||(null!==e?e.NextInSEL=i:this.m_SortedEdges=i,null!==i&&(i.PrevInSEL=e),t.NextInSEL=null,t.PrevInSEL=null)},s.Clipper.prototype.ProcessHorizontals=function(){for(var t={};this.PopEdgeFromSEL(t);)this.ProcessHorizontal(t.v)},s.Clipper.prototype.GetHorzDirection=function(t,e){t.Bot.X<t.Top.X?(e.Left=t.Bot.X,e.Right=t.Top.X,e.Dir=s.Direction.dLeftToRight):(e.Left=t.Top.X,e.Right=t.Bot.X,e.Dir=s.Direction.dRightToLeft)},s.Clipper.prototype.ProcessHorizontal=function(t){var e={Dir:null,Left:null,Right:null};this.GetHorzDirection(t,e);for(var i=e.Dir,n=e.Left,o=e.Right,r=0===t.WindDelta,l=t,p=null;null!==l.NextInLML&&s.ClipperBase.IsHorizontal(l.NextInLML);)l=l.NextInLML;null===l.NextInLML&&(p=this.GetMaximaPair(l));var h=this.m_Maxima;if(null!==h)if(i===s.Direction.dLeftToRight){for(;null!==h&&h.X<=t.Bot.X;)h=h.Next;null!==h&&h.X>=l.Top.X&&(h=null)}else{for(;null!==h.Next&&h.Next.X<t.Bot.X;)h=h.Next;h.X<=l.Top.X&&(h=null)}for(var u=null;;){for(var a=t===l,f=this.GetNextInAEL(t,i);null!==f;){if(null!==h)if(i===s.Direction.dLeftToRight)for(;null!==h&&h.X<f.Curr.X;)t.OutIdx>=0&&!r&&this.AddOutPt(t,new s.IntPoint2(h.X,t.Bot.Y)),h=h.Next;else for(;null!==h&&h.X>f.Curr.X;)t.OutIdx>=0&&!r&&this.AddOutPt(t,new s.IntPoint2(h.X,t.Bot.Y)),h=h.Prev;if(i===s.Direction.dLeftToRight&&f.Curr.X>o||i===s.Direction.dRightToLeft&&f.Curr.X<n)break;if(f.Curr.X===t.Top.X&&null!==t.NextInLML&&f.Dx<t.NextInLML.Dx)break;if(t.OutIdx>=0&&!r){s.use_xyz&&(i===s.Direction.dLeftToRight?this.SetZ(f.Curr,t,f):this.SetZ(f.Curr,f,t)),u=this.AddOutPt(t,f.Curr);for(var d=this.m_SortedEdges;null!==d;){if(d.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,d.Bot.X,d.Top.X)){var P=this.GetLastOutPt(d);this.AddJoin(P,u,d.Top)}d=d.NextInSEL}this.AddGhostJoin(u,t.Bot)}if(f===p&&a)return t.OutIdx>=0&&this.AddLocalMaxPoly(t,p,t.Top),this.DeleteFromAEL(t),void this.DeleteFromAEL(p);if(i===s.Direction.dLeftToRight){var m=new s.IntPoint2(f.Curr.X,t.Curr.Y);this.IntersectEdges(t,f,m)}else{m=new s.IntPoint2(f.Curr.X,t.Curr.Y);this.IntersectEdges(f,t,m)}var c=this.GetNextInAEL(f,i);this.SwapPositionsInAEL(t,f),f=c}if(null===t.NextInLML||!s.ClipperBase.IsHorizontal(t.NextInLML))break;(t=this.UpdateEdgeIntoAEL(t)).OutIdx>=0&&this.AddOutPt(t,t.Bot),e={Dir:i,Left:n,Right:o},this.GetHorzDirection(t,e),i=e.Dir,n=e.Left,o=e.Right}if(t.OutIdx>=0&&null===u){u=this.GetLastOutPt(t);for(d=this.m_SortedEdges;null!==d;){if(d.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,d.Bot.X,d.Top.X)){P=this.GetLastOutPt(d);this.AddJoin(P,u,d.Top)}d=d.NextInSEL}this.AddGhostJoin(u,t.Top)}if(null!==t.NextInLML)if(t.OutIdx>=0){if(u=this.AddOutPt(t,t.Top),0===(t=this.UpdateEdgeIntoAEL(t)).WindDelta)return;var y=t.PrevInAEL;c=t.NextInAEL;if(null!==y&&y.Curr.X===t.Bot.X&&y.Curr.Y===t.Bot.Y&&0===y.WindDelta&&y.OutIdx>=0&&y.Curr.Y>y.Top.Y&&s.ClipperBase.SlopesEqual3(t,y,this.m_UseFullRange)){P=this.AddOutPt(y,t.Bot);this.AddJoin(u,P,t.Top)}else if(null!==c&&c.Curr.X===t.Bot.X&&c.Curr.Y===t.Bot.Y&&0!==c.WindDelta&&c.OutIdx>=0&&c.Curr.Y>c.Top.Y&&s.ClipperBase.SlopesEqual3(t,c,this.m_UseFullRange)){P=this.AddOutPt(c,t.Bot);this.AddJoin(u,P,t.Top)}}else t=this.UpdateEdgeIntoAEL(t);else t.OutIdx>=0&&this.AddOutPt(t,t.Top),this.DeleteFromAEL(t)},s.Clipper.prototype.GetNextInAEL=function(t,e){return e===s.Direction.dLeftToRight?t.NextInAEL:t.PrevInAEL},s.Clipper.prototype.IsMinima=function(t){return null!==t&&t.Prev.NextInLML!==t&&t.Next.NextInLML!==t},s.Clipper.prototype.IsMaxima=function(t,e){return null!==t&&t.Top.Y===e&&null===t.NextInLML},s.Clipper.prototype.IsIntermediate=function(t,e){return t.Top.Y===e&&null!==t.NextInLML},s.Clipper.prototype.GetMaximaPair=function(t){return s.IntPoint.op_Equality(t.Next.Top,t.Top)&&null===t.Next.NextInLML?t.Next:s.IntPoint.op_Equality(t.Prev.Top,t.Top)&&null===t.Prev.NextInLML?t.Prev:null},s.Clipper.prototype.GetMaximaPairEx=function(t){var e=this.GetMaximaPair(t);return null===e||e.OutIdx===s.ClipperBase.Skip||e.NextInAEL===e.PrevInAEL&&!s.ClipperBase.IsHorizontal(e)?null:e},s.Clipper.prototype.ProcessIntersections=function(t){if(null===this.m_ActiveEdges)return!0;try{if(this.BuildIntersectList(t),0===this.m_IntersectList.length)return!0;if(1!==this.m_IntersectList.length&&!this.FixupIntersectionOrder())return!1;this.ProcessIntersectList()}catch(t){this.m_SortedEdges=null,this.m_IntersectList.length=0,s.Error("ProcessIntersections error")}return this.m_SortedEdges=null,!0},s.Clipper.prototype.BuildIntersectList=function(t){if(null!==this.m_ActiveEdges){var e=this.m_ActiveEdges;for(this.m_SortedEdges=e;null!==e;)e.PrevInSEL=e.PrevInAEL,e.NextInSEL=e.NextInAEL,e.Curr.X=s.Clipper.TopX(e,t),e=e.NextInAEL;for(var i=!0;i&&null!==this.m_SortedEdges;){for(i=!1,e=this.m_SortedEdges;null!==e.NextInSEL;){var n=e.NextInSEL,o=new s.IntPoint0;if(e.Curr.X>n.Curr.X){this.IntersectPoint(e,n,o),o.Y<t&&(o=new s.IntPoint2(s.Clipper.TopX(e,t),t));var r=new s.IntersectNode;r.Edge1=e,r.Edge2=n,r.Pt.X=o.X,r.Pt.Y=o.Y,s.use_xyz&&(r.Pt.Z=o.Z),this.m_IntersectList.push(r),this.SwapPositionsInSEL(e,n),i=!0}else e=n}if(null===e.PrevInSEL)break;e.PrevInSEL.NextInSEL=null}this.m_SortedEdges=null}},s.Clipper.prototype.EdgesAdjacent=function(t){return t.Edge1.NextInSEL===t.Edge2||t.Edge1.PrevInSEL===t.Edge2},s.Clipper.IntersectNodeSort=function(t,e){return e.Pt.Y-t.Pt.Y},s.Clipper.prototype.FixupIntersectionOrder=function(){this.m_IntersectList.sort(this.m_IntersectNodeComparer),this.CopyAELToSEL();for(var t=this.m_IntersectList.length,e=0;e<t;e++){if(!this.EdgesAdjacent(this.m_IntersectList[e])){for(var i=e+1;i<t&&!this.EdgesAdjacent(this.m_IntersectList[i]);)i++;if(i===t)return!1;var n=this.m_IntersectList[e];this.m_IntersectList[e]=this.m_IntersectList[i],this.m_IntersectList[i]=n}this.SwapPositionsInSEL(this.m_IntersectList[e].Edge1,this.m_IntersectList[e].Edge2)}return!0},s.Clipper.prototype.ProcessIntersectList=function(){for(var t=0,e=this.m_IntersectList.length;t<e;t++){var i=this.m_IntersectList[t];this.IntersectEdges(i.Edge1,i.Edge2,i.Pt),this.SwapPositionsInAEL(i.Edge1,i.Edge2)}this.m_IntersectList.length=0};u.msie?s.Clipper.Round=function(t){return t<0?Math.ceil(t-.5):Math.round(t)}:u.chromium?s.Clipper.Round=function(t){return t<0?-Math.round(Math.abs(t)):Math.round(t)}:u.safari?s.Clipper.Round=function(t){return t<0?(t-=.5)<-2147483648?Math.ceil(t):0|t:(t+=.5)>2147483647?Math.floor(t):0|t}:s.Clipper.Round=function(t){return t<0?Math.ceil(t-.5):Math.floor(t+.5)},s.Clipper.TopX=function(t,e){return e===t.Top.Y?t.Top.X:t.Bot.X+s.Clipper.Round(t.Dx*(e-t.Bot.Y))},s.Clipper.prototype.IntersectPoint=function(t,e,i){var n,o;if(i.X=0,i.Y=0,t.Dx===e.Dx)return i.Y=t.Curr.Y,void(i.X=s.Clipper.TopX(t,i.Y));if(0===t.Delta.X)i.X=t.Bot.X,s.ClipperBase.IsHorizontal(e)?i.Y=e.Bot.Y:(o=e.Bot.Y-e.Bot.X/e.Dx,i.Y=s.Clipper.Round(i.X/e.Dx+o));else if(0===e.Delta.X)i.X=e.Bot.X,s.ClipperBase.IsHorizontal(t)?i.Y=t.Bot.Y:(n=t.Bot.Y-t.Bot.X/t.Dx,i.Y=s.Clipper.Round(i.X/t.Dx+n));else{n=t.Bot.X-t.Bot.Y*t.Dx;var r=((o=e.Bot.X-e.Bot.Y*e.Dx)-n)/(t.Dx-e.Dx);i.Y=s.Clipper.Round(r),Math.abs(t.Dx)<Math.abs(e.Dx)?i.X=s.Clipper.Round(t.Dx*r+n):i.X=s.Clipper.Round(e.Dx*r+o)}if(i.Y<t.Top.Y||i.Y<e.Top.Y){if(t.Top.Y>e.Top.Y)return i.Y=t.Top.Y,i.X=s.Clipper.TopX(e,t.Top.Y),i.X<t.Top.X;i.Y=e.Top.Y,Math.abs(t.Dx)<Math.abs(e.Dx)?i.X=s.Clipper.TopX(t,i.Y):i.X=s.Clipper.TopX(e,i.Y)}i.Y>t.Curr.Y&&(i.Y=t.Curr.Y,Math.abs(t.Dx)>Math.abs(e.Dx)?i.X=s.Clipper.TopX(e,i.Y):i.X=s.Clipper.TopX(t,i.Y))},s.Clipper.prototype.ProcessEdgesAtTopOfScanbeam=function(t){for(var e=this.m_ActiveEdges;null!==e;){var i=this.IsMaxima(e,t);if(i){var n=this.GetMaximaPairEx(e);i=null===n||!s.ClipperBase.IsHorizontal(n)}if(i){this.StrictlySimple&&this.InsertMaxima(e.Top.X);var o=e.PrevInAEL;this.DoMaxima(e),e=null===o?this.m_ActiveEdges:o.NextInAEL}else{if(this.IsIntermediate(e,t)&&s.ClipperBase.IsHorizontal(e.NextInLML)?((e=this.UpdateEdgeIntoAEL(e)).OutIdx>=0&&this.AddOutPt(e,e.Bot),this.AddEdgeToSEL(e)):(e.Curr.X=s.Clipper.TopX(e,t),e.Curr.Y=t),s.use_xyz&&(e.Top.Y===t?e.Curr.Z=e.Top.Z:e.Bot.Y===t?e.Curr.Z=e.Bot.Z:e.Curr.Z=0),this.StrictlySimple){o=e.PrevInAEL;if(e.OutIdx>=0&&0!==e.WindDelta&&null!==o&&o.OutIdx>=0&&o.Curr.X===e.Curr.X&&0!==o.WindDelta){var r=new s.IntPoint1(e.Curr);s.use_xyz&&this.SetZ(r,o,e);var l=this.AddOutPt(o,r),p=this.AddOutPt(e,r);this.AddJoin(l,p,r)}}e=e.NextInAEL}}for(this.ProcessHorizontals(),this.m_Maxima=null,e=this.m_ActiveEdges;null!==e;){if(this.IsIntermediate(e,t)){l=null;e.OutIdx>=0&&(l=this.AddOutPt(e,e.Top));o=(e=this.UpdateEdgeIntoAEL(e)).PrevInAEL;var h=e.NextInAEL;if(null!==o&&o.Curr.X===e.Bot.X&&o.Curr.Y===e.Bot.Y&&null!==l&&o.OutIdx>=0&&o.Curr.Y===o.Top.Y&&s.ClipperBase.SlopesEqual5(e.Curr,e.Top,o.Curr,o.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==o.WindDelta){p=this.AddOutPt(ePrev2,e.Bot);this.AddJoin(l,p,e.Top)}else if(null!==h&&h.Curr.X===e.Bot.X&&h.Curr.Y===e.Bot.Y&&null!==l&&h.OutIdx>=0&&h.Curr.Y===h.Top.Y&&s.ClipperBase.SlopesEqual5(e.Curr,e.Top,h.Curr,h.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==h.WindDelta){p=this.AddOutPt(h,e.Bot);this.AddJoin(l,p,e.Top)}}e=e.NextInAEL}},s.Clipper.prototype.DoMaxima=function(t){var e=this.GetMaximaPairEx(t);if(null===e)return t.OutIdx>=0&&this.AddOutPt(t,t.Top),void this.DeleteFromAEL(t);for(var i=t.NextInAEL;null!==i&&i!==e;)this.IntersectEdges(t,i,t.Top),this.SwapPositionsInAEL(t,i),i=t.NextInAEL;-1===t.OutIdx&&-1===e.OutIdx?(this.DeleteFromAEL(t),this.DeleteFromAEL(e)):t.OutIdx>=0&&e.OutIdx>=0?(t.OutIdx>=0&&this.AddLocalMaxPoly(t,e,t.Top),this.DeleteFromAEL(t),this.DeleteFromAEL(e)):s.use_lines&&0===t.WindDelta?(t.OutIdx>=0&&(this.AddOutPt(t,t.Top),t.OutIdx=s.ClipperBase.Unassigned),this.DeleteFromAEL(t),e.OutIdx>=0&&(this.AddOutPt(e,t.Top),e.OutIdx=s.ClipperBase.Unassigned),this.DeleteFromAEL(e)):s.Error("DoMaxima error")},s.Clipper.ReversePaths=function(t){for(var e=0,i=t.length;e<i;e++)t[e].reverse()},s.Clipper.Orientation=function(t){return s.Clipper.Area(t)>=0},s.Clipper.prototype.PointCount=function(t){if(null===t)return 0;var e=0,i=t;do{e++,i=i.Next}while(i!==t);return e},s.Clipper.prototype.BuildResult=function(t){s.Clear(t);for(var e=0,i=this.m_PolyOuts.length;e<i;e++){var n=this.m_PolyOuts[e];if(null!==n.Pts){var o=n.Pts.Prev,r=this.PointCount(o);if(!(r<2)){for(var l=new Array(r),p=0;p<r;p++)l[p]=o.Pt,o=o.Prev;t.push(l)}}}},s.Clipper.prototype.BuildResult2=function(t){t.Clear();for(var e=0,i=this.m_PolyOuts.length;e<i;e++){var n=this.m_PolyOuts[e],o=this.PointCount(n.Pts);if(!(n.IsOpen&&o<2||!n.IsOpen&&o<3)){this.FixHoleLinkage(n);var r=new s.PolyNode;t.m_AllPolys.push(r),n.PolyNode=r,r.m_polygon.length=o;for(var l=n.Pts.Prev,p=0;p<o;p++)r.m_polygon[p]=l.Pt,l=l.Prev}}for(e=0,i=this.m_PolyOuts.length;e<i;e++){null!==(n=this.m_PolyOuts[e]).PolyNode&&(n.IsOpen?(n.PolyNode.IsOpen=!0,t.AddChild(n.PolyNode)):null!==n.FirstLeft&&null!==n.FirstLeft.PolyNode?n.FirstLeft.PolyNode.AddChild(n.PolyNode):t.AddChild(n.PolyNode))}},s.Clipper.prototype.FixupOutPolyline=function(t){for(var e=t.Pts,i=e.Prev;e!==i;)if(e=e.Next,s.IntPoint.op_Equality(e.Pt,e.Prev.Pt)){e===i&&(i=e.Prev);var n=e.Prev;n.Next=e.Next,e.Next.Prev=n,e=n}e===e.Prev&&(t.Pts=null)},s.Clipper.prototype.FixupOutPolygon=function(t){var e=null;t.BottomPt=null;for(var i=t.Pts,n=this.PreserveCollinear||this.StrictlySimple;;){if(i.Prev===i||i.Prev===i.Next)return void(t.Pts=null);if(s.IntPoint.op_Equality(i.Pt,i.Next.Pt)||s.IntPoint.op_Equality(i.Pt,i.Prev.Pt)||s.ClipperBase.SlopesEqual4(i.Prev.Pt,i.Pt,i.Next.Pt,this.m_UseFullRange)&&(!n||!this.Pt2IsBetweenPt1AndPt3(i.Prev.Pt,i.Pt,i.Next.Pt)))e=null,i.Prev.Next=i.Next,i.Next.Prev=i.Prev,i=i.Prev;else{if(i===e)break;null===e&&(e=i),i=i.Next}}t.Pts=i},s.Clipper.prototype.DupOutPt=function(t,e){var i=new s.OutPt;return i.Pt.X=t.Pt.X,i.Pt.Y=t.Pt.Y,s.use_xyz&&(i.Pt.Z=t.Pt.Z),i.Idx=t.Idx,e?(i.Next=t.Next,i.Prev=t,t.Next.Prev=i,t.Next=i):(i.Prev=t.Prev,i.Next=t,t.Prev.Next=i,t.Prev=i),i},s.Clipper.prototype.GetOverlap=function(t,e,i,n,o){return t<e?i<n?(o.Left=Math.max(t,i),o.Right=Math.min(e,n)):(o.Left=Math.max(t,n),o.Right=Math.min(e,i)):i<n?(o.Left=Math.max(e,i),o.Right=Math.min(t,n)):(o.Left=Math.max(e,n),o.Right=Math.min(t,i)),o.Left<o.Right},s.Clipper.prototype.JoinHorz=function(t,e,i,n,o,r){var l=t.Pt.X>e.Pt.X?s.Direction.dRightToLeft:s.Direction.dLeftToRight,p=i.Pt.X>n.Pt.X?s.Direction.dRightToLeft:s.Direction.dLeftToRight;if(l===p)return!1;if(l===s.Direction.dLeftToRight){for(;t.Next.Pt.X<=o.X&&t.Next.Pt.X>=t.Pt.X&&t.Next.Pt.Y===o.Y;)t=t.Next;r&&t.Pt.X!==o.X&&(t=t.Next),e=this.DupOutPt(t,!r),s.IntPoint.op_Inequality(e.Pt,o)&&((t=e).Pt.X=o.X,t.Pt.Y=o.Y,s.use_xyz&&(t.Pt.Z=o.Z),e=this.DupOutPt(t,!r))}else{for(;t.Next.Pt.X>=o.X&&t.Next.Pt.X<=t.Pt.X&&t.Next.Pt.Y===o.Y;)t=t.Next;r||t.Pt.X===o.X||(t=t.Next),e=this.DupOutPt(t,r),s.IntPoint.op_Inequality(e.Pt,o)&&((t=e).Pt.X=o.X,t.Pt.Y=o.Y,s.use_xyz&&(t.Pt.Z=o.Z),e=this.DupOutPt(t,r))}if(p===s.Direction.dLeftToRight){for(;i.Next.Pt.X<=o.X&&i.Next.Pt.X>=i.Pt.X&&i.Next.Pt.Y===o.Y;)i=i.Next;r&&i.Pt.X!==o.X&&(i=i.Next),n=this.DupOutPt(i,!r),s.IntPoint.op_Inequality(n.Pt,o)&&((i=n).Pt.X=o.X,i.Pt.Y=o.Y,s.use_xyz&&(i.Pt.Z=o.Z),n=this.DupOutPt(i,!r))}else{for(;i.Next.Pt.X>=o.X&&i.Next.Pt.X<=i.Pt.X&&i.Next.Pt.Y===o.Y;)i=i.Next;r||i.Pt.X===o.X||(i=i.Next),n=this.DupOutPt(i,r),s.IntPoint.op_Inequality(n.Pt,o)&&((i=n).Pt.X=o.X,i.Pt.Y=o.Y,s.use_xyz&&(i.Pt.Z=o.Z),n=this.DupOutPt(i,r))}return l===s.Direction.dLeftToRight===r?(t.Prev=i,i.Next=t,e.Next=n,n.Prev=e):(t.Next=i,i.Prev=t,e.Prev=n,n.Next=e),!0},s.Clipper.prototype.JoinPoints=function(t,e,i){var n=t.OutPt1,o=new s.OutPt,r=t.OutPt2,l=new s.OutPt,p=t.OutPt1.Pt.Y===t.OffPt.Y;if(p&&s.IntPoint.op_Equality(t.OffPt,t.OutPt1.Pt)&&s.IntPoint.op_Equality(t.OffPt,t.OutPt2.Pt)){if(e!==i)return!1;for(o=t.OutPt1.Next;o!==n&&s.IntPoint.op_Equality(o.Pt,t.OffPt);)o=o.Next;var h=o.Pt.Y>t.OffPt.Y;for(l=t.OutPt2.Next;l!==r&&s.IntPoint.op_Equality(l.Pt,t.OffPt);)l=l.Next;return h!==l.Pt.Y>t.OffPt.Y&&(h?(o=this.DupOutPt(n,!1),l=this.DupOutPt(r,!0),n.Prev=r,r.Next=n,o.Next=l,l.Prev=o,t.OutPt1=n,t.OutPt2=o,!0):(o=this.DupOutPt(n,!0),l=this.DupOutPt(r,!1),n.Next=r,r.Prev=n,o.Prev=l,l.Next=o,t.OutPt1=n,t.OutPt2=o,!0))}if(p){for(o=n;n.Prev.Pt.Y===n.Pt.Y&&n.Prev!==o&&n.Prev!==r;)n=n.Prev;for(;o.Next.Pt.Y===o.Pt.Y&&o.Next!==n&&o.Next!==r;)o=o.Next;if(o.Next===n||o.Next===r)return!1;for(l=r;r.Prev.Pt.Y===r.Pt.Y&&r.Prev!==l&&r.Prev!==o;)r=r.Prev;for(;l.Next.Pt.Y===l.Pt.Y&&l.Next!==r&&l.Next!==n;)l=l.Next;if(l.Next===r||l.Next===n)return!1;var u={Left:null,Right:null};if(!this.GetOverlap(n.Pt.X,o.Pt.X,r.Pt.X,l.Pt.X,u))return!1;var a,f=u.Left,d=u.Right,P=new s.IntPoint0;return n.Pt.X>=f&&n.Pt.X<=d?(P.X=n.Pt.X,P.Y=n.Pt.Y,s.use_xyz&&(P.Z=n.Pt.Z),a=n.Pt.X>o.Pt.X):r.Pt.X>=f&&r.Pt.X<=d?(P.X=r.Pt.X,P.Y=r.Pt.Y,s.use_xyz&&(P.Z=r.Pt.Z),a=r.Pt.X>l.Pt.X):o.Pt.X>=f&&o.Pt.X<=d?(P.X=o.Pt.X,P.Y=o.Pt.Y,s.use_xyz&&(P.Z=o.Pt.Z),a=o.Pt.X>n.Pt.X):(P.X=l.Pt.X,P.Y=l.Pt.Y,s.use_xyz&&(P.Z=l.Pt.Z),a=l.Pt.X>r.Pt.X),t.OutPt1=n,t.OutPt2=r,this.JoinHorz(n,o,r,l,P,a)}for(o=n.Next;s.IntPoint.op_Equality(o.Pt,n.Pt)&&o!==n;)o=o.Next;var m=o.Pt.Y>n.Pt.Y||!s.ClipperBase.SlopesEqual4(n.Pt,o.Pt,t.OffPt,this.m_UseFullRange);if(m){for(o=n.Prev;s.IntPoint.op_Equality(o.Pt,n.Pt)&&o!==n;)o=o.Prev;if(o.Pt.Y>n.Pt.Y||!s.ClipperBase.SlopesEqual4(n.Pt,o.Pt,t.OffPt,this.m_UseFullRange))return!1}for(l=r.Next;s.IntPoint.op_Equality(l.Pt,r.Pt)&&l!==r;)l=l.Next;var c=l.Pt.Y>r.Pt.Y||!s.ClipperBase.SlopesEqual4(r.Pt,l.Pt,t.OffPt,this.m_UseFullRange);if(c){for(l=r.Prev;s.IntPoint.op_Equality(l.Pt,r.Pt)&&l!==r;)l=l.Prev;if(l.Pt.Y>r.Pt.Y||!s.ClipperBase.SlopesEqual4(r.Pt,l.Pt,t.OffPt,this.m_UseFullRange))return!1}return o!==n&&l!==r&&o!==l&&(e!==i||m!==c)&&(m?(o=this.DupOutPt(n,!1),l=this.DupOutPt(r,!0),n.Prev=r,r.Next=n,o.Next=l,l.Prev=o,t.OutPt1=n,t.OutPt2=o,!0):(o=this.DupOutPt(n,!0),l=this.DupOutPt(r,!1),n.Next=r,r.Prev=n,o.Prev=l,l.Next=o,t.OutPt1=n,t.OutPt2=o,!0))},s.Clipper.GetBounds=function(t){for(var e=0,i=t.length;e<i&&0===t[e].length;)e++;if(e===i)return new s.IntRect(0,0,0,0);var n=new s.IntRect;for(n.left=t[e][0].X,n.right=n.left,n.top=t[e][0].Y,n.bottom=n.top;e<i;e++)for(var o=0,r=t[e].length;o<r;o++)t[e][o].X<n.left?n.left=t[e][o].X:t[e][o].X>n.right&&(n.right=t[e][o].X),t[e][o].Y<n.top?n.top=t[e][o].Y:t[e][o].Y>n.bottom&&(n.bottom=t[e][o].Y);return n},s.Clipper.prototype.GetBounds2=function(t){var e=t,i=new s.IntRect;for(i.left=t.Pt.X,i.right=t.Pt.X,i.top=t.Pt.Y,i.bottom=t.Pt.Y,t=t.Next;t!==e;)t.Pt.X<i.left&&(i.left=t.Pt.X),t.Pt.X>i.right&&(i.right=t.Pt.X),t.Pt.Y<i.top&&(i.top=t.Pt.Y),t.Pt.Y>i.bottom&&(i.bottom=t.Pt.Y),t=t.Next;return i},s.Clipper.PointInPolygon=function(t,e){var i=0,n=e.length;if(n<3)return 0;for(var o=e[0],r=1;r<=n;++r){var s=r===n?e[0]:e[r];if(s.Y===t.Y&&(s.X===t.X||o.Y===t.Y&&s.X>t.X==o.X<t.X))return-1;if(o.Y<t.Y!=s.Y<t.Y)if(o.X>=t.X)if(s.X>t.X)i=1-i;else{if(0===(l=(o.X-t.X)*(s.Y-t.Y)-(s.X-t.X)*(o.Y-t.Y)))return-1;l>0==s.Y>o.Y&&(i=1-i)}else if(s.X>t.X){var l;if(0===(l=(o.X-t.X)*(s.Y-t.Y)-(s.X-t.X)*(o.Y-t.Y)))return-1;l>0==s.Y>o.Y&&(i=1-i)}o=s}return i},s.Clipper.prototype.PointInPolygon=function(t,e){var i=0,n=e,o=t.X,r=t.Y,s=e.Pt.X,l=e.Pt.Y;do{var p=(e=e.Next).Pt.X,h=e.Pt.Y;if(h===r&&(p===o||l===r&&p>o==s<o))return-1;if(l<r!=h<r)if(s>=o)if(p>o)i=1-i;else{if(0===(u=(s-o)*(h-r)-(p-o)*(l-r)))return-1;u>0==h>l&&(i=1-i)}else if(p>o){var u;if(0===(u=(s-o)*(h-r)-(p-o)*(l-r)))return-1;u>0==h>l&&(i=1-i)}s=p,l=h}while(n!==e);return i},s.Clipper.prototype.Poly2ContainsPoly1=function(t,e){var i=t;do{var n=this.PointInPolygon(i.Pt,e);if(n>=0)return n>0;i=i.Next}while(i!==t);return!0},s.Clipper.prototype.FixupFirstLefts1=function(t,e){for(var i,n,o=0,r=this.m_PolyOuts.length;o<r;o++)i=this.m_PolyOuts[o],n=s.Clipper.ParseFirstLeft(i.FirstLeft),null!==i.Pts&&n===t&&this.Poly2ContainsPoly1(i.Pts,e.Pts)&&(i.FirstLeft=e)},s.Clipper.prototype.FixupFirstLefts2=function(t,e){for(var i,n,o=e.FirstLeft,r=0,l=this.m_PolyOuts.length;r<l;r++)null!==(i=this.m_PolyOuts[r]).Pts&&i!==e&&i!==t&&((n=s.Clipper.ParseFirstLeft(i.FirstLeft))!==o&&n!==t&&n!==e||(this.Poly2ContainsPoly1(i.Pts,t.Pts)?i.FirstLeft=t:this.Poly2ContainsPoly1(i.Pts,e.Pts)?i.FirstLeft=e:i.FirstLeft!==t&&i.FirstLeft!==e||(i.FirstLeft=o)))},s.Clipper.prototype.FixupFirstLefts3=function(t,e){for(var i,n,o=0,r=this.m_PolyOuts.length;o<r;o++)i=this.m_PolyOuts[o],n=s.Clipper.ParseFirstLeft(i.FirstLeft),null!==i.Pts&&n===t&&(i.FirstLeft=e)},s.Clipper.ParseFirstLeft=function(t){for(;null!==t&&null===t.Pts;)t=t.FirstLeft;return t},s.Clipper.prototype.JoinCommonEdges=function(){for(var t=0,e=this.m_Joins.length;t<e;t++){var i,n=this.m_Joins[t],o=this.GetOutRec(n.OutPt1.Idx),r=this.GetOutRec(n.OutPt2.Idx);if(null!==o.Pts&&null!==r.Pts)if(!o.IsOpen&&!r.IsOpen)i=o===r?o:this.OutRec1RightOfOutRec2(o,r)?r:this.OutRec1RightOfOutRec2(r,o)?o:this.GetLowermostRec(o,r),this.JoinPoints(n,o,r)&&(o===r?(o.Pts=n.OutPt1,o.BottomPt=null,(r=this.CreateOutRec()).Pts=n.OutPt2,this.UpdateOutPtIdxs(r),this.Poly2ContainsPoly1(r.Pts,o.Pts)?(r.IsHole=!o.IsHole,r.FirstLeft=o,this.m_UsingPolyTree&&this.FixupFirstLefts2(r,o),(r.IsHole^this.ReverseSolution)==this.Area$1(r)>0&&this.ReversePolyPtLinks(r.Pts)):this.Poly2ContainsPoly1(o.Pts,r.Pts)?(r.IsHole=o.IsHole,o.IsHole=!r.IsHole,r.FirstLeft=o.FirstLeft,o.FirstLeft=r,this.m_UsingPolyTree&&this.FixupFirstLefts2(o,r),(o.IsHole^this.ReverseSolution)==this.Area$1(o)>0&&this.ReversePolyPtLinks(o.Pts)):(r.IsHole=o.IsHole,r.FirstLeft=o.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(o,r))):(r.Pts=null,r.BottomPt=null,r.Idx=o.Idx,o.IsHole=i.IsHole,i===r&&(o.FirstLeft=r.FirstLeft),r.FirstLeft=o,this.m_UsingPolyTree&&this.FixupFirstLefts3(r,o)))}},s.Clipper.prototype.UpdateOutPtIdxs=function(t){var e=t.Pts;do{e.Idx=t.Idx,e=e.Prev}while(e!==t.Pts)},s.Clipper.prototype.DoSimplePolygons=function(){for(var t=0;t<this.m_PolyOuts.length;){var e=this.m_PolyOuts[t++],i=e.Pts;if(null!==i&&!e.IsOpen)do{for(var n=i.Next;n!==e.Pts;){if(s.IntPoint.op_Equality(i.Pt,n.Pt)&&n.Next!==i&&n.Prev!==i){var o=i.Prev,r=n.Prev;i.Prev=r,r.Next=i,n.Prev=o,o.Next=n,e.Pts=i;var l=this.CreateOutRec();l.Pts=n,this.UpdateOutPtIdxs(l),this.Poly2ContainsPoly1(l.Pts,e.Pts)?(l.IsHole=!e.IsHole,l.FirstLeft=e,this.m_UsingPolyTree&&this.FixupFirstLefts2(l,e)):this.Poly2ContainsPoly1(e.Pts,l.Pts)?(l.IsHole=e.IsHole,e.IsHole=!l.IsHole,l.FirstLeft=e.FirstLeft,e.FirstLeft=l,this.m_UsingPolyTree&&this.FixupFirstLefts2(e,l)):(l.IsHole=e.IsHole,l.FirstLeft=e.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(e,l)),n=i}n=n.Next}i=i.Next}while(i!==e.Pts)}},s.Clipper.Area=function(t){if(!Array.isArray(t))return 0;var e=t.length;if(e<3)return 0;for(var i=0,n=0,o=e-1;n<e;++n)i+=(t[o].X+t[n].X)*(t[o].Y-t[n].Y),o=n;return.5*-i},s.Clipper.prototype.Area=function(t){var e=t;if(null===t)return 0;var i=0;do{i+=(t.Prev.Pt.X+t.Pt.X)*(t.Prev.Pt.Y-t.Pt.Y),t=t.Next}while(t!==e);return.5*i},s.Clipper.prototype.Area$1=function(t){return this.Area(t.Pts)},s.Clipper.SimplifyPolygon=function(t,e){var i=new Array,n=new s.Clipper(0);return n.StrictlySimple=!0,n.AddPath(t,s.PolyType.ptSubject,!0),n.Execute(s.ClipType.ctUnion,i,e,e),i},s.Clipper.SimplifyPolygons=function(t,e){void 0===e&&(e=s.PolyFillType.pftEvenOdd);var i=new Array,n=new s.Clipper(0);return n.StrictlySimple=!0,n.AddPaths(t,s.PolyType.ptSubject,!0),n.Execute(s.ClipType.ctUnion,i,e,e),i},s.Clipper.DistanceSqrd=function(t,e){var i=t.X-e.X,n=t.Y-e.Y;return i*i+n*n},s.Clipper.DistanceFromLineSqrd=function(t,e,i){var n=e.Y-i.Y,o=i.X-e.X,r=n*e.X+o*e.Y;return(r=n*t.X+o*t.Y-r)*r/(n*n+o*o)},s.Clipper.SlopesNearCollinear=function(t,e,i,n){return Math.abs(t.X-e.X)>Math.abs(t.Y-e.Y)?t.X>e.X==t.X<i.X?s.Clipper.DistanceFromLineSqrd(t,e,i)<n:e.X>t.X==e.X<i.X?s.Clipper.DistanceFromLineSqrd(e,t,i)<n:s.Clipper.DistanceFromLineSqrd(i,t,e)<n:t.Y>e.Y==t.Y<i.Y?s.Clipper.DistanceFromLineSqrd(t,e,i)<n:e.Y>t.Y==e.Y<i.Y?s.Clipper.DistanceFromLineSqrd(e,t,i)<n:s.Clipper.DistanceFromLineSqrd(i,t,e)<n},s.Clipper.PointsAreClose=function(t,e,i){var n=t.X-e.X,o=t.Y-e.Y;return n*n+o*o<=i},s.Clipper.ExcludeOp=function(t){var e=t.Prev;return e.Next=t.Next,t.Next.Prev=e,e.Idx=0,e},s.Clipper.CleanPolygon=function(t,e){void 0===e&&(e=1.415);var i=t.length;if(0===i)return new Array;for(var n=new Array(i),o=0;o<i;++o)n[o]=new s.OutPt;for(o=0;o<i;++o)n[o].Pt=t[o],n[o].Next=n[(o+1)%i],n[o].Next.Prev=n[o],n[o].Idx=0;for(var r=e*e,l=n[0];0===l.Idx&&l.Next!==l.Prev;)s.Clipper.PointsAreClose(l.Pt,l.Prev.Pt,r)?(l=s.Clipper.ExcludeOp(l),i--):s.Clipper.PointsAreClose(l.Prev.Pt,l.Next.Pt,r)?(s.Clipper.ExcludeOp(l.Next),l=s.Clipper.ExcludeOp(l),i-=2):s.Clipper.SlopesNearCollinear(l.Prev.Pt,l.Pt,l.Next.Pt,r)?(l=s.Clipper.ExcludeOp(l),i--):(l.Idx=1,l=l.Next);i<3&&(i=0);var p=new Array(i);for(o=0;o<i;++o)p[o]=new s.IntPoint1(l.Pt),l=l.Next;return n=null,p},s.Clipper.CleanPolygons=function(t,e){for(var i=new Array(t.length),n=0,o=t.length;n<o;n++)i[n]=s.Clipper.CleanPolygon(t[n],e);return i},s.Clipper.Minkowski=function(t,e,i,n){var o=n?1:0,r=t.length,l=e.length,p=new Array;if(i)for(var h=0;h<l;h++){for(var u=new Array(r),a=0,f=t.length,d=t[a];a<f;d=t[++a])u[a]=new s.IntPoint2(e[h].X+d.X,e[h].Y+d.Y);p.push(u)}else for(h=0;h<l;h++){for(u=new Array(r),a=0,f=t.length,d=t[a];a<f;d=t[++a])u[a]=new s.IntPoint2(e[h].X-d.X,e[h].Y-d.Y);p.push(u)}var P=new Array;for(h=0;h<l-1+o;h++)for(a=0;a<r;a++){var m=new Array;m.push(p[h%l][a%r]),m.push(p[(h+1)%l][a%r]),m.push(p[(h+1)%l][(a+1)%r]),m.push(p[h%l][(a+1)%r]),s.Clipper.Orientation(m)||m.reverse(),P.push(m)}return P},s.Clipper.MinkowskiSum=function(t,e,i){if(e[0]instanceof Array){h=e;for(var n=new s.Paths,o=(l=new s.Clipper,0);o<h.length;++o){var r=s.Clipper.Minkowski(t,h[o],!0,i);if(l.AddPaths(r,s.PolyType.ptSubject,!0),i){p=s.Clipper.TranslatePath(h[o],t[0]);l.AddPath(p,s.PolyType.ptClip,!0)}}return l.Execute(s.ClipType.ctUnion,n,s.PolyFillType.pftNonZero,s.PolyFillType.pftNonZero),n}var l,p=e,h=s.Clipper.Minkowski(t,p,!0,i);return(l=new s.Clipper).AddPaths(h,s.PolyType.ptSubject,!0),l.Execute(s.ClipType.ctUnion,h,s.PolyFillType.pftNonZero,s.PolyFillType.pftNonZero),h},s.Clipper.TranslatePath=function(t,e){for(var i=new s.Path,n=0;n<t.length;n++)i.push(new s.IntPoint2(t[n].X+e.X,t[n].Y+e.Y));return i},s.Clipper.MinkowskiDiff=function(t,e){var i=s.Clipper.Minkowski(t,e,!1,!0),n=new s.Clipper;return n.AddPaths(i,s.PolyType.ptSubject,!0),n.Execute(s.ClipType.ctUnion,i,s.PolyFillType.pftNonZero,s.PolyFillType.pftNonZero),i},s.Clipper.PolyTreeToPaths=function(t){var e=new Array;return s.Clipper.AddPolyNodeToPaths(t,s.Clipper.NodeType.ntAny,e),e},s.Clipper.AddPolyNodeToPaths=function(t,e,i){var n=!0;switch(e){case s.Clipper.NodeType.ntOpen:return;case s.Clipper.NodeType.ntClosed:n=!t.IsOpen}t.m_polygon.length>0&&n&&i.push(t.m_polygon);for(var o=0,r=t.Childs(),l=r.length,p=r[o];o<l;p=r[++o])s.Clipper.AddPolyNodeToPaths(p,e,i)},s.Clipper.OpenPathsFromPolyTree=function(t){for(var e=new s.Paths,i=0,n=t.ChildCount();i<n;i++)t.Childs()[i].IsOpen&&e.push(t.Childs()[i].m_polygon);return e},s.Clipper.ClosedPathsFromPolyTree=function(t){var e=new s.Paths;return s.Clipper.AddPolyNodeToPaths(t,s.Clipper.NodeType.ntClosed,e),e},w(s.Clipper,s.ClipperBase),s.Clipper.NodeType={ntAny:0,ntOpen:1,ntClosed:2},s.ClipperOffset=function(t,e){void 0===t&&(t=2),void 0===e&&(e=s.ClipperOffset.def_arc_tolerance),this.m_destPolys=new s.Paths,this.m_srcPoly=new s.Path,this.m_destPoly=new s.Path,this.m_normals=new Array,this.m_delta=0,this.m_sinA=0,this.m_sin=0,this.m_cos=0,this.m_miterLim=0,this.m_StepsPerRad=0,this.m_lowest=new s.IntPoint0,this.m_polyNodes=new s.PolyNode,this.MiterLimit=t,this.ArcTolerance=e,this.m_lowest.X=-1},s.ClipperOffset.two_pi=6.28318530717959,s.ClipperOffset.def_arc_tolerance=.25,s.ClipperOffset.prototype.Clear=function(){s.Clear(this.m_polyNodes.Childs()),this.m_lowest.X=-1},s.ClipperOffset.Round=s.Clipper.Round,s.ClipperOffset.prototype.AddPath=function(t,e,i){var n=t.length-1;if(!(n<0)){var o=new s.PolyNode;if(o.m_jointype=e,o.m_endtype=i,i===s.EndType.etClosedLine||i===s.EndType.etClosedPolygon)for(;n>0&&s.IntPoint.op_Equality(t[0],t[n]);)n--;o.m_polygon.push(t[0]);for(var r=0,l=0,p=1;p<=n;p++)s.IntPoint.op_Inequality(o.m_polygon[r],t[p])&&(r++,o.m_polygon.push(t[p]),(t[p].Y>o.m_polygon[l].Y||t[p].Y===o.m_polygon[l].Y&&t[p].X<o.m_polygon[l].X)&&(l=r));if(!(i===s.EndType.etClosedPolygon&&r<2)&&(this.m_polyNodes.AddChild(o),i===s.EndType.etClosedPolygon))if(this.m_lowest.X<0)this.m_lowest=new s.IntPoint2(this.m_polyNodes.ChildCount()-1,l);else{var h=this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];(o.m_polygon[l].Y>h.Y||o.m_polygon[l].Y===h.Y&&o.m_polygon[l].X<h.X)&&(this.m_lowest=new s.IntPoint2(this.m_polyNodes.ChildCount()-1,l))}}},s.ClipperOffset.prototype.AddPaths=function(t,e,i){for(var n=0,o=t.length;n<o;n++)this.AddPath(t[n],e,i)},s.ClipperOffset.prototype.FixOrientations=function(){if(this.m_lowest.X>=0&&!s.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))for(var t=0;t<this.m_polyNodes.ChildCount();t++){((e=this.m_polyNodes.Childs()[t]).m_endtype===s.EndType.etClosedPolygon||e.m_endtype===s.EndType.etClosedLine&&s.Clipper.Orientation(e.m_polygon))&&e.m_polygon.reverse()}else for(t=0;t<this.m_polyNodes.ChildCount();t++){var e;(e=this.m_polyNodes.Childs()[t]).m_endtype!==s.EndType.etClosedLine||s.Clipper.Orientation(e.m_polygon)||e.m_polygon.reverse()}},s.ClipperOffset.GetUnitNormal=function(t,e){var i=e.X-t.X,n=e.Y-t.Y;if(0===i&&0===n)return new s.DoublePoint2(0,0);var o=1/Math.sqrt(i*i+n*n);return i*=o,n*=o,new s.DoublePoint2(n,-i)},s.ClipperOffset.prototype.DoOffset=function(t){if(this.m_destPolys=new Array,this.m_delta=t,s.ClipperBase.near_zero(t))for(var e=0;e<this.m_polyNodes.ChildCount();e++){(o=this.m_polyNodes.Childs()[e]).m_endtype===s.EndType.etClosedPolygon&&this.m_destPolys.push(o.m_polygon)}else{var i;this.MiterLimit>2?this.m_miterLim=2/(this.MiterLimit*this.MiterLimit):this.m_miterLim=.5,i=this.ArcTolerance<=0?s.ClipperOffset.def_arc_tolerance:this.ArcTolerance>Math.abs(t)*s.ClipperOffset.def_arc_tolerance?Math.abs(t)*s.ClipperOffset.def_arc_tolerance:this.ArcTolerance;var n=3.14159265358979/Math.acos(1-i/Math.abs(t));this.m_sin=Math.sin(s.ClipperOffset.two_pi/n),this.m_cos=Math.cos(s.ClipperOffset.two_pi/n),this.m_StepsPerRad=n/s.ClipperOffset.two_pi,t<0&&(this.m_sin=-this.m_sin);for(e=0;e<this.m_polyNodes.ChildCount();e++){var o=this.m_polyNodes.Childs()[e];this.m_srcPoly=o.m_polygon;var r=this.m_srcPoly.length;if(!(0===r||t<=0&&(r<3||o.m_endtype!==s.EndType.etClosedPolygon)))if(this.m_destPoly=new Array,1!==r){this.m_normals.length=0;for(f=0;f<r-1;f++)this.m_normals.push(s.ClipperOffset.GetUnitNormal(this.m_srcPoly[f],this.m_srcPoly[f+1]));if(o.m_endtype===s.EndType.etClosedLine||o.m_endtype===s.EndType.etClosedPolygon?this.m_normals.push(s.ClipperOffset.GetUnitNormal(this.m_srcPoly[r-1],this.m_srcPoly[0])):this.m_normals.push(new s.DoublePoint1(this.m_normals[r-2])),o.m_endtype===s.EndType.etClosedPolygon){var l=r-1;for(f=0;f<r;f++)l=this.OffsetPoint(f,l,o.m_jointype);this.m_destPolys.push(this.m_destPoly)}else if(o.m_endtype===s.EndType.etClosedLine){for(l=r-1,f=0;f<r;f++)l=this.OffsetPoint(f,l,o.m_jointype);this.m_destPolys.push(this.m_destPoly),this.m_destPoly=new Array;var p=this.m_normals[r-1];for(f=r-1;f>0;f--)this.m_normals[f]=new s.DoublePoint2(-this.m_normals[f-1].X,-this.m_normals[f-1].Y);this.m_normals[0]=new s.DoublePoint2(-p.X,-p.Y),l=0;for(f=r-1;f>=0;f--)l=this.OffsetPoint(f,l,o.m_jointype);this.m_destPolys.push(this.m_destPoly)}else{var h;for(l=0,f=1;f<r-1;++f)l=this.OffsetPoint(f,l,o.m_jointype);if(o.m_endtype===s.EndType.etOpenButt){f=r-1;h=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[f].X+this.m_normals[f].X*t),s.ClipperOffset.Round(this.m_srcPoly[f].Y+this.m_normals[f].Y*t)),this.m_destPoly.push(h),h=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[f].X-this.m_normals[f].X*t),s.ClipperOffset.Round(this.m_srcPoly[f].Y-this.m_normals[f].Y*t)),this.m_destPoly.push(h)}else{f=r-1;l=r-2,this.m_sinA=0,this.m_normals[f]=new s.DoublePoint2(-this.m_normals[f].X,-this.m_normals[f].Y),o.m_endtype===s.EndType.etOpenSquare?this.DoSquare(f,l):this.DoRound(f,l)}for(f=r-1;f>0;f--)this.m_normals[f]=new s.DoublePoint2(-this.m_normals[f-1].X,-this.m_normals[f-1].Y);this.m_normals[0]=new s.DoublePoint2(-this.m_normals[1].X,-this.m_normals[1].Y);for(f=(l=r-1)-1;f>0;--f)l=this.OffsetPoint(f,l,o.m_jointype);o.m_endtype===s.EndType.etOpenButt?(h=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X-this.m_normals[0].X*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y-this.m_normals[0].Y*t)),this.m_destPoly.push(h),h=new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X+this.m_normals[0].X*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y+this.m_normals[0].Y*t)),this.m_destPoly.push(h)):(l=1,this.m_sinA=0,o.m_endtype===s.EndType.etOpenSquare?this.DoSquare(0,1):this.DoRound(0,1)),this.m_destPolys.push(this.m_destPoly)}}else{if(o.m_jointype===s.JoinType.jtRound)for(var u=1,a=0,f=1;f<=n;f++){this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X+u*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y+a*t)));var d=u;u=u*this.m_cos-this.m_sin*a,a=d*this.m_sin+a*this.m_cos}else{u=-1,a=-1;for(var f=0;f<4;++f)this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[0].X+u*t),s.ClipperOffset.Round(this.m_srcPoly[0].Y+a*t))),u<0?u=1:a<0?a=1:u=-1}this.m_destPolys.push(this.m_destPoly)}}}},s.ClipperOffset.prototype.Execute=function(){var t=arguments,e=t[0]instanceof s.PolyTree;if(e){r=t[0],l=t[1];if(r.Clear(),this.FixOrientations(),this.DoOffset(l),(o=new s.Clipper(0)).AddPaths(this.m_destPolys,s.PolyType.ptSubject,!0),l>0)o.Execute(s.ClipType.ctUnion,r,s.PolyFillType.pftPositive,s.PolyFillType.pftPositive);else{h=s.Clipper.GetBounds(this.m_destPolys);if((p=new s.Path).push(new s.IntPoint2(h.left-10,h.bottom+10)),p.push(new s.IntPoint2(h.right+10,h.bottom+10)),p.push(new s.IntPoint2(h.right+10,h.top-10)),p.push(new s.IntPoint2(h.left-10,h.top-10)),o.AddPath(p,s.PolyType.ptSubject,!0),o.ReverseSolution=!0,o.Execute(s.ClipType.ctUnion,r,s.PolyFillType.pftNegative,s.PolyFillType.pftNegative),1===r.ChildCount()&&r.Childs()[0].ChildCount()>0){var i=r.Childs()[0];r.Childs()[0]=i.Childs()[0],r.Childs()[0].m_Parent=r;for(var n=1;n<i.ChildCount();n++)r.AddChild(i.Childs()[n])}else r.Clear()}}else{var o,r=t[0],l=t[1];if(s.Clear(r),this.FixOrientations(),this.DoOffset(l),(o=new s.Clipper(0)).AddPaths(this.m_destPolys,s.PolyType.ptSubject,!0),l>0)o.Execute(s.ClipType.ctUnion,r,s.PolyFillType.pftPositive,s.PolyFillType.pftPositive);else{var p,h=s.Clipper.GetBounds(this.m_destPolys);(p=new s.Path).push(new s.IntPoint2(h.left-10,h.bottom+10)),p.push(new s.IntPoint2(h.right+10,h.bottom+10)),p.push(new s.IntPoint2(h.right+10,h.top-10)),p.push(new s.IntPoint2(h.left-10,h.top-10)),o.AddPath(p,s.PolyType.ptSubject,!0),o.ReverseSolution=!0,o.Execute(s.ClipType.ctUnion,r,s.PolyFillType.pftNegative,s.PolyFillType.pftNegative),r.length>0&&r.splice(0,1)}}},s.ClipperOffset.prototype.OffsetPoint=function(t,e,i){if(this.m_sinA=this.m_normals[e].X*this.m_normals[t].Y-this.m_normals[t].X*this.m_normals[e].Y,Math.abs(this.m_sinA*this.m_delta)<1){if(this.m_normals[e].X*this.m_normals[t].X+this.m_normals[t].Y*this.m_normals[e].Y>0)return this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[e].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[e].Y*this.m_delta))),e}else this.m_sinA>1?this.m_sinA=1:this.m_sinA<-1&&(this.m_sinA=-1);if(this.m_sinA*this.m_delta<0)this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[e].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[e].Y*this.m_delta))),this.m_destPoly.push(new s.IntPoint1(this.m_srcPoly[t])),this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)));else switch(i){case s.JoinType.jtMiter:var n=this.m_normals[t].X*this.m_normals[e].X+this.m_normals[t].Y*this.m_normals[e].Y+1;n>=this.m_miterLim?this.DoMiter(t,e,n):this.DoSquare(t,e);break;case s.JoinType.jtSquare:this.DoSquare(t,e);break;case s.JoinType.jtRound:this.DoRound(t,e)}return e=t},s.ClipperOffset.prototype.DoSquare=function(t,e){var i=Math.tan(Math.atan2(this.m_sinA,this.m_normals[e].X*this.m_normals[t].X+this.m_normals[e].Y*this.m_normals[t].Y)/4);this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[e].X-this.m_normals[e].Y*i)),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[e].Y+this.m_normals[e].X*i)))),this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[t].X+this.m_normals[t].Y*i)),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[t].Y-this.m_normals[t].X*i))))},s.ClipperOffset.prototype.DoMiter=function(t,e,i){var n=this.m_delta/i;this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+(this.m_normals[e].X+this.m_normals[t].X)*n),s.ClipperOffset.Round(this.m_srcPoly[t].Y+(this.m_normals[e].Y+this.m_normals[t].Y)*n)))},s.ClipperOffset.prototype.DoRound=function(t,e){for(var i,n=Math.atan2(this.m_sinA,this.m_normals[e].X*this.m_normals[t].X+this.m_normals[e].Y*this.m_normals[t].Y),o=Math.max(s.Cast_Int32(s.ClipperOffset.Round(this.m_StepsPerRad*Math.abs(n))),1),r=this.m_normals[e].X,l=this.m_normals[e].Y,p=0;p<o;++p)this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+r*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+l*this.m_delta))),i=r,r=r*this.m_cos-this.m_sin*l,l=i*this.m_sin+l*this.m_cos;this.m_destPoly.push(new s.IntPoint2(s.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),s.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)))},s.Error=function(t){try{throw new Error(t)}catch(t){alert(t.message)}},s.JS={},s.JS.AreaOfPolygon=function(t,e){return e||(e=1),s.Clipper.Area(t)/(e*e)},s.JS.AreaOfPolygons=function(t,e){e||(e=1);for(var i=0,n=0;n<t.length;n++)i+=s.Clipper.Area(t[n]);return i/(e*e)},s.JS.BoundsOfPath=function(t,e){return s.JS.BoundsOfPaths([t],e)},s.JS.BoundsOfPaths=function(t,e){e||(e=1);var i=s.Clipper.GetBounds(t);return i.left/=e,i.bottom/=e,i.right/=e,i.top/=e,i},s.JS.Clean=function(t,e){if(!(t instanceof Array))return[];var i=t[0]instanceof Array;t=s.JS.Clone(t);if("number"!=typeof e||null===e)return s.Error("Delta is not a number in Clean()."),t;if(0===t.length||1===t.length&&0===t[0].length||e<0)return t;i||(t=[t]);for(var n,o,r,l,p,h,u,a=t.length,f=[],d=0;d<a;d++)if(0!==(n=(o=t[d]).length))if(n<3)r=o,f.push(r);else{for(r=o,l=e*e,p=o[0],h=1,u=1;u<n;u++)(o[u].X-p.X)*(o[u].X-p.X)+(o[u].Y-p.Y)*(o[u].Y-p.Y)<=l||(r[h]=o[u],p=o[u],h++);p=o[h-1],(o[0].X-p.X)*(o[0].X-p.X)+(o[0].Y-p.Y)*(o[0].Y-p.Y)<=l&&h--,h<n&&r.splice(h,n-h),r.length&&f.push(r)}return!i&&f.length?f=f[0]:i||0!==f.length?i&&0===f.length&&(f=[[]]):f=[],f},s.JS.Clone=function(t){if(!(t instanceof Array))return[];if(0===t.length)return[];if(1===t.length&&0===t[0].length)return[[]];var e=t[0]instanceof Array;e||(t=[t]);var i,n,o,r,s=t.length,l=new Array(s);for(n=0;n<s;n++){for(i=t[n].length,r=new Array(i),o=0;o<i;o++)r[o]={X:t[n][o].X,Y:t[n][o].Y};l[n]=r}return e||(l=l[0]),l},s.JS.Lighten=function(t,e){if(!(t instanceof Array))return[];if("number"!=typeof e||null===e)return s.Error("Tolerance is not a number in Lighten()."),s.JS.Clone(t);if(0===t.length||1===t.length&&0===t[0].length||e<0)return s.JS.Clone(t);var i,n,o,r,l,p,h,u,a,f,d,P,m,c,y,v,x=t[0]instanceof Array;x||(t=[t]);var C=t.length,I=e*e,_=[];for(i=0;i<C;i++)if(0!==(p=(o=t[i]).length)){for(r=0;r<1e6;r++){for(l=[],o[(p=o.length)-1].X!==o[0].X||o[p-1].Y!==o[0].Y?(d=1,o.push({X:o[0].X,Y:o[0].Y}),p=o.length):d=0,f=[],n=0;n<p-2;n++)h=o[n],a=o[n+1],u=o[n+2],y=h.X,v=h.Y,P=u.X-y,m=u.Y-v,0===P&&0===m||((c=((a.X-y)*P+(a.Y-v)*m)/(P*P+m*m))>1?(y=u.X,v=u.Y):c>0&&(y+=P*c,v+=m*c)),(P=a.X-y)*P+(m=a.Y-v)*m<=I&&(f[n+1]=1,n++);for(l.push({X:o[0].X,Y:o[0].Y}),n=1;n<p-1;n++)f[n]||l.push({X:o[n].X,Y:o[n].Y});if(l.push({X:o[p-1].X,Y:o[p-1].Y}),d&&o.pop(),!f.length)break;o=l}l[(p=l.length)-1].X===l[0].X&&l[p-1].Y===l[0].Y&&l.pop(),l.length>2&&_.push(l)}return x||(_=_[0]),void 0===_&&(_=[]),_},s.JS.PerimeterOfPath=function(t,e,i){if(void 0===t)return 0;var n,o,r=Math.sqrt,s=0,l=0,p=0,h=0,u=0,a=t.length;if(a<2)return 0;for(e&&(t[a]=t[0],a++);--a;)l=(n=t[a]).X,p=n.Y,s+=r((l-(h=(o=t[a-1]).X))*(l-h)+(p-(u=o.Y))*(p-u));return e&&t.pop(),s/i},s.JS.PerimeterOfPaths=function(t,e,i){i||(i=1);for(var n=0,o=0;o<t.length;o++)n+=s.JS.PerimeterOfPath(t[o],e,i);return n},s.JS.ScaleDownPath=function(t,e){var i,n;for(e||(e=1),i=t.length;i--;)(n=t[i]).X=n.X/e,n.Y=n.Y/e},s.JS.ScaleDownPaths=function(t,e){var i,n,o;for(e||(e=1),i=t.length;i--;)for(n=t[i].length;n--;)(o=t[i][n]).X=o.X/e,o.Y=o.Y/e},s.JS.ScaleUpPath=function(t,e){var i,n,o=Math.round;for(e||(e=1),i=t.length;i--;)(n=t[i]).X=o(n.X*e),n.Y=o(n.Y*e)},s.JS.ScaleUpPaths=function(t,e){var i,n,o,r=Math.round;for(e||(e=1),i=t.length;i--;)for(n=t[i].length;n--;)(o=t[i][n]).X=r(o.X*e),o.Y=r(o.Y*e)},s.ExPolygons=function(){return[]},s.ExPolygon=function(){this.outer=null,this.holes=null},s.JS.AddOuterPolyNodeToExPolygons=function(t,e){var i=new s.ExPolygon;i.outer=t.Contour();var n,o,r,l,p,h,u=t.Childs(),a=u.length;for(i.holes=new Array(a),r=0;r<a;r++)for(n=u[r],i.holes[r]=n.Contour(),l=0,h=(p=n.Childs()).length;l<h;l++)o=p[l],s.JS.AddOuterPolyNodeToExPolygons(o,e);e.push(i)},s.JS.ExPolygonsToPaths=function(t){var e,i,n,o,r=new s.Paths;for(e=0,n=t.length;e<n;e++)for(r.push(t[e].outer),i=0,o=t[e].holes.length;i<o;i++)r.push(t[e].holes[i]);return r},s.JS.PolyTreeToExPolygons=function(t){var e,i,n,o,r=new s.ExPolygons;for(i=0,o=(n=t.Childs()).length;i<o;i++)e=n[i],s.JS.AddOuterPolyNodeToExPolygons(e,r);return r}}()},function(t,e,i){t.exports=function(){return new Worker(i.p+"6096405877b8b193f994.worker.js")}},function(t,e,i){t.exports=function(){return new Worker(i.p+"35c7a3579afd3ebdfaa3.worker.js")}},function(t,e,i){"use strict";i.r(e);Symbol();class n{constructor(t=0,e=123456789,i=362436069,n=521288629){this.w=t+1,this.x=0|this.w<<13,this.y=0|this.w>>>9^this.x<<6,this.z=0|this.y>>>7}next(){let t=this.x^this.x<<11;return this.x=this.y,this.y=this.z,this.z=this.w,(this.w=this.w^this.w>>>19^t^t>>>8)>>>0}rand(){return this.next()}randInt(t=0,e=2147483647){return Math.abs(this.rand())%(e-t)+t}randFloat(t=0,e=1){return Math.fround(this.rand()%65535/65535)*(e-t)+t}shuffle(t){var e=t.concat();for(let t=0;t<=e.length-2;t=0|t+1){let i=this.randInt(t,e.length-1),n=e[t];e[t]=e[i],e[i]=n}return e}}class o{constructor(t=0,e=0,i=!1){this.x=t,this.y=e,this.marked=i}static fromJSON(t){return new o(t.x,t.y,t.marked)}set(t){return this.x=t.x,this.y=t.y,this}normalize(){let t=this.length();return new o(this.x/t,this.y/t)}add(t){return new o(this.x+t.x,this.y+t.y)}sub(t){return new o(this.x-t.x,this.y-t.y)}multiplyScalar(t){return new o(this.x*t,this.y*t,this.marked)}squaredLength(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.squaredLength())}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.y*t.x-this.x*t.y}perpendicular(){return new o(this.y,-this.x)}negative(){return new o(-this.x,-this.y)}translate(t,e){return new o(this.x+t,this.y+e)}mark(){return this.marked=!0,this}unmark(){return this.marked=!1,this}approximately(t,e=1e-9){return Math.abs(this.x,t.x)<e&&Math.abs(this.y,t.y)<e}clone(){return new o(this.x,this.y,this.marked)}}class r{constructor(){}toSVG(){throw new Error("Not implemented toSVG()")}}class s{constructor(t,e){this.min=t,this.max=e,this.width=this.max.x-this.min.x,this.height=this.max.y-this.min.y}}class l extends r{constructor(t,e={}){super(),this.points=t,this.options=e}static fromJSON(t){let e=t.points.map(t=>o.fromJSON(t));return new l(e,t.options)}bounds(){let t=Number.MAX_VALUE,e=Number.MIN_VALUE,i=Number.MAX_VALUE,n=Number.MIN_VALUE;return this.points.forEach(o=>{t=Math.min(o.x,t),i=Math.min(o.y,i),e=Math.max(o.x,e),n=Math.max(o.y,n)}),new s(new o(t,i),new o(e,n))}translate(t,e){let i=this.clone();return i.points=i.points.map(i=>i.translate(t,e)),i}rotate(t){let e=this.clone(),i=Math.sin(t),n=Math.cos(t);return e.points=e.points.map(t=>new o(t.x*n-t.y*i,t.x*i+t.y*n,t.marked)),e}clone(){let t=this.points.map(t=>t.clone());return new l(t,this.options)}area(){let t=0,e=this.points.length;for(let i=0,n=e-1;i<e;n=i++)t+=(this.points[n].x+this.points[i].x)*(this.points[n].y-this.points[i].y);return.5*t}toSVG(){let t=document.createElementNS("http://www.w3.org/2000/svg","svg"),e=document.createElementNS("http://www.w3.org/2000/svg","polyline");if(e.setAttribute("stroke",this.options.strokeColor||"#000000"),e.setAttribute("stroke-width",this.options.strokeWidth||2),e.setAttribute("fill",this.options.fill||"none"),this.points.forEach((i,n)=>{let o=t.createSVGPoint();o.x=i.x,o.y=i.y,e.points.appendItem(o)}),(void 0===this.options.closed||this.options.closed)&&this.points.length>0){let i=this.points[0],n=t.createSVGPoint();n.x=i.x,n.y=i.y,e.points.appendItem(n)}return e}}class p extends l{constructor(t,e,i){super(e,i),this.id=t,this.offset=new o(0,0),this.transformed=0,this.rotation=0}static fromJSON(t){let e=t.points.map(t=>o.fromJSON(t)),i=new p(t.id,e,t.options);return i.offset=new o(t.offset.x,t.offset.y),i.transformed=t.transformed,i.rotation=t.rotation,i}transform(t,e){let i=this.clone();return i.transformed=t,i.rotation=1*t/e*Math.PI*2,i}clone(){let t=this.points.map(t=>t.clone()),e=new p(this.id,t,this.options);return e.offset=this.offset.clone(),e.transformed=this.transformed,e.rotation=this.rotation,e}toString(){return`${this.id}:${this.transformed}`}}class h extends p{constructor(t,e,i,n){super(t,[new o(0,0),new o(e,0),new o(e,i),new o(0,i)],n),this.width=e,this.height=i,this.isBin=!0}static fromJSON(t){let e=new h(t.id,t.width,t.height,t.options);return e.offset=new o(t.offset.x,t.offset.y),e.rotation=this.rotation,e}clone(){let t=new h(this.id,this.width,this.height,this.options);return t.offset=new o(json.offset.x,json.offset.y),t.rotation=json.rotation,t}toString(){return`bin:${this.id}`}}const u=2*Math.PI,a=function(t,e=0,i=1){var n=t.randFloat(),o=t.randFloat();return e+i*(Math.sqrt(-2*Math.log(n))*Math.sin(u*o))};class f{constructor(t=[]){this.genes=t,this.cost=1e5,this.options={}}clone(){let t=new f(this.genes.map(t=>t));return t.cost=this.cost,t.options=this.options,t}evaluate(t,e={}){this.cost=t,this.options=e}crossOver(t,e){let i=[],n=Math.floor(t.randFloat()*this.genes.length);for(let t=0,o=this.genes.length;t<o;t++)i[t]=t>n?this.genes[t]:e.genes[t];return new f(i)}mutate(t,e,i){let n=[];for(let o=0,r=this.genes.length;o<r;o++){let r=this.genes[o];if(t.randFloat()<=e){let e=a(t,0,1)*i;(r=Math.floor(r+e)%i)<0&&(r=(i+r)%i)}n.push(r)}return new f(n)}}class d{constructor(t,e,i={steps:4,population:30,mutationRate:.2}){this.rnd=t,this.generations=0,this.population=[],this.config=i,this.config.steps=this.config.steps||4,this.config.mutationRate=this.config.mutationRate||.2;const n=Math.max(3,Number(this.config.population||0));for(let t=0;t<n;t++)this.population.push(this.adam(e,this.config.steps))}adam(t,e=4){let i=[];for(let n=0;n<t;n++){let t=Math.floor(this.rnd.randFloat()*e)%e;i.push(t)}return new f(i)}step(){this.generations++;let t=this.select();t.length<=0&&(t=this.population);for(let e=0,i=this.population.length;e<i;e++){let i=this.rnd.randInt(0,t.length),n=this.rnd.randInt(0,t.length),o=t[i],r=t[n],s=o.crossOver(this.rnd,r);s=s.mutate(this.rnd,this.config.mutationRate,this.config.steps),this.population[e]=s}}select(){let t=[],e=this.getMinMaxCost(),i=e.max-e.min;return this.population.forEach(n=>{let o=1-(n.cost-e.min)/i,r=Math.floor(50*o);for(let e=0;e<r;e++)t.push(n)}),t}getDominant(){let t=null,e=Number.MAX_VALUE;return this.population.forEach(i=>{i.cost<e&&(e=i.cost,t=i)}),t}getMinMaxCost(){let t=Number.MAX_VALUE,e=Number.MIN_VALUE;return this.population.forEach(i=>{e=Math.max(e,i.cost),t=Math.min(t,i.cost)}),{min:t,max:e}}}var P=i(1),m=i.n(P),c=i(2),y=i.n(c),v=i(0),x=i.n(v);const C=function(t){return t.map(t=>({X:1e7*t.x,Y:1e7*t.y}))},I=function(t){return t.map(t=>new o(t.X/1e7,t.Y/1e7))},_=function(t,e,i){return i||(i=1e-9),Math.abs(t-e)<i},g=function(t,e,i=2.5,n=1){if(_(e,0))return t;let o=new x.a.ClipperOffset(i,1e7*n),r=C(t.points);o.AddPath(r,x.a.JoinType.jtRound,x.a.EndType.etClosedPolygon);let s=new x.a.Paths;o.Execute(s,1e7*e);let l=t.clone(),p=I(s[0]);return l.points=p,l},E=function(t,e,i){return JSON.stringify({A:t.toString(),B:e.toString(),inside:i})};let L=new m.a,T=new y.a;class X{constructor(t=0){this.running=!1,this.bins=[],this.parts=[],this.config={}}start(t,e,i,o={}){this.running&&this.stop(),this.running=!0,this.bins=t.map(t=>t).sort((t,e)=>t.area()>e.area()?1:-1),this.source=this.parts=e.map(t=>t).sort((t,e)=>t.area()>e.area()?1:-1),this.config=i||{},this.rnd=new n(this.config.seed||0),this.config.spacing>0&&(this.parts=this.parts.map(t=>g(t,i.spacing))),this.packAsync({onEvaluation:t=>{o&&o.onEvaluation&&o.onEvaluation(t)},onPacking:t=>{o&&o.onPacking&&this.onPacking(t,o.onPacking)},onPackingCompleted:t=>{o&&o.onPackingCompleted&&this.onPacking(t,o.onPackingCompleted)}})}onPacking(t,e){let i=this.applyPlacements(t.placements,this.source.map(t=>t.clone()));t.bins=this.bins,t.placed=i,t.unplaced=t.unplaced.map(t=>this.source.find(e=>e.id===t.id)),e(t)}stop(){this.running=!1,void 0!==T&&T.terminate(),void 0!==L&&L.terminate(),T=new y.a,L=new m.a}transform(t,e,i){return e.map((e,n)=>e.transform(t.genes[n],i))}applyPlacements(t,e){let i=[];return t.forEach(t=>{const n=t.part;let o=e.findIndex(t=>t.id===n);-1!==o&&(e[o]=e[o].rotate(t.rotation).translate(t.position.x,t.position.y),i.push(e[o]))}),i}addBin(t){this.bins.push(t)}packAsync(t={}){let e={},i=new d(this.rnd,this.parts.length,{population:this.config.population,mutationRate:this.config.mutationRate,steps:this.config.rotationSteps}),n=this.config.generations;return new Promise(o=>{this.stepAsync(null,0,n,i,e,t).then(t=>{for(let t in e)delete e[t];o(t.options.placements)})})}stepAsync(t,e,i,n,o,r){return new Promise(s=>{this.evaluateAllAsync(e,n.population,0,o,r).then(()=>{let l=n.getDominant();(null===t||l.cost<t.cost)&&(t=l.clone());let p={generation:e,placements:t.options.placements,unplaced:t.options.unplaced,dominant:t};if(e<i)return void 0!==r.onPacking&&r.onPacking(p),n.step(),this.stepAsync(t,e+1,i,n,o,r).then(s);void 0!==r.onPackingCompleted&&r.onPackingCompleted(p),s(t)})})}evaluateAllAsync(t,e,i,n,o){let r=e.length;return new Promise(s=>{if(i>=r)s();else{let l=e[i];this.evaluateAsync(l,n,e=>{if(void 0!==o.onEvaluation){let n=1/r*e;o.onEvaluation({generation:t,progress:n+i/r})}}).then(()=>{void 0!==o.onEvaluation&&o.onEvaluation({generation:t,progress:(i+1)/r}),this.evaluateAllAsync(t,e,i+1,n,o).then(s)})}})}evaluateAsync(t,e,i){let n=this.transform(t,this.parts,this.config.rotationSteps||4);return new Promise(o=>{this.createNfpsAsync(n,e,!1,!1,i).then(()=>{this.placeAsync(n,e).then((function(e){n=[],t.evaluate(e.cost,e),o(t)}))})})}placeAsync(t,e){return new Promise(i=>{L.onmessage=function(t){let e=t.data.result;i(e)},L.postMessage({bins:this.bins,parts:t,nfpCache:e})})}createNfpsAsync(t,e,i=!1,n=!1,o){let r=[];for(let o=0,s=this.bins.length;o<s;o++){let s=this.bins[o];for(let o=0,l=t.length;o<l;o++){let l=t[o];E(s,l,i,n)in e||r.push({A:s,B:l,inside:i,edges:n})}}for(let o=0,s=t.length;o<s;o++){let l=t[o];for(let p=0;p<s;p++){let s=t[p];o!==p&&(E(l,s,i,n)in e||r.push({A:l,B:s,inside:i,edges:n}))}}return this.createAllNfpAsync(r,0,e,o)}createAllNfpAsync(t,e,i,n){let o=t.length;return new Promise(r=>{if(e>=o)r(i);else{let s=t[e];this.createNfpAsync(s.A,s.B,s.inside,s.edges).then(s=>(i[s.key]=s.nfp,void 0!==n&&n(e/(o-1)),this.createAllNfpAsync(t,e+1,i,n).then(r)))}})}createNfpAsync(t,e,i=!1,n=!1){return new Promise(o=>{let r=E(t,e,i,n);T.onmessage=function(t){o({key:r,nfp:t.data.result})},T.postMessage({A:t,B:e,inside:i,edges:n})})}}i.d(e,"XorShift",(function(){return n})),i.d(e,"Vector",(function(){return o})),i.d(e,"Part",(function(){return p})),i.d(e,"Bin",(function(){return h})),i.d(e,"Packer",(function(){return X}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,